{"version":3,"sources":["webpack:///./source/src/app/components/Shared/DropZoneLocal.jsx","webpack:///./source/src/app/components/Apis/Create/Components/SelectPolicies.jsx","webpack:///./source/src/app/components/Apis/Create/WSDL/Steps/ProvideWSDL.jsx","webpack:///./source/src/app/data/Wsdl.js","webpack:///./source/src/app/components/Apis/Create/OpenAPI/Steps/ProvideOpenAPI.jsx","webpack:///./source/src/app/components/Apis/Create/GraphQL/Steps/ProvideGraphQL.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/MethodView.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEditWorkspace.jsx","webpack:///./source/src/app/components/Shared/Banner.jsx"],"names":["humanFileSize","bytesParam","si","arguments","length","undefined","bytes","thresh","Math","abs","units","u","toFixed","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","DropZoneLocal","props","message","onDrop","error","children","accept","dropZoneObject","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","_objectSpread","containerStyles","fontFamily","useTheme","typography","textAlign","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","className","_extends","multiple","defaultProps","showFilesList","propTypes","PropTypes","string","func","bool","oneOfType","element","array","shape","__webpack_require__","d","__webpack_exports__","SelectPolicies","react__WEBPACK_IMPORTED_MODULE_0__","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_6__","react_intl__WEBPACK_IMPORTED_MODULE_7__","AppData_api__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_9__","useStyles","makeStyles","theme","mandatoryStar","palette","main","marginLeft","spacing","onChange","policies","selectedPolicies","helperText","isAPIProduct","validate","setPolicies","useState","classes","useEffect","API","then","response","body","handleValidateAndChange","_ref","target","value","name","list","fullWidth","select","label","Fragment","id","defaultMessage","SelectProps","renderValue","selected","Array","isArray","join","margin","variant","InputProps","InputLabelProps","for","map","policy","dense","disableGutters","key","displayName","checked","includes","primary","secondary","description","required","isRequired","ProvideWSDL","apiInputs","inputsDispatcher","onValidate","isFileInput","inputType","isGenerateRESTAPI","type","isError","setValidity","isValidating","setIsValidating","isCreateMode","mode","handleWSDLValidationResponse","isWSDLValid","isValid","success","file","url","handleWSDLValidationErrorResponse","files","state","Wsdl","validateFileOrArchive","action","catch","dropBoxControlLabel","react_intl__WEBPACK_IMPORTED_MODULE_10__","values","break","urlStateEndAdornment","_material_ui_core_InputAdornment__WEBPACK_IMPORTED_MODULE_12__","position","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_11__","_material_ui_icons_ErrorOutline__WEBPACK_IMPORTED_MODULE_23___default","fontSize","_material_ui_icons_Check__WEBPACK_IMPORTED_MODULE_24___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_3__","container","item","md","_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_7__","component","_material_ui_core_FormLabel__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_RadioGroup__WEBPACK_IMPORTED_MODULE_5__","aria-label","event","_material_ui_core_FormControlLabel__WEBPACK_IMPORTED_MODULE_6__","control","_material_ui_core_Radio__WEBPACK_IMPORTED_MODULE_2__","AppComponents_Shared_Banner__WEBPACK_IMPORTED_MODULE_27__","onClose","disableActions","paperProps","elevation","inputValue","_material_ui_core_List__WEBPACK_IMPORTED_MODULE_14__","_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_15__","path","_material_ui_core_ListItemAvatar__WEBPACK_IMPORTED_MODULE_16__","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_17__","_material_ui_icons_InsertDriveFile__WEBPACK_IMPORTED_MODULE_19___default","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_22__","concat","size","_material_ui_core_ListItemSecondaryAction__WEBPACK_IMPORTED_MODULE_21__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_18__","edge","onClick","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_20___default","AppComponents_Shared_DropZoneLocal__WEBPACK_IMPORTED_MODULE_28__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_4__","autoFocus","placeholder","shrink","onBlur","_ref2","validateUrl","APIValidation","endAdornment","Boolean","disabled","AppData_api__WEBPACK_IMPORTED_MODULE_0__","_APIClientFactory__WEBPACK_IMPORTED_MODULE_1__","_Utils__WEBPACK_IMPORTED_MODULE_2__","_Resource__WEBPACK_IMPORTED_MODULE_3__","Resource","[object Object]","APIClientFactory","getAPIClient","Utils","getCurrentEnvironment","client","apis","Validation","validateWSDLDefinition","additionalProperties","implementationType","APIs","importWSDLDefinition","JSON","stringify","ProvideOpenAPI","pop","validFile","validateOpenAPIByFile","isValidFile","info","console","finally","validateURL","validateOpenAPIByUrl","returnContent","isValidURL","content","INPUT_TYPES","FILE","URL","isInvalidURL","_material_ui_icons_ErrorOutline__WEBPACK_IMPORTED_MODULE_14___default","_material_ui_icons_Check__WEBPACK_IMPORTED_MODULE_13___default","xs","AppComponents_Shared_Banner__WEBPACK_IMPORTED_MODULE_25__","_material_ui_core_List__WEBPACK_IMPORTED_MODULE_16__","_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_17__","_material_ui_core_ListItemAvatar__WEBPACK_IMPORTED_MODULE_18__","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_19__","_material_ui_icons_InsertDriveFile__WEBPACK_IMPORTED_MODULE_21___default","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_24__","_material_ui_core_ListItemSecondaryAction__WEBPACK_IMPORTED_MODULE_23__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_20__","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_22___default","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_15__","ProvideGraphQL","validateGraphQLFile","graphQLInfo","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_FormLabel__WEBPACK_IMPORTED_MODULE_4__","react_intl__WEBPACK_IMPORTED_MODULE_6__","AppComponents_Shared_Banner__WEBPACK_IMPORTED_MODULE_20__","_material_ui_core_List__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_ListItemAvatar__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_12__","_material_ui_icons_InsertDriveFile__WEBPACK_IMPORTED_MODULE_14___default","_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_17__","_material_ui_core_ListItemSecondaryAction__WEBPACK_IMPORTED_MODULE_16__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_13__","_material_ui_icons_Delete__WEBPACK_IMPORTED_MODULE_15___default","AppComponents_Shared_DropZoneLocal__WEBPACK_IMPORTED_MODULE_19__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_8__","MethodView","method","chipColor","custom","resourceChipColors","toLowerCase","chipTextColor","getContrastText","log","react_default","Chip","height","width","searchWrapper","marginTop","& input","paper","apiWrapper","overflowY","ResourceWrapper","marginRight","& .frame","border","grey","& .frame::-webkit-scrollbar","-webkit-appearance","& .frame::-webkit-scrollbar:vertical","& .frame::-webkit-scrollbar:horizontal","& .frame::-webkit-scrollbar-thumb","common","white","& .frame.rightFrame","SelectedResourceWrapper","overflowX","leftMost","background","rightMost","colTitle","fontWeight","minHeight","treeItemMain","treeItemMainWrapper","paddingLeft","treeItem","& .material-icons","cursor","hr","methodView","middleText","selectedApi","selectedTitle","buttonWrapper","textDecorate","selectedApiDescription","messageWrapper","tootBar","justifyContent","& a","inactiveIcon","ProductResourcesEdit","apiResources","setApiResources","isStateCreate","api","resourceNotFountMessage","allApis","setAllApis","notFound","setNotFound","searchText","setSearchText","selectedApiPaths","setSelectedApiPaths","setSelectedApi","fromSearch","setFromSearch","apiRestClient","filterAPIs","text","composeQuery","trim","composeQueryJSON","queryString","parse","limit","offset","search","all","query","addPropsToSelectedApiPaths","paths","apiId","latestApiResources","Object","keys","methodObj","innerKey","verb","resourceFound","resourcekey","apiResource","operations","operationKey","operation","allreadyAdded","getApiSwagger","apiSelected","getSwagger","obj","status","doRedirectToLogin","updateResourceTree","resourceToAdd","inputApiResources","updateStateHere","newApiResources","cloneDeep","version","newResource","toUpperCase","authType","throttlingPolicy","scopes","apiFound","indexA","operationFound","indexB","splice","push","updateCheckBox","prevSelectedApiPaths","addSelectedResourcesToTree","addAll","filteredList","filter","theApi","lifeCycleStatus","ResourceNotFound","Grid","lib","Paper","TextField","List","apiObj","labelId","ListItem","role","button","ListItemText","context","Typography","Button","onKeyDown","Icon","VerticalDivider","CONSTS","HTTP_METHODS","ListItemIcon","minWidth","Checkbox","tabIndex","disableRipple","inputProps","ProductResources_MethodView","ListItemSecondaryAction","IconButton","instanceOf","xLarge","pxToRem","Banner","history","open","disableClose","isOpen","setIsOpen","iconProps","title","bannerIcon","String","first","rest","code","_material_ui_icons_Error__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_icons_Warning__WEBPACK_IMPORTED_MODULE_7___default","_material_ui_icons_CheckCircle__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_icons_Info__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_Fade__WEBPACK_IMPORTED_MODULE_14__","in","unmountOnExit","_material_ui_core_Box__WEBPACK_IMPORTED_MODULE_6__","clone","pt","pr","pb","pl","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_3__","wrap","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_4__","gutterBottom","justify","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_5__","goBack","react_intl__WEBPACK_IMPORTED_MODULE_12__","window","location","reload","oneOf","number","withRouter"],"mappings":"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","file":"APICreateRoutes~DeferredDetails.e25e4c01cf81669219d9.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { useTheme } from '@material-ui/core/styles';\n\n/**\n *\n * Convert raw byte values to human readable format\n * @param {Number} bytes number of bytes\n * @param {boolean} [si=false]\n * @returns {String} Human readable string format\n */\nexport function humanFileSize(bytesParam, si = false) {\n    let bytes = bytesParam; // To prevent `no-param-reassign` eslint rule violation\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return bytes + ' B';\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n    return bytes.toFixed(1) + ' ' + units[u];\n}\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '100px 20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3',\n};\n\nconst acceptStyle = {\n    borderColor: '#00e676',\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744',\n};\n\n/**\n *\n * Provide a class friendly Dropzone wrapper using hooks.\n * @export\n * @returns\n */\nexport default function DropZoneLocal(props) {\n    const {\n        message, onDrop, error, children, accept,\n    } = props;\n    const dropZoneObject = useDropzone({ onDrop });\n    const {\n        getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject,\n    } = dropZoneObject;\n\n    const style = useMemo(\n        () => ({\n            ...baseStyle,\n            ...(isDragActive ? activeStyle : {}),\n            ...(isDragAccept ? acceptStyle : {}),\n            ...(isDragReject ? rejectStyle : {}),\n        }),\n        [isDragActive, isDragReject, error],\n    );\n    const theme = useTheme();\n\n    const containerStyles = {\n        fontFamily: theme.typography.fontFamily,\n        textAlign: 'center',\n    };\n\n    return (\n        <section className='container' style={containerStyles}>\n            <div {...getRootProps({ style })}>\n                <input {...getInputProps()} multiple={false} accept={accept} />\n                {children || <p>{message}</p>}\n            </div>\n        </section>\n    );\n}\nDropZoneLocal.defaultProps = {\n    message: \"Drag 'n' drop some files here, or click to select files\",\n    onDrop: () => {},\n    showFilesList: true,\n    children: null,\n    error: false,\n    accept: '*',\n};\nDropZoneLocal.propTypes = {\n    message: PropTypes.string,\n    onDrop: PropTypes.func,\n    accept: PropTypes.string,\n    showFilesList: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array]),\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n}));\n\n/**\n * Trottling Policies dropdown selector used in minimized API Create form\n * @export\n * @param {*} props\n * @returns {React.Component}\n */\nexport default function SelectPolicies(props) {\n    const {\n        onChange, policies: selectedPolicies, multiple, helperText, isAPIProduct, validate,\n    } = props;\n    const [policies, setPolicies] = useState({});\n    const classes = useStyles();\n    useEffect(() => {\n        API.policies('subscription').then((response) => setPolicies(response.body));\n    }, []);\n    const handleValidateAndChange = ({ target: { value, name } }) => {\n        validate('policies', value);\n        onChange({ target: { name, value } });\n    };\n    if (!policies.list) {\n        return <CircularProgress />;\n    } else {\n        return (\n            <TextField\n                fullWidth\n                select\n                label={(\n                    <>\n                        <FormattedMessage\n                            id='Apis.Create.Components.SelectPolicies.business.plans'\n                            defaultMessage='Business plan(s)'\n                        />\n                        {isAPIProduct && (<sup className={classes.mandatoryStar}>*</sup>)}\n                    </>\n                )}\n                value={selectedPolicies}\n                name='policies'\n                onChange={handleValidateAndChange}\n                SelectProps={{\n                    multiple,\n                    renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                }}\n                helperText={isAPIProduct ? helperText + 'API Product' : helperText + 'API'}\n                margin='normal'\n                variant='outlined'\n                InputProps={{\n                    id: 'itest-id-apipolicies-input',\n                }}\n                InputLabelProps={{\n                    for: 'itest-id-apipolicies-input',\n                }}\n            >\n                {policies.list.map((policy) => (\n                    <MenuItem\n                        dense\n                        disableGutters={multiple}\n                        id={policy.name}\n                        key={policy.name}\n                        value={policy.displayName}\n                    >\n                        {multiple && <Checkbox color='primary' checked={selectedPolicies.includes(policy.name)} />}\n                        <ListItemText primary={policy.displayName} secondary={policy.description} />\n                    </MenuItem>\n                ))}\n            </TextField>\n        );\n    }\n}\n\nSelectPolicies.defaultProps = {\n    policies: [],\n    multiple: true,\n    required: false,\n    isAPIProduct: PropTypes.bool.isRequired,\n    helperText: 'Select one or more throttling policies for the ',\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CheckIcon from '@material-ui/icons/Check';\n\nimport APIValidation from 'AppData/APIValidation';\nimport Wsdl from 'AppData/Wsdl';\nimport Banner from 'AppComponents/Shared/Banner';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using WSDL UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using WSDL wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideWSDL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const isGenerateRESTAPI = apiInputs.type === 'SOAPTOREST';\n    const classes = useStyles();\n    const [isError, setValidity] = useState(); // If valid value is `null` else an error object will be there\n    const [isValidating, setIsValidating] = useState(false);\n    const isCreateMode = apiInputs.mode === 'create';\n\n    /**\n     * Handles WSDL validation response and returns the state.\n     *\n     * @param {*} response WSDL validation response\n     * @param {string} type of the input; file or url\n     * @returns {boolean} validation status\n     */\n    function handleWSDLValidationResponse(response, type) {\n        const isWSDLValid = response.body.isValid;\n        let success = false;\n        if (isWSDLValid) {\n            if (type === 'file') {\n                setValidity({ ...isError, file: null });\n            } else {\n                setValidity({ ...isError, url: null });\n            }\n            success = true;\n        } else if (type === 'file') {\n            setValidity({ ...isError, file: { message: 'WSDL content validation failed!' } });\n        } else {\n            setValidity({ ...isError, url: { message: 'Invalid WSDL URL!' } });\n        }\n        onValidate(isWSDLValid);\n        setIsValidating(false);\n        return success;\n    }\n\n    /**\n     * Handles WSDL validation error response.\n     *\n     * @param error {*} error object\n     * @param type {string} file/url type\n     */\n    function handleWSDLValidationErrorResponse(error, type) {\n        let message = 'Error occurred during validation';\n        if (error.response && error.response.body.description) {\n            message = error.response.body.description;\n        }\n        if (type === 'file') {\n            setValidity({ ...isError, file: { message } });\n        } else {\n            setValidity({ ...isError, url: { message } });\n        }\n        setIsValidating(false);\n    }\n\n    /**\n     * Trigger the onValidate call back after validating WSDL url from the state.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object\n     */\n    function validateUrl(state) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateUrl(apiInputs.inputValue).then((response) => {\n                handleWSDLValidationResponse(response, 'url');\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'url');\n            });\n        } else {\n            setValidity({ ...isError, url: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate callback after validating the provided WSDL file.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {*} file WSDL file or archive\n     * @param {Object} state Validation state object\n     */\n    function validateFileOrArchive(file, state = null) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateFileOrArchive(file).then((response) => {\n                if (handleWSDLValidationResponse(response, 'file')) {\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                }\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'file');\n            });\n        } else {\n            setValidity({ ...isError, file: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        // Why `files[0]` below is , We only handle one wsdl file at a time, So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        validateFileOrArchive(files[0]);\n    }\n\n    /**\n     *  Render uploaded WSDL schema list\n     */\n    function renderUploadedList() {\n        return (\n            <List>\n                <ListItem key={apiInputs.inputValue.path}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <InsertDriveFile />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={`${apiInputs.inputValue.path} - ${humanFileSize(apiInputs.inputValue.size)}`}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            edge='end'\n                            aria-label='delete'\n                            onClick={() => {\n                                inputsDispatcher({ action: 'inputValue', value: null });\n                                inputsDispatcher({ action: 'isFormValid', value: false });\n                            }}\n                        >\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        );\n    }\n\n    const dropBoxControlLabel = isGenerateRESTAPI ? (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.dropzone'\n            defaultMessage='Drag & Drop WSDL file {break} -or-'\n            values={{ break: <br /> }}\n        />\n    ) : (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.archive.dropzone'\n            defaultMessage='Drag & Drop WSDL file/archive {break} -or-'\n            values={{ break: <br /> }}\n        />\n    );\n\n    /**\n     * Render file upload UI.\n     *\n     */\n    function renderFileUpload() {\n        if (apiInputs.inputValue) {\n            return renderUploadedList();\n        }\n        // TODO: Pass message saying accepting only one file ~tmkb\n        return (\n            <DropZoneLocal\n                error={isError && isError.file}\n                onDrop={onDrop}\n                files={apiInputs.inputValue}\n                accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.wsdl'\n            >\n                {isValidating ? (<CircularProgress />)\n                    : (\n                        <>\n                            { dropBoxControlLabel }\n                            <Button\n                                color='primary'\n                                variant='contained'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.upload'\n                                    defaultMessage='Browse File to Upload'\n                                />\n                            </Button>\n                        </>\n                    )}\n            </DropZoneLocal>\n        );\n    }\n\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isError && isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <ErrorOutlineIcon fontSize='large' color='error' />\n            </InputAdornment>\n        );\n    } else if (isError && !isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CheckIcon fontSize='large' color='primary' />\n            </InputAdornment>\n        );\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                {isCreateMode\n                && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.implementation.type'\n                                        defaultMessage='Implementation Type'\n                                    />\n                                </>\n                            </FormLabel>\n                            <RadioGroup\n                                aria-label='Implementation type'\n                                value={apiInputs.type ? apiInputs.type : 'SOAP'}\n                                onChange={\n                                    (event) => {\n                                        inputsDispatcher({ action: 'type', value: event.target.value });\n                                        inputsDispatcher({ action: 'isFormValid', value: false });\n                                        inputsDispatcher({ action: 'inputValue', value: null });\n                                        inputsDispatcher({ action: 'inputType', value: 'url' });\n                                    }\n                                }\n                            >\n                                <FormControlLabel\n                                    value='SOAP'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.passthrough.label'\n                                            defaultMessage='Pass Through'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='SOAPTOREST'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.SOAPtoREST.label'\n                                            defaultMessage='Generate REST APIs'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                )}\n                <Grid item md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value='url'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.url.label'\n                                        defaultMessage='WSDL URL'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='file'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.file.label.wsdl.file.archive'\n                                        defaultMessage='WSDL File/Archive'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isError && isError.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isError.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {isFileInput ? renderFileUpload()\n                        : (\n                            <TextField\n                                autoFocus\n                                id='outlined-full-width'\n                                label='WSDL URL'\n                                placeholder='Enter WSDL URL'\n                                fullWidth\n                                margin='normal'\n                                variant='outlined'\n                                onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                                value={apiInputs.inputValue}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    onBlur: ({ target: { value } }) => {\n                                        validateUrl(APIValidation.url.required().validate(value).error);\n                                    },\n                                    endAdornment: urlStateEndAdornment,\n                                }}\n                                helperText={\n                                    (isError && isError.url && isError.url.message) || 'Click away to validate the URL'\n                                }\n                                error={isError && Boolean(isError.url)}\n                                disabled={isValidating}\n                            />\n                        )}\n\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideWSDL.defaultProps = {\n    onValidate: () => { },\n};\nProvideWSDL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        mode: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/**\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport API from 'AppData/api';\n\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\n\n/**\n * An abstract representation of a Scopes\n */\nclass Wsdl extends Resource {\n    /**\n     * Validate a WSDL file or an archive\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateFileOrArchive(file) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment()).client;\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition({ file });\n        });\n    }\n\n    /**\n     * Validate a WSDL URL\n     *\n     * @static\n     * @param {*} url WSDL URL\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateUrl(url) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment()).client;\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition({ url });\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} url WSDL url\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByUrl(url, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment()).client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition({\n                url,\n                additionalProperties: JSON.stringify(additionalProperties),\n                implementationType,\n            });\n\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByFileOrArchive(file, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment()).client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition({\n                file,\n                additionalProperties: JSON.stringify(additionalProperties),\n                implementationType,\n            });\n\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n}\n\nexport default Wsdl;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Banner from 'AppComponents/Shared/Banner';\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using OpenAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideOpenAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n    const classes = useStyles();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [isValidating, setIsValidating] = useState(false);\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one OpenAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateOpenAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'OpenAPI content validation failed!' } });\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'OpenAPI content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only in valid URLs\n        if (state === null) {\n            setIsValidating(true);\n            API.validateOpenAPIByUrl(apiInputs.inputValue, { returnContent: true }).then((response) => {\n                const {\n                    body: { isValid: isValidURL, info, content },\n                } = response;\n                if (isValidURL) {\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                } else {\n                    setValidity({ ...isValid, url: { message: 'OpenAPI content validation failed!' } });\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            });\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideOpenAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideOpenAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                <Grid item xs={12} md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value={ProvideOpenAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label='OpenAPI URL'\n                            />\n                            <FormControlLabel\n                                value={ProvideOpenAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label='OpenAPI File/Archive'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item xs={10} md={11}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge='end'\n                                                aria-label='delete'\n                                                onClick={() => {\n                                                    inputsDispatcher({ action: 'inputValue', value: null });\n                                                    inputsDispatcher({ action: 'isFormValid', value: false });\n                                                }}\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop Open API File/Archive '\n                                                 + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label='OpenAPI URL'\n                            placeholder='Enter OpenAPI URL'\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of OpenAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message) || 'Click away to validate the URL'}\n                            error={isInvalidURL}\n                        />\n                    )}\n                </Grid>\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </>\n    );\n}\n\nProvideOpenAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideOpenAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideOpenAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using GraphQL UI, This is handling the taking input of GraphQL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideGraphQL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const { inputValue } = apiInputs;\n    const classes = useStyles();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({ file: null });\n    const [isValidating, setIsValidating] = useState(false);\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one graphQL file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateGraphQLFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, graphQLInfo },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'graphQLInfo', value: graphQLInfo });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            onDrop([inputValue]);\n        }\n    }, [inputValue]);\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                {!apiInputs.inputValue && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.type'\n                                        defaultMessage='Provide GraphQL File'\n                                    />\n                                </>\n                            </FormLabel>\n                        </FormControl>\n                    </Grid>\n                )}\n                {isValid.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {apiInputs.inputValue ? (\n                        <List>\n                            <ListItem key={apiInputs.inputValue.path}>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <InsertDriveFile />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={`${apiInputs.inputValue.path} - \n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                />\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        edge='end'\n                                        aria-label='delete'\n                                        onClick={() => {\n                                            inputsDispatcher({ action: 'inputValue', value: null });\n                                            inputsDispatcher({ action: 'isFormValid', value: false });\n                                        }}\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                    ) : (\n                        <DropZoneLocal\n                            error={isValid.file}\n                            onDrop={onDrop}\n                            files={apiInputs.inputValue}\n                            accept='.graphql,text/plain'\n                        >\n                            {isValidating ? (<CircularProgress />)\n                                : ([\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.dropzone'\n                                        defaultMessage='Drag & Drop files here {break} or {break} Browse files'\n                                        values={{ break: <br /> }}\n                                    />,\n                                    <Button\n                                        color='primary'\n                                        variant='contained'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.upload'\n                                            defaultMessage='Browse File to Upload'\n                                        />\n                                    </Button>,\n                                ]\n                                )}\n                        </DropZoneLocal>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideGraphQL.defaultProps = {\n    onValidate: () => {},\n};\nProvideGraphQL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useTheme } from '@material-ui/styles';\nimport Chip from '@material-ui/core/Chip';\nimport PropTypes from 'prop-types';\n\nfunction MethodView(props) {\n    const theme = useTheme();\n    const { method, className } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method.toLowerCase()] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method.toLowerCase()]);\n    }\n    return (\n        <Chip\n            label={method}\n            className={className || ''}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, width: 65,\n            }}\n        />\n    );\n}\nMethodView.propTypes = {\n    className: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n};\n\nexport default MethodView;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Icon from '@material-ui/core/Icon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport queryString from 'query-string';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport cloneDeep from 'lodash.clonedeep';\nimport PropTypes from 'prop-types';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport MethodView from 'AppComponents/Apis/Details/ProductResources/MethodView';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport CONSTS from 'AppData/Constants';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst useStyles = makeStyles((theme) => ({\n    searchWrapper: {\n        padding: 0,\n        marginTop: theme.spacing(1),\n        '& input': {\n            padding: '12px 14px',\n        },\n        display: 'flex',\n    },\n    paper: {\n        height: '100%',\n        borderRadius: 0,\n    },\n    apiWrapper: {\n        overflowY: 'auto',\n        height: 349,\n    },\n    ResourceWrapper: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        '& .frame': {\n            overflowY: 'auto',\n            height: 328,\n            border: '1px solid ' + theme.palette.grey[400],\n            borderRadius: theme.spacing(1),\n        },\n        '& .frame::-webkit-scrollbar': {\n            '-webkit-appearance': 'none',\n        },\n        '& .frame::-webkit-scrollbar:vertical': {\n            width: 11,\n        },\n        '& .frame::-webkit-scrollbar:horizontal': {\n            height: 11,\n        },\n        '& .frame::-webkit-scrollbar-thumb': {\n            borderRadius: theme.spacing(1),\n            border: '2px solid' + theme.palette.common.white,\n            backgroundColor: theme.palette.grey[400],\n        },\n        '& .frame.rightFrame': {\n            height: 369,\n        },\n    },\n    SelectedResourceWrapper: {\n        overflowY: 'auto',\n        overflowX: 'auto',\n        height: 321,\n    },\n    leftMost: {\n        background: theme.palette.grey[700],\n        color: theme.palette.getContrastText(theme.palette.grey[700]),\n        padding: theme.spacing(1),\n    },\n    rightMost: {\n        background: theme.palette.grey[600],\n        color: theme.palette.getContrastText(theme.palette.grey[600]),\n        padding: theme.spacing(1),\n    },\n    colTitle: {\n        background: theme.palette.grey[400],\n        color: theme.palette.getContrastText(theme.palette.grey[400]),\n        padding: theme.spacing(1),\n        fontWeight: 200,\n        minHeight: 25,\n    },\n    treeItemMain: {\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: theme.spacing(1),\n    },\n    treeItemMainWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    treeItem: {\n        '& .material-icons': {\n            fontSize: theme.spacing(2),\n            cursor: 'pointer',\n            marginRight: theme.spacing(1),\n        },\n        display: 'flex',\n        alignItems: 'center',\n        padding: '6px 0',\n    },\n    hr: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n    },\n    methodView: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    middleText: {\n        flex: 1,\n    },\n    selectedApi: {\n        background: theme.palette.grey[100],\n    },\n    selectedTitle: {\n        padding: theme.spacing(2),\n    },\n    buttonWrapper: {\n        marginTop: theme.spacing(2),\n        textDecorate: 'none',\n    },\n    selectedApiDescription: {\n        padding: '0px 16px',\n    },\n    messageWrapper: {\n        padding: theme.spacing(3),\n    },\n    tootBar: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: '0 16px',\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: 5,\n        borderRadius: 5,\n        '& a': {\n            cursor: 'pointer',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n        },\n    },\n    inactiveIcon: {\n        color: theme.palette.grey[300],\n    },\n}));\n\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction ProductResourcesEdit(props) {\n    const classes = useStyles();\n    const {\n        apiResources, setApiResources, isStateCreate, api, resourceNotFountMessage,\n    } = props;\n\n    // Define states\n    const [allApis, setAllApis] = useState([]);\n    const [notFound, setNotFound] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [selectedApiPaths, setSelectedApiPaths] = useState([]);\n    const [selectedApi, setSelectedApi] = useState(null);\n    const [fromSearch, setFromSearch] = useState(false);\n    // Initialize the rest api libraries\n    const apiRestClient = new API();\n\n    /**\n     * This method is filtering apis base on the searchText entered. In no searchText provided it will give all apis.\n     *\n     * @param {*} [text=null]\n     * @returns a promise\n     */\n    const filterAPIs = (text = null) => {\n        if (text) {\n            // Build the search query and update\n            const inputValue = text.trim().toLowerCase();\n            const composeQuery = '?query=name:' + inputValue + ' type:HTTP';\n            const composeQueryJSON = queryString.parse(composeQuery);\n            // TODO we need to make the limit and offset changeable from the UI ( paggination )\n            composeQueryJSON.limit = 100;\n            composeQueryJSON.offset = 0;\n            return API.search(composeQueryJSON);\n        } else {\n            return API.all({\n                query: {\n                    type: 'HTTP',\n                },\n            });\n        }\n    };\n    const addPropsToSelectedApiPaths = (paths, apiId, latestApiResources = apiResources) => {\n        /* Add checked field to each resource object */\n        Object.keys(paths).map((key) => {\n            const methodObj = paths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                methodObj[innerKey].checked = false;\n\n                // We need to check the latestApiResources for the same\n                // API/Resource Name / Verb and  indicate it differently\n                // Loop latestApiResources object\n                const target = key;\n                const verb = innerKey;\n                let resourceFound = false;\n                if (latestApiResources) {\n                    Object.keys(latestApiResources).map((resourcekey) => {\n                        const apiResource = latestApiResources[resourcekey];\n\n                        // Check if the the api slected from UI is same as the operation api id checking\n                        if (apiResource && apiId === apiResource.apiId) {\n                            // API is the same\n                            Object.keys(apiResource.operations).map((operationKey) => {\n                                const operation = apiResource.operations[operationKey];\n                                if (\n                                    operation\n                                    && operation.target === target\n                                    && operation.verb.toLowerCase() === verb.toLowerCase()\n                                ) {\n                                    // Operation is already there\n                                    resourceFound = true;\n                                }\n                            });\n                        }\n                    });\n                }\n                if (resourceFound) {\n                    methodObj[innerKey].allreadyAdded = true;\n                } else {\n                    methodObj[innerKey].allreadyAdded = false;\n                }\n            });\n        });\n        setSelectedApiPaths(paths);\n    };\n\n    // Get the api swagger after an api is selected\n    const getApiSwagger = (apiSelected) => {\n        const { id } = apiSelected;\n        const promisedAPI = apiRestClient.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    addPropsToSelectedApiPaths(response.obj.paths, id);\n                    setSelectedApi(apiSelected);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n    const handleSearchTextChange = (event) => {\n        const apiPromise = filterAPIs(event.target.value);\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.status !== 'PROTOTYPED');\n                if (filteredList.length > 0) {\n                    setSelectedApi(list[0]);\n                }\n                setAllApis(filteredList);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n        setSearchText(event.target.value);\n        setFromSearch(event.target.value);\n    };\n    const updateResourceTree = (resourceToAdd, action, inputApiResources = null) => {\n        let updateStateHere = false;\n        let newApiResources = null;\n        if (!inputApiResources) {\n            // If a copy of the state variable is not passed from the calling method we\n            // have to make a copy inside here before doing modifications to that\n            newApiResources = cloneDeep(apiResources);\n            updateStateHere = true;\n        } else {\n            newApiResources = inputApiResources;\n        }\n        const {\n            target, verb, apiId, name, version,\n        } = resourceToAdd;\n        const newResource = {\n            id: null,\n            target,\n            verb: verb.toUpperCase(),\n            authType: null,\n            throttlingPolicy: null,\n            scopes: [],\n        };\n        let apiFound = false;\n\n        // Loop copy of apiResources object\n        Object.keys(newApiResources).map((key, indexA) => {\n            const apiResource = newApiResources[key];\n\n            // Check if the the api slected from UI is same as the operation api id trying to remove.\n            if (apiResource && apiId === apiResource.apiId) {\n                apiFound = true;\n                let operationFound = false;\n                Object.keys(apiResource.operations).map((innerKey, indexB) => {\n                    const operation = apiResource.operations[innerKey];\n                    if (\n                        operation\n                        && operation.target === target\n                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                    ) {\n                        // Operation is already there\n                        operationFound = true;\n                        if (action === 'remove') {\n                            if (apiResource.operations.length > 1) {\n                                apiResource.operations.splice(indexB, 1);\n                            } else {\n                                newApiResources.splice(indexA, 1);\n                            }\n                        }\n                    }\n                });\n                // Operation not added .. so we need to add that\n                if (!operationFound && action === 'add') {\n                    apiResource.operations.push(newResource);\n                }\n            }\n        });\n\n        if (!apiFound) {\n            // Add api object\n            newApiResources.push({\n                name,\n                apiId,\n                operations: [newResource],\n                version,\n            });\n        }\n        // When we are adding the resources in a loop we do not care about the return but we simply set the state here.\n        if (updateStateHere) {\n            setApiResources(newApiResources);\n            // We need to call this in order to set other properties\n            if (apiId === selectedApi.id) {\n                addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), apiId, newApiResources);\n            }\n        }\n        return newApiResources;\n    };\n\n    const updateCheckBox = (key, innerKey) => {\n        // we need to copy the object from the state and modify it before set it to the state\n        const prevSelectedApiPaths = { ...selectedApiPaths };\n\n        // Now we inverse the checked value\n        prevSelectedApiPaths[key][innerKey].checked = !prevSelectedApiPaths[key][innerKey].checked;\n\n        // Then we set state\n        setSelectedApiPaths(prevSelectedApiPaths);\n    };\n    const addSelectedResourcesToTree = (addAll = false) => {\n        /* Add checked field to each resource object */\n        const newApiResources = cloneDeep(apiResources);\n        Object.keys(selectedApiPaths).map((key) => {\n            const methodObj = selectedApiPaths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if (methodObj[innerKey].checked || addAll) {\n                    // We need to add this to apiResources array\n                    updateResourceTree(\n                        {\n                            target: key,\n                            verb: innerKey,\n                            apiId: selectedApi.id,\n                            name: selectedApi.name,\n                            version: selectedApi.version,\n                        },\n                        'add',\n                        newApiResources,\n                    );\n                }\n            });\n        });\n        setApiResources(newApiResources);\n        addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), selectedApi.id, newApiResources);\n    };\n    useEffect(() => {\n        // Get all apis\n        const apiPromise = filterAPIs();\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.lifeCycleStatus !== 'PROTOTYPED');\n\n                setAllApis(filteredList);\n                if (filteredList.length > 0) {\n                    setSelectedApi(filteredList[0]);\n                    getApiSwagger(filteredList[0]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n    return (\n        <>\n            {allApis.length === 0 && !fromSearch ? (\n                <Grid container>\n                    <Typography className={classes.messageWrapper}>\n                        <FormattedMessage\n                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.ApisnotFound'\n                            defaultMessage='No REST APIs are created yet'\n                        />\n                    </Typography>\n                </Grid>\n            ) : (\n                <>\n                    {!isStateCreate && (\n                        <Grid container>\n                            <>\n                                <Grid item xs={8} className={classes.leftMost}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.find.and.select'\n                                        defaultMessage='Find and select resources for the API Product'\n                                    />\n                                </Grid>\n                                <Grid item xs={4} className={classes.rightMost}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.selected'\n                                        defaultMessage='Selected resources of API Product'\n                                    />\n                                    <div />\n                                </Grid>\n                            </>\n                        </Grid>\n                    )}\n                    <Grid container>\n                        {/* ************************************************ */}\n                        {/* 1st column API search and select column          */}\n                        {/* ************************************************ */}\n                        <Grid item xs={3}>\n                            <div className={classes.colTitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.ProductResources.ProductResourcesWorkspace.select.an.api'\n                                    defaultMessage='Select an API'\n                                />\n                            </div>\n                            <Paper>\n                                <div className={classes.searchWrapper}>\n                                    <TextField\n                                        id='outlined-full-width'\n                                        label='API'\n                                        style={{ margin: 8 }}\n                                        placeholder='Filter APIs'\n                                        helperText='Filter by name'\n                                        onChange={handleSearchTextChange}\n                                        value={searchText}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.apiWrapper}>\n                                    <List dense component='nav'>\n                                        {allApis.map((apiObj) => {\n                                            const labelId = `checkbox-list-label-${apiObj.id}`;\n\n                                            return (\n                                                <ListItem\n                                                    key={apiObj.id}\n                                                    role={undefined}\n                                                    dense\n                                                    button\n                                                    className={\n                                                        selectedApi\n                                                        && apiObj.id === selectedApi.id\n                                                        && classes.selectedApi\n                                                    }\n                                                >\n                                                    <ListItemText\n                                                        id={labelId}\n                                                        primary={apiObj.name}\n                                                        secondary={`${apiObj.version} - ${apiObj.context}`}\n                                                        onClick={() => getApiSwagger(apiObj)}\n                                                    />\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* 2nd column Resource Selection                    */}\n                        {/* ************************************************ */}\n                        <Grid item xs={5}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesEdit.api.resources'\n                                        defaultMessage='Select API Resources'\n                                    />\n                                </div>\n                                {selectedApi && (\n                                    <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                        {selectedApi.name}\n                                    </Typography>\n                                )}\n                                <div className={classes.tootBar}>\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree()}\n                                        onKeyDown={() => addSelectedResourcesToTree()}\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id='Apis.Details.ProductResources.ProductResourcesWorkspace.\n                                        toolbar.add.selected'\n                                                defaultMessage='Add Selected'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                    <VerticalDivider />\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree(true)}\n                                        onKeyDown={() => addSelectedResourcesToTree(true)}\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id='Apis.Details.ProductResources.ProductResourcesWorkspace.toolbar.\n                                                add.all'\n                                                defaultMessage='Add All'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                </div>\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame'>\n                                        <List dense>\n                                            {Object.keys(selectedApiPaths).map((key) => {\n                                                const path = selectedApiPaths[key];\n                                                const labelId = `checkbox-list-label_${key}`;\n                                                return Object.keys(path).map((innerKey) => {\n                                                    const methodObj = path[innerKey];\n                                                    return (\n                                                        CONSTS.HTTP_METHODS.includes(innerKey) && (\n                                                            <ListItem\n                                                                key={`${innerKey} - ${key}`}\n                                                                role={undefined}\n                                                                dense\n                                                            >\n                                                                <ListItemIcon style={{ minWidth: 35 }}>\n                                                                    <Checkbox\n                                                                        edge='start'\n                                                                        checked={methodObj.checked}\n                                                                        tabIndex={-1}\n                                                                        disableRipple\n                                                                        onChange={() => updateCheckBox(key, innerKey)}\n                                                                        color='primary'\n                                                                        disabled={methodObj.allreadyAdded}\n                                                                        inputProps={\n                                                                            {\n                                                                                'aria-label': 'Select API resource',\n                                                                            }\n                                                                        }\n                                                                    />\n                                                                </ListItemIcon>\n                                                                <ListItemText\n                                                                    id={labelId + innerKey}\n                                                                    primary={(\n                                                                        <div>\n                                                                            <MethodView\n                                                                                method={innerKey}\n                                                                                className={classes.methodView}\n                                                                            />\n                                                                            <span>{key}</span>\n                                                                        </div>\n                                                                    )}\n                                                                    secondary={\n                                                                        methodObj['x-auth-type']\n                                                                    && methodObj['x-throttling-tier']\n                                                                    && `${methodObj['x-auth-type']} - ${\n                                                                        methodObj['x-throttling-tier']\n                                                                    }`\n                                                                    }\n                                                                    onClick={() => updateResourceTree(\n                                                                        {\n                                                                            target: key,\n                                                                            verb: innerKey,\n                                                                            apiId: selectedApi.id,\n                                                                            name: selectedApi.name,\n                                                                            version: selectedApi.version,\n                                                                        },\n                                                                        'add',\n                                                                    )}\n                                                                    className={classes.middleText}\n                                                                />\n                                                                <ListItemSecondaryAction>\n                                                                    {methodObj.allreadyAdded && (\n                                                                        <Icon className={classes.inactiveIcon}>\n                                                                        chevron_right\n                                                                        </Icon>\n                                                                    )}\n                                                                    {!methodObj.allreadyAdded && (\n                                                                        <IconButton\n                                                                            edge='end'\n                                                                            aria-label='comments'\n                                                                            onClick={() => updateResourceTree(\n                                                                                {\n                                                                                    target: key,\n                                                                                    verb: innerKey,\n                                                                                    apiId: selectedApi.id,\n                                                                                    name: selectedApi.name,\n                                                                                    version: selectedApi.version,\n                                                                                },\n                                                                                'add',\n                                                                            )}\n                                                                        >\n                                                                            <Icon>chevron_right</Icon>\n                                                                        </IconButton>\n                                                                    )}\n                                                                </ListItemSecondaryAction>\n                                                            </ListItem>\n                                                        )\n                                                    );\n                                                });\n                                            })}\n                                        </List>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* Third column with  selected resources            */}\n                        {/* ************************************************ */}\n                        <Grid item xs={4}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle} />\n                                {api.name && (\n                                    <>\n                                        <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                            {api.name}\n                                        </Typography>\n                                    </>\n                                )}\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame rightFrame'>\n                                        {allApis.length > 0 && apiResources && apiResources.length === 0 && (\n                                            <div className={classes.messageWrapper}>\n                                                <Typography component='p'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.\n                                                    empty.title'\n                                                        defaultMessage='Use the left side panel to add resources'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        )}\n                                        {apiResources\n                                        && apiResources.length > 0\n                                        && Object.keys(apiResources).map((key) => {\n                                            const apiResource = apiResources[key];\n                                            return (\n                                                <div key={apiResource.name}>\n                                                    <div className={classes.treeItemMain}>\n                                                        {apiResource.name}\n                                                        {' - '}\n                                                        {apiResource.version}\n                                                    </div>\n                                                    <div className={classes.treeItemMainWrapper}>\n                                                        {Object.keys(apiResource.operations).map((innerKey) => {\n                                                            const operation = apiResource.operations[innerKey];\n                                                            const { target, verb } = operation;\n                                                            return (\n                                                                <div\n                                                                    key={`${apiResource.apiId}_${verb}_${target}`}\n                                                                    className={classes.treeItem}\n                                                                >\n                                                                    <MethodView\n                                                                        method={verb}\n                                                                        className={classes.methodView}\n                                                                    />\n                                                                    <Typography variant='body2'>{target}</Typography>\n                                                                    <hr className={classes.hr} />\n                                                                    <IconButton\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target,\n                                                                                verb,\n                                                                                apiId: apiResource.apiId,\n                                                                                name: apiResource.name,\n                                                                                version: apiResource.version,\n                                                                            },\n                                                                            'remove',\n                                                                        )}\n                                                                        aria-label={\n                                                                            'delete resource ' + apiResource.name\n                                                                        }\n                                                                    >\n                                                                        <Icon>\n                                                                            delete\n                                                                        </Icon>\n                                                                    </IconButton>\n                                                                </div>\n                                                            );\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\nProductResourcesEdit.propTypes = {\n    apiResources: PropTypes.instanceOf(Array).isRequired,\n    setApiResources: PropTypes.func.isRequired,\n    isStateCreate: PropTypes.isRequired,\n    api: PropTypes.isRequired,\n    resourceNotFountMessage: PropTypes.string.isRequired,\n};\nexport default ProductResourcesEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport Fade from '@material-ui/core/Fade';\n\n// Icon size reference https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Icon/Icon.js#L48\nconst useStyles = makeStyles((theme) => ({\n    xLarge: {\n        fontSize: theme.typography.pxToRem(64),\n    },\n}));\n/**\n *\n *\n * @export\n * @returns\n */\nfunction Banner(props) {\n    const {\n        type, message, dense, history, paperProps, disableActions, open, onClose, disableClose,\n    } = props;\n    const classes = useStyles();\n    const [isOpen, setIsOpen] = useState(open);\n    const iconProps = {};\n    if (dense) {\n        iconProps.fontSize = 'large';\n    } else {\n        iconProps.className = classes.xLarge;\n    }\n\n    let bannerIcon = null;\n    let { description } = message;\n\n    let title;\n    // TODO Check for an instance of FormattedMessage as well ~tmkb\n    if (typeof message === 'string' || message instanceof String) {\n        description = message;\n        const [first, ...rest] = type;\n        title = `${first.toUpperCase()}${rest.join('')}`; // Capitalize the first letter\n    } else {\n        // If `message` is an object, we expect it to be a REST API error response object\n        title = `[${message.code}]: ${message.message}`;\n    }\n\n    // IF add,remove or modify cases update the proptypes as well\n    switch (type) {\n        case 'error':\n            bannerIcon = <ErrorIcon color='error' {...iconProps} />;\n            break;\n        case 'warning':\n            bannerIcon = <WarningIcon color='error' {...iconProps} />;\n            break;\n        case 'successes':\n            bannerIcon = <CheckCircleIcon color='error' {...iconProps} />;\n            break;\n        case 'info':\n            bannerIcon = <InfoIcon color='error' {...iconProps} />;\n            break;\n        default:\n            bannerIcon = <InfoIcon color='error' {...iconProps} />;\n            break;\n    }\n    return (\n        <Fade in={isOpen} unmountOnExit>\n            <Box clone pt={dense ? 1 : 2} pr={dense ? 0 : 1} pb={dense ? 0 : 1} pl={dense ? 1 : 2}>\n                <Paper {...paperProps}>\n                    <Grid container spacing={2} alignItems='center' wrap='nowrap'>\n                        <Grid item>{bannerIcon}</Grid>\n                        <Grid item>\n                            <Typography variant='subtitle2' component='h3' display='block' gutterBottom>\n                                {title}\n                                <Typography variant='body1'>{description}</Typography>\n                            </Typography>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container justify='flex-end' spacing={1}>\n                        <Grid item>\n                            {!disableActions && (\n                                <>\n                                    <Button onClick={() => history.goBack()} color='primary'>\n                                        <FormattedMessage\n                                            id='app.components.Shared.Banner.back'\n                                            defaultMessage='Back'\n                                        />\n                                    </Button>\n                                    <Button onClick={() => window.location.reload()} color='primary'>\n                                        Refresh\n                                    </Button>\n                                </>\n                            )}\n                            {!disableClose && (\n                                <Button onClick={onClose || (() => setIsOpen(false))} color='primary'>\n                                    CLOSE\n                                </Button>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Box>\n        </Fade>\n    );\n}\nBanner.defaultProps = {\n    dense: false,\n    type: 'info',\n    disableActions: false,\n    paperProps: { elevation: 1 },\n    open: true,\n    onClose: null,\n    disableClose: false,\n};\n\nBanner.propTypes = {\n    type: PropTypes.oneOf(['error', 'warning', 'info', 'successes']),\n    message: PropTypes.PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]).isRequired,\n    dense: PropTypes.bool,\n    open: PropTypes.bool,\n    disableClose: PropTypes.bool,\n    onClose: PropTypes.func,\n    disableActions: PropTypes.bool,\n    paperProps: PropTypes.shape({ elevation: PropTypes.number }),\n    history: PropTypes.shape({ goBack: PropTypes.func }).isRequired,\n};\n\nexport default withRouter(Banner);\n"],"sourceRoot":""}