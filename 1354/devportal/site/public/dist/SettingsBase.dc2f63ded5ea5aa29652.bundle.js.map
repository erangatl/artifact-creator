{"version":3,"sources":["webpack:///./node_modules/base64url/index.js","webpack:///./node_modules/base64url/dist/base64url.js","webpack:///./node_modules/base64url/dist/pad-string.js","webpack:///./source/src/app/components/Settings/Alerts/AlertConfiguration.jsx","webpack:///./source/src/app/components/Settings/Alerts/Alerts.jsx","webpack:///./source/src/app/components/Settings/Settings.jsx","webpack:///./source/src/app/components/Settings/SettingsBase.jsx","webpack:///./source/src/app/components/Shared/InlineMessage.jsx"],"names":["module","exports","default","Object","defineProperty","value","pad_string_1","encode","input","encoding","Buffer","isBuffer","fromBase64","toString","from","toBase64","base64url","replace","base64","decode","toBuffer","stringLength","length","diff","position","padLength","paddedStringLength","buffer","alloc","write","alertPropertyMap","AbnormalRequestsPerMin","AlertConfiguration","props","alertType","api","alertName","classes","intl","setIsWorkerNodeDown","alertConfiguration","setAlertConfiguration","useState","apis","setApis","selectedAPIName","setSelectedAPIName","apiNames","setAPINames","apiVersions","setAPIVersions","applications","setApplications","selectedAPIVersion","setSelectedAPIVersion","setValue","isProcessing","setProcessing","collapseOpen","setCollapseOpen","selectedApplicationName","setSelectedApplicationName","useEffect","alertConfigPromise","getAlertConfigurations","apisPromise","getAllAPIs","limit","Settings","app","alertMaxAPIGetLimit","Promise","all","then","response","apisList","body","list","apiNameList","map","apiResp","label","name","catch","err","console","log","getAlertConfig","action","finally","Button","onClick","color","Typography","className","addBtn","Icon","id","defaultMessage","Collapse","in","configWrapper","Grid","container","spacing","item","xs","Autocomplete","options","getOptionLabel","option","textField","onChange","event","availableVersions","filter","tmpApi","handleAPINameSelect","renderInput","params","TextField","fullWidth","required","helperText","variant","select","version","existingAPI","tmpAPi","getSubscriptions","res","subscribedApps","subscription","applicationInfo","handleApiVersionSelect","target","SelectProps","MenuProps","menu","selected","MenuItem","key","applicationId","type","endAdornment","InputAdornment","configAddBtnContainer","Fab","disabled","add","isAddingDissabled","size","configId","alertConfig","apiName","apiVersion","applicationName","requestCount","putAlertConfiguration","Alert","info","formatMessage","error","CircularProgress","configNameHeading","values","InlineMessage","height","contentWrapper","newConfig","Table","TableHead","TableRow","TableCell","TableBody","configuration","configurationId","includes","IconButton","delete","deleteAlertConfiguration","handleDeleteConfiguration","propTypes","PropTypes","string","isRequired","shape","injectIntl","withStyles","theme","display","alignItems","paddingBottom","padding","marginBottom","borderBottom","Alerts","openDialog","setOpenDialog","open","emails","setEmailsList","supportedAlerts","setSupportedAlerts","subscribedAlerts","setSubscribedAlerts","isAnalyticsEnabled","setAnalyticsEnabled","isInProgress","setInProgress","subscribing","unSubscribing","unsubscribeAll","setUnsubscribeAll","isWorkerNodeDown","API","alertIdMapping","3","displayName","description","4","5","6","isAlertSubscribed","alertId","some","alert","handleCheckAlert","tmpSubscribedAlerts","sub","newAlert","push","requireConfiguration","selectedType","isAlertConfigured","supportedAlertsPromise","getSupportedAlertTypes","subscribedAlertsPromise","getSubscribedAlertTypesByUser","status","alerts","emailList","Fragment","alertsWrapper","component","manageAlertHeading","List","ListItem","divider","ListItemIcon","Checkbox","edge","tabIndex","checked","inputProps","ListItemText","primary","secondary","listItem","ListItemSecondaryAction","setConfigOpen","chipInput","placeholder","onAdd","chip","email","newEmail","handleAddEmail","onDelete","oldEmail","handleEmailDeletion","direction","btnContainer","alertsToSubscribe","subscribeAlerts","success","to","Dialog","maxWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","configDialogHeading","unsubscribeAlerts","func","palette","getContrastText","background","paper","width","marginTop","alertConfigDialog","fontWeight","marginLeft","settingsRoot","SettingsBase","Container","fixed","headingWrapper","root","paddingTop","paddingLeft","React","Component","this","setState","state","expanded","render","messgeType","elevation","iconItem","content","children","minHeight","borderRadius","border","fontSize","custom","paddingRight","button"],"mappings":"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","file":"SettingsBase.dc2f63ded5ea5aa29652.bundle.js","sourcesContent":["module.exports = require('./dist/base64url').default;\nmodule.exports.default = module.exports;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    CircularProgress,\n    Collapse,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography,\n    withStyles,\n    InputAdornment,\n    Fab,\n} from '@material-ui/core';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport base64url from 'base64url';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Settings from 'Settings';\n\nconst alertPropertyMap = {\n    AbnormalRequestsPerMin: 'requestCount',\n};\n\nconst styles = (theme) => ({\n    addBtn: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    configAddBtnContainer: {\n        display: 'flex',\n        paddingBottom: theme.spacing(2),\n    },\n    configWrapper: {\n        padding: theme.spacing(2),\n    },\n    configNameHeading: {\n        marginBottom: theme.spacing(),\n        borderBottom: '#cccccc 1px inset',\n    },\n});\n\n/**\n * Alert Configuration component.\n * This component is used to list add and delete the alert configurations.\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nconst AlertConfiguration = (props) => {\n    const {\n        alertType,\n        api,\n        alertName,\n        classes,\n        intl,\n        setIsWorkerNodeDown,\n    } = props;\n    const [alertConfiguration, setAlertConfiguration] = useState([]);\n    const [apis, setApis] = useState();\n    const [selectedAPIName, setSelectedAPIName] = useState();\n    const [apiNames, setAPINames] = useState();\n    const [apiVersions, setAPIVersions] = useState([]);\n    const [applications, setApplications] = useState([]);\n    const [selectedAPIVersion, setSelectedAPIVersion] = useState();\n    const [value, setValue] = useState();\n    const [isProcessing, setProcessing] = useState({});\n    const [collapseOpen, setCollapseOpen] = useState(false);\n    const [selectedApplicationName, setSelectedApplicationName] = useState();\n\n    useEffect(() => {\n        const alertConfigPromise = api.getAlertConfigurations(alertType);\n        const apisPromise = api.getAllAPIs({ limit: Settings.app.alertMaxAPIGetLimit });\n        Promise.all([alertConfigPromise, apisPromise])\n            .then((response) => {\n                const apisList = response[1].body.list;\n                const apiNameList = apisList.map((apiResp) => { return { label: apiResp.name }; });\n                setAPINames(apiNameList);\n                setApis(apisList);\n                setAlertConfiguration(response[0].body);\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsWorkerNodeDown(true);\n            });\n    }, []);\n\n    /**\n     * Handles the API Name select event.\n     * Once the api name is selected, the api versions list is populated.\n     * @param {string} name The selected api name.\n     * */\n    const handleAPINameSelect = (name) => {\n        setSelectedAPIName(name);\n        const availableVersions = apis.filter((tmpApi) => tmpApi.name === name);\n        setAPIVersions(availableVersions);\n    };\n\n    /**\n     * Handles the api version select event.\n     * In this method, get the subscriptions of the selected api+version and set to the state.\n     * @param {string} version The selected api version.\n     * */\n    const handleApiVersionSelect = (version) => {\n        setSelectedAPIVersion(version);\n        const existingAPI = apis.filter((tmpAPi) => {\n            return tmpAPi.name === selectedAPIName && tmpAPi.version === version;\n        });\n        if (existingAPI.length > 0) {\n            api.getSubscriptions(existingAPI[0].id).then((res) => {\n                const subscribedApps = res.body.list.map((subscription) => {\n                    return subscription.applicationInfo;\n                });\n                setApplications(subscribedApps);\n            }).catch((err) => {\n                console.log(err);\n            });\n        }\n    };\n\n    /**\n     * Get the alert configuration of the alert type.\n     * This method is called after a configuration addition or deletion.\n     *\n     * @param {string} action The action that is being performed.\n     * */\n    const getAlertConfig = (action) => {\n        api.getAlertConfigurations(alertType).then((response) => {\n            setAlertConfiguration(response.body);\n        }).catch().finally(() => {\n            setProcessing({ [action]: false });\n        });\n    };\n\n    /**\n     * Handles the configuration add operation.\n     * */\n    const handleAddConfiguration = () => {\n        setProcessing({ add: true });\n        const configId = base64url.encode(selectedAPIName + '#' + selectedAPIVersion + '#' + selectedApplicationName);\n        const alertConfig = {\n            apiName: selectedAPIName,\n            apiVersion: selectedAPIVersion,\n            applicationName: selectedApplicationName,\n            requestCount: value,\n        };\n        api.putAlertConfiguration(alertType, alertConfig, configId)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.success.msg',\n                    defaultMessage: 'Alert Configuration added successfully',\n                }));\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.error.msg',\n                    defaultMessage: 'Error occurred while adding alert configuration',\n                }));\n            })\n            .finally(() => {\n                getAlertConfig('add');\n            });\n    };\n\n    /**\n     * Handles the configuration delet operation for a selected configuration.\n     *\n     * @param {strng} id The configuration id.\n     * */\n    const handleDeleteConfiguration = (id) => {\n        setProcessing({ delete: id });\n        api.deleteAlertConfiguration(alertType, id).then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.success.msg',\n                defaultMessage: 'Alert Configuration deleted successfully',\n            }));\n        }).catch(() => {\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.error.msg',\n                defaultMessage: 'Error occurred while deleting the configuration.',\n            }));\n        }).finally(() => {\n            getAlertConfig('delete');\n        });\n    };\n\n    const isAddingDissabled = () => {\n        return !selectedAPIName || !selectedAPIVersion || !selectedApplicationName || !value || isProcessing.add;\n    };\n\n    if (!apis || !alertConfiguration) {\n        return <CircularProgress />;\n    }\n    return (\n        <>\n            <>\n                <Button onClick={() => setCollapseOpen(!collapseOpen)} color='primary'>\n                    <Typography className={classes.addBtn}>\n                        <Icon color='primary'>\n                            add\n                        </Icon>\n                        <FormattedMessage\n                            id='Settings.Alert.AlertConfiguration.add'\n                            defaultMessage='New Configuration'\n                        />\n                    </Typography>\n                </Button>\n                <Collapse in={collapseOpen} className={classes.configWrapper}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <Autocomplete\n                                id='combo-box-demo'\n                                options={apiNames}\n                                getOptionLabel={(option) => option.label}\n                                className={classes.textField}\n                                value={selectedAPIName}\n                                onChange={(event, { label }) => handleAPINameSelect(label)}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        fullWidth\n                                        required\n                                        label={(\n                                            <FormattedMessage\n                                                id='Settings.Alerts.AlertConfiguration.api.name.label'\n                                                defaultMessage='API Name'\n                                            />\n                                        )}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Settings.Alerts.AlertConfiguration.select.api.helper'\n                                                defaultMessage='Select the API Name'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-api-version'\n                                select\n                                fullWidth\n                                required\n                                label={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.api.version.label'\n                                        defaultMessage='API Version'\n                                    />\n                                )}\n                                className={classes.textField}\n                                value={selectedAPIVersion}\n                                onChange={(event) => handleApiVersionSelect(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.version.helper'\n                                        defaultMessage='Select API Version'\n                                    />\n                                )}\n                                variant='outlined'\n                            >\n                                {apiVersions && apiVersions.map((selected) => {\n                                    return (\n                                        <MenuItem key={selected.version} value={selected.version}>\n                                            {selected.version}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-applications'\n                                select\n                                fullWidth\n                                required\n                                label={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.applications.label'\n                                        defaultMessage='Application'\n                                    />\n                                )}\n                                className={classes.textField}\n                                value={selectedApplicationName}\n                                onChange={(event) => setSelectedApplicationName(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.application.helper'\n                                        defaultMessage='Select Application'\n                                    />\n                                )}\n                                variant='outlined'\n                            >\n                                {applications && applications.map((applicationInfo) => {\n                                    return (\n                                        <MenuItem key={applicationInfo.applicationId} value={applicationInfo.name}>\n                                            {applicationInfo.name}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-value'\n                                type='number'\n                                fullWidth\n                                required\n                                label={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.request.count.label'\n                                        defaultMessage='Request Count.'\n                                    />\n                                )}\n                                className={classes.textField}\n                                value={value}\n                                onChange={(event) => setValue(event.target.value)}\n                                variant='outlined'\n                                endAdornment={<InputAdornment position='end'>ms</InputAdornment>}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.threshold.value.helper'\n                                        defaultMessage='Enter Request Count.'\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid item className={classes.configAddBtnContainer}>\n                            <Fab\n                                disabled={isAddingDissabled()}\n                                color='primary'\n                                size='medium'\n                                onClick={handleAddConfiguration}\n                            >\n                                <Icon>\n                                    {isProcessing.add && <CircularProgress size={15} />}\n                                    add\n                                </Icon>\n                            </Fab>\n                        </Grid>\n                    </Grid>\n                </Collapse>\n\n            </>\n            <>\n                <Typography className={classes.configNameHeading}>\n                    <FormattedMessage\n                        id='Settings.Alerts.AlertConfiguration.configuration'\n                        defaultMessage='{name} Configurations'\n                        values={{ name: alertName }}\n                    />\n                </Typography>\n                {alertConfiguration.length === 0 ? (\n                    <InlineMessage height={80}>\n                        <div className={classes.contentWrapper}>\n                            <Typography>\n                                <FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.no.config.message'\n                                    defaultMessage={'You do not have any configurations. Click on {newConfig} button'\n                                    + ' to add a configuration.'}\n                                    values={{\n                                        newConfig: <b>New Configuration</b>,\n                                    }}\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                )\n                    : (\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Settings.Alerts.AlertConfiguration.api.name'\n                                            defaultMessage='API Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Settings.Alerts.AlertConfiguration.api.version'\n                                            defaultMessage='API Version'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Settings.Alerts.AlertConfiguration.app.name'\n                                            defaultMessage='Application Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell>{alertName}</TableCell>\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {alertConfiguration.map((configuration) => {\n                                    return (\n                                        <TableRow id={configuration.configurationId} key={configuration.configurationId}>\n                                            <TableCell>{configuration.configuration.apiName}</TableCell>\n                                            <TableCell>{configuration.configuration.apiVersion}</TableCell>\n                                            <TableCell>{configuration.configuration.applicationName.includes('deleted')?\n                                            'Deleted':configuration.configuration.applicationName}</TableCell>\n                                            <TableCell>\n                                                {configuration.configuration[alertPropertyMap[alertType]]}\n                                            </TableCell>\n                                            <TableCell>\n                                                <IconButton\n                                                    onClick={() => handleDeleteConfiguration(configuration.configurationId)}\n                                                >\n                                                    {isProcessing.delete === configuration.configurationId\n                                                        ? <CircularProgress size={15} />\n                                                        : (\n                                                            <Icon>\n                                                        delete\n                                                            </Icon>\n                                                        )}\n                                                </IconButton>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    )}\n            </>\n        </>\n    );\n};\n\nAlertConfiguration.propTypes = {\n    alertType: PropTypes.string.isRequired,\n    alertName: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AlertConfiguration));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport {\n    Paper,\n    ListItem,\n    Checkbox,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    withStyles,\n    Typography,\n    List,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    DialogActions,\n    CircularProgress,\n    DialogContentText,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport ChipInput from 'material-ui-chip-input';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AlertConfiguration from './AlertConfiguration';\n\n\nconst styles = theme => ({\n    alertsWrapper: {\n        padding: theme.spacing(2),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    manageAlertHeading: {\n        marginBottom: theme.spacing(),\n    },\n    chipInput: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    alertConfigDialog: {\n        width: '60%',\n    },\n    configDialogHeading: {\n        fontWeight: '600',\n    },\n    btnContainer: {\n        marginTop: theme.spacing(),\n    },\n    listItem: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n/**\n * Alerts management component.\n *\n * @param {any} props The Input props.\n * @return {any} HTML representation of the component.\n * */\nconst Alerts = (props) => {\n    const {\n        classes,\n        intl,\n    } = props;\n    const [openDialog, setOpenDialog] = useState({ open: false, alertType: '', name: '' });\n    const [emails, setEmailsList] = useState([]);\n    const [supportedAlerts, setSupportedAlerts] = useState();\n    const [subscribedAlerts, setSubscribedAlerts] = useState([]);\n    const [isAnalyticsEnabled, setAnalyticsEnabled] = useState(false);\n    const [isInProgress, setInProgress] = useState({ subscribing: false, unSubscribing: false });\n    const [unsubscribeAll, setUnsubscribeAll] = useState(false);\n    const [isWorkerNodeDown, setIsWorkerNodeDown] = useState(false);\n    const api = new API();\n\n    const alertIdMapping =\n        {\n            3: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.response.time',\n                    defaultMessage: 'Abnormal Requests per Minute',\n                }),\n                displayName: 'AbnormalRequestsPerMin',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.per.min.description',\n                    defaultMessage: 'This alert is triggered if there is a sudden spike the request count within a ' +\n                            'period of one minute by default for a particular API for an application. These alerts ' +\n                            'could be treated as an indication of a possible high traffic, suspicious activity, ' +\n                            'possible malfunction of the client application, etc.',\n                }),\n            },\n            4: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.backend.time',\n                    defaultMessage: 'Abnormal Resource Access',\n                }),\n                displayName: 'AbnormalRequestPattern',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.pattern.description',\n                    defaultMessage: 'This alert is triggered if there is a change in the resource access pattern of ' +\n                        'a user of a particular application. These alerts could be treated as an indication of a ' +\n                        'suspicious activity by a user over your application.',\n                }),\n            },\n            5: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.numusual.ip',\n                    defaultMessage: 'Unusual IP Access',\n                }),\n                displayName: 'UnusualIPAccess',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.unusual.ip.access.description',\n                    defaultMessage: 'This alert is triggered if there is either a change in the request source IP ' +\n                        'for a particular application by a user or if the request is from an IP used before a ' +\n                        'time period of 30 days (default). These alerts could be treated as an indication of a ' +\n                        'suspicious activity by a user over an application.',\n                }),\n            },\n            6: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.frequent.tier',\n                    defaultMessage: 'Frequent Tier Limit Hitting',\n                }),\n                displayName: 'FrequentTierLimitHitting',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.tier.limit.hitting.description',\n                    defaultMessage: 'This alert is triggered if at least one of the two cases below are satisfied.' +\n                        ' If a particular application gets throttled out for hitting the subscribed tier limit of ' +\n                        'that application more than 10 times (by default) within an hour (by default) or if a ' +\n                        'particular user of an application gets throttled out for hitting the subscribed tier limit ' +\n                        'of a particular API more than 10 times (by default) within a day (by default)',\n                }),\n            },\n        };\n    /**\n     * Set the configuration dialog open property for provided alert type.\n     *\n     * @param {number} id The alert type id\n     * */\n    const setConfigOpen = (id) => {\n        setOpenDialog({\n            open: true,\n            alertType: alertIdMapping[id].displayName,\n            name: alertIdMapping[id].name,\n        });\n    };\n\n    /**\n     * Checks whether the provided alert is aubscribed.\n     *\n     * @param {number} alertId : The id of the alert.\n     * @return {boolean} True if the alert is subscribed. False otherwise.\n     * */\n    const isAlertSubscribed = (alertId) => {\n        return subscribedAlerts.some((alert) => { return alert.id === alertId; });\n    };\n\n    /**\n     * Check whether the provided alert is configured.\n     *\n     * @param {string} selectedType : The alert type which needs to be check.\n     * */\n    const isAlertConfigured = (selectedType) => {\n        api.getAlertConfigurations(selectedType.displayName).then((res) => {\n            const data = res.body;\n            if (data.length === 0) {\n                setOpenDialog({ open: true, alertType: selectedType.displayName, name: selectedType.name });\n            }\n        }).catch(err => console.log(err));\n    };\n\n    /**\n     * Handles the alert type select event.\n     *\n     * @param {obj} alert : The selected alert.\n     * */\n    const handleCheckAlert = (alert) => {\n        const alertId = alert.id;\n        let tmpSubscribedAlerts = [...subscribedAlerts];\n        if (isAlertSubscribed(alertId)) {\n            tmpSubscribedAlerts = tmpSubscribedAlerts.filter((sub) => {\n                return sub.id !== alertId;\n            });\n        } else {\n            const newAlert = { id: alertId, name: alertIdMapping[alertId].displayName, configuration: [] };\n            tmpSubscribedAlerts.push(newAlert);\n        }\n        // Check whether the alert is configurable and check configuration exists.\n        if (alert.requireConfiguration) {\n            isAlertConfigured(alertIdMapping[alertId]);\n        }\n        setSubscribedAlerts(tmpSubscribedAlerts);\n    };\n\n    /**\n     * Handles the add email event.\n     *\n     * @param {string} email The email address that is being added.\n     * */\n    const handleAddEmail = (email) => {\n        const newEmail = [...emails];\n        newEmail.push(email);\n        setEmailsList(newEmail);\n    };\n\n    /**\n     * Handles the email deletion event.\n     *\n     * @param {string} email : The email that is being deleted.\n     * */\n    const handleEmailDeletion = (email) => {\n        setEmailsList([...emails].filter((oldEmail) => oldEmail !== email));\n    };\n\n    useEffect(() => {\n        const supportedAlertsPromise = api.getSupportedAlertTypes();\n        const subscribedAlertsPromise = api.getSubscribedAlertTypesByUser();\n        Promise.all([supportedAlertsPromise, subscribedAlertsPromise]).then((response) => {\n            if (response[0].status === 204 || response[1].status === 204) {\n                setAnalyticsEnabled(false);\n            } else {\n                setAnalyticsEnabled(true);\n                setSubscribedAlerts(response[1].body.alerts);\n                setEmailsList(response[1].body.emailList);\n                setSupportedAlerts(response[0].body.alerts);\n            }\n        }).catch((err) => {\n            setAnalyticsEnabled(false);\n            setSubscribedAlerts({});\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.loading.error.msg',\n                defaultMessage: 'Error occurred while loading alerts',\n            }));\n        });\n    }, []);\n\n    /**\n     * Handles the subscribe button click action.\n     * */\n    const handleSubscribe = () => {\n        setInProgress({ subscribing: true });\n        const alertsToSubscribe = { alerts: subscribedAlerts, emailList: emails };\n        api.subscribeAlerts(alertsToSubscribe).then(() => {\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.success.msg',\n                defaultMessage: 'Subscribed to Alerts Successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.error.msg',\n                defaultMessage: 'Error occurred while subscribing to alerts.',\n            }));\n        }).finally(() => setInProgress({ subscribing: false }));\n    };\n\n    /**\n     * Handles unsubscribe button click action.\n     * */\n    const handleUnSubscribe = () => {\n        setInProgress({ unSubscribing: true });\n        api.unsubscribeAlerts().then(() => {\n            setSubscribedAlerts([]);\n            setEmailsList([]);\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.success.msg',\n                defaultMessage: 'Unsubscribed from all alerts successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.error.msg',\n                defaultMessage: 'Error occurred while unsubscribing.',\n            }));\n        }).finally(() => setInProgress({ unSubscribing: false }));\n    };\n    // if (!supportedAlerts) {\n    //     return <CircularProgress />;\n    // }\n    return (\n        <React.Fragment>\n            <div className={classes.alertsWrapper}>\n                {!isAnalyticsEnabled ?\n                    <React.Fragment>\n                        <InlineMessage type='info' height={100}>\n                            <div>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.enable.analytics.message'\n                                        defaultMessage='Enable Analytics to Configure Alerts'\n                                    />\n                                </Typography>\n                            </div>\n                        </InlineMessage>\n                    </React.Fragment> :\n                    <React.Fragment>\n                        {!supportedAlerts ?\n                            <CircularProgress /> :\n                            <React.Fragment>\n                                <Typography variant='h6' component='h2' className={classes.manageAlertHeading}>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.heading'\n                                        defaultMessage='Manage Alert Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.subheading'\n                                        defaultMessage={'Select the Alert types to subscribe/ unsubscribe and click' +\n                                        ' Save.'}\n                                    />\n                                </Typography>\n                                <List>\n                                    {supportedAlerts && supportedAlerts.map((alert) => {\n                                        return (\n                                            <ListItem key={alert.id} divider>\n                                                <ListItemIcon>\n                                                    <Checkbox\n                                                        edge='start'\n                                                        tabIndex={-1}\n                                                        value={alert.id}\n                                                        checked={isAlertSubscribed(alert.id)}\n                                                        onChange={() => handleCheckAlert(alert)}\n                                                        inputProps={{ 'aria-labelledby': alert.name }}\n                                                        color='primary'\n                                                    />\n                                                </ListItemIcon>\n                                                <ListItemText\n                                                    id={alert.id}\n                                                    primary={alertIdMapping[alert.id].name}\n                                                    secondary={alertIdMapping[alert.id].description}\n                                                    className={classes.listItem}\n                                                />\n                                                {alert.requireConfiguration === true ?\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton\n                                                            onClick={() => setConfigOpen(alert.id)}\n                                                        >\n                                                            <Icon>\n                                                                settings\n                                                            </Icon>\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction> :\n                                                    <div />}\n                                            </ListItem>\n                                        );\n                                    })}\n                                </List>\n                                <ChipInput\n                                    label='Emails'\n                                    variant='outlined'\n                                    className={classes.chipInput}\n                                    value={emails}\n                                    placeholder='Enter email address and press Enter'\n                                    required\n                                    helperText={'Email address to receive alerts of selected Alert types. Type email' +\n                                    ' address and press Enter to add'}\n                                    onAdd={(chip) => {\n                                        handleAddEmail(chip);\n                                    }}\n                                    onDelete={(chip) => {\n                                        handleEmailDeletion(chip);\n                                    }}\n                                />\n                                <Grid container direction='row' spacing={2} className={classes.btnContainer}>\n                                    <Grid item>\n                                        <Button\n                                            disabled={emails.length === 0 || subscribedAlerts.length === 0}\n                                            onClick={handleSubscribe}\n                                            variant='contained'\n                                            color='primary'\n                                        >\n                                            {isInProgress.subscribing && <CircularProgress size={15} />}\n                                            Save\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            disabled={isInProgress.subscribing}\n                                            color='primary'\n                                            variant='contained'\n                                            onClick={() => setUnsubscribeAll(true)}\n                                        >\n                                            {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                            Unsubscribe All\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link to='/apis/'>\n                                            <Button\n                                                disabled={isInProgress.subscribing}\n                                                variant='contained'\n                                                color='default'\n                                            >\n                                                {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                                    Cancel\n                                            </Button>\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                            </React.Fragment>}\n                    </React.Fragment>}\n            </div>\n            <Dialog fullWidth maxWidth=\"md\" open={openDialog.open}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Settings.Alerts.Alerts.configure.alert'\n                        defaultMessage='Configurations'\n                    />\n                </DialogTitle>\n                {isWorkerNodeDown ? (\n                    <DialogContent>\n                        <DialogContentText id='analytics-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Settings.Alerts.connection.error'\n                                defaultMessage='Could not connect to analytics server. Please check the connectivity.'\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                ) : (\n                    <DialogContent>\n                        <AlertConfiguration\n                            alertType={openDialog.alertType}\n                            alertName={openDialog.name}\n                            api={api}\n                            setIsWorkerNodeDown={setIsWorkerNodeDown}\n                        />\n                    </DialogContent>)}\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        variant='outlined'\n                        onClick={() => setOpenDialog({ open: false })}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.close.btn' defaultMessage='Close' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={unsubscribeAll}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeading}>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.heading'\n                            defaultMessage='Confirm unsubscription from All Alerts'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.message'\n                            defaultMessage={'This will remove all the existing alert subscriptions and emails. This' +\n                            ' action cannot be undone.'}\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        size='small'\n                        onClick={() => {\n                            handleUnSubscribe();\n                            setUnsubscribeAll(false);\n                        }}\n                    >\n                        <Typography>\n                            <FormattedMessage\n                                id='Settings.Alerts.Alerts.confirm.btn'\n                                defaultMessage='Unsubscribe All'\n                            />\n                        </Typography>\n                    </Button>\n                    <Button\n                        color='secondary'\n                        size='small'\n                        onClick={() => setUnsubscribeAll(false)}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.cancel.btn' defaultMessage='Cancel' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\nAlerts.propTypes = {\n    classes: PropTypes.shape({\n        configDialogHeading: PropTypes.string.isRequired,\n        chipInput: PropTypes.string.isRequired,\n        btnContainer: PropTypes.string.isRequired,\n        alertsWrapper: PropTypes.string.isRequired,\n        manageAlertHeading: PropTypes.string.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Alerts));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Alerts from './Alerts/Alerts';\n\n\nconst styles = theme => ({\n    settingsRoot: {\n        padding: theme.spacing(),\n        width: '100%',\n    },\n});\n\n/**\n * @param {any} props sdf\n * @return {any} dds\n * */\nfunction Settings(props) {\n    const { classes } = props;\n    return (\n        <div className={classes.settingsRoot}>\n            <Grid container direction='column' spacing={2}>\n                <Grid item>\n                    <Alerts />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    classes: PropTypes.shape({\n        settingsRoot: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Settings);\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Typography, withStyles, Container } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Settings from './Settings';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n        width: '100%',\n    },\n    headingWrapper: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: theme.spacing(),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n});\n\nfunction SettingsBase(props) {\n    const { classes } = props;\n    return (\n        <Container fixed>\n            <div className={classes.headingWrapper}>\n                <Typography variant='h5' component='h1'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.header'\n                        defaultMessage='Settings'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.sub.header'\n                        defaultMessage='View and Configure Developer Portal Settings'\n                    />\n                </Typography>\n            </div>\n            <Settings />\n        </Container>\n    );\n}\n\nSettingsBase.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(SettingsBase);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport VerticalDivider from './VerticalDivider';\n/**\n * Main style object\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        minHeight: 100,\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px #ddd',\n        '& span.material-icons': {\n            fontSize: 60,\n            color: theme.custom.info.color,\n        },\n        '& span, & h5, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconItem: {\n        paddingRight: theme.spacing(2),\n        fontSize: 60,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n});\n/**\n *  Renders a inline massage\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    state = {\n        value: 0,\n    };\n\n    handleExpandClick = () => {\n        this.setState(state => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes, type } = this.props;\n        const messgeType = type || 'info';\n        return (\n            <Paper className={classes.root} elevation={1}>\n                {messgeType === 'info' && <Icon className={classes.iconItem}>info</Icon>}\n                {messgeType === 'warn' && <Icon className={classes.iconItem}>warning</Icon>}\n                <VerticalDivider height={100} />\n                <div className={classes.content}>{this.props.children}</div>\n            </Paper>\n        );\n    }\n}\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(InlineMessage);\n"],"sourceRoot":""}