{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx"],"names":["withStyles","theme","centerItems","margin","tryoutHeading","marginTop","spacing","fontWeight","menuItem","color","palette","getContrastText","background","paper","props","selectedApplication","selectedKeyType","subscriptions","handleChanges","classes","handleSelectPanelChange","event","target","name","value","Grid","x","md","className","TextField","fullWidth","id","select","label","defaultMessage","onChange","SelectProps","helperText","variant","map","sub","MenuItem","applicationInfo","applicationId","key","Typography","component","FormControl","RadioGroup","row","find","status","FormControlLabel","control","Radio","styles","makeStyles","tokenType","display","padding","grid","marginBottom","paddingRight","justifyContent","genKeyButton","width","height","marginLeft","cursor","grey","gatewayEnvironment","categoryHeading","tooltip","warningIcon","fontSize","marginRight","TryOutController","securitySchemeType","selectedEnvironment","environments","containerMngEnvironments","labels","productionAccessToken","sandboxAccessToken","setKeys","setSelectedKeyType","setSelectedKeyManager","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","scopes","setSecurityScheme","setUsername","setPassword","username","password","updateSwagger","setProductionApiKey","setSandboxApiKey","productionApiKey","sandboxApiKey","environmentObject","setURLs","api","selectedKeyManager","showToken","setShowToken","useState","isUpdating","setIsUpdating","notFound","setNotFound","setSubscriptions","setSelectedApplication","keyManagers","setKeyManagers","selectedKMObject","setSelectedKMObject","ksGenerated","setKSGenerated","apiID","restApi","Api","type","urls","elm","environmentName","URLs","useEffect","subscriptionsList","newSelectedApplication","accessToken","selectedKeyTypes","lifeCycleStatus","toLowerCase","getSubscriptions","then","subscriptionsResponse","obj","list","filter","item","length","Application","get","application","getKeys","appKeys","keyType","token","keys","catch","error","getKeyManagers","response","responseKeyManagerList","body","push","filteredKMs","km","selectedKeys","consumerKey","updateApplication","user","AuthManager","getUser","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","isTestKeyEnabled","authorizationHeader","prefix","securityScheme","includes","isPrototypedAPI","showSecurityType","enableStore","tokenValue","containerMngEnvMenuItems","envType","clusterDetails","forEach","disabled","deploymentEnvironmentName","cluster","clusterName","clusterDisplayName","authHeader","Box","mb","alignItems","enabled","xs","values","what","InputProps","autoComplete","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","Icon","startAdornment","style","minWidth","Button","generateApiKey","console","log","apikey","generateToken","CircularProgress","size","Tooltip","placement","interactive","title","m","mt","env","propTypes","PropTypes","shape","string","isRequired","inputAdornmentStart"],"mappings":"8YAuIeA,kBA9HCC,IAAD,CACXC,YAAa,CACTC,OAAQ,QAEZC,cAAe,CACXC,UAAWJ,EAAMK,QAAQ,GACzBC,WAAY,KAEhBC,SAAU,CACNC,MAAOR,EAAMS,QAAQC,gBAAgBV,EAAMS,QAAQE,WAAWC,UAqHvDb,CAjHSc,IACpB,IAAI,oBACAC,EADA,gBACqBC,GACrBF,EAEJ,MAAM,cACFG,EADE,cACaC,EADb,QAC4BC,GAC9BL,EAOEM,EAA2BC,IAC7B,MAAM,OAAEC,GAAWD,GACb,KAAEE,EAAF,MAAQC,GAAUF,EACxB,OAAQC,GACJ,IAAK,sBACDR,EAAsBS,EACtB,MACJ,IAAK,kBACDR,EAAkBQ,EAK1BN,EAAcG,IAElB,OACI,oCACI,kBAACI,EAAA,EAAD,CAAMC,EAAG,GAAIC,GAAI,EAAGC,UAAWT,EAAQjB,aACnC,kBAAC2B,EAAA,EAAD,CACIC,WAAS,EACTC,GAAG,uBACHC,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,eACfH,GAAG,wDAGXP,MAAOT,EACPQ,KAAK,sBACLY,SAAUf,EACVgB,YAAanB,EACboB,WACI,kBAAC,IAAD,CACIH,eAAe,0BACfH,GAAG,yEAGX5B,OAAO,SACPmC,QAAQ,YAEPrB,EAAcsB,IAAKC,GAChB,kBAACC,EAAA,EAAD,CACIjB,MAAOgB,EAAIE,gBAAgBC,cAC3BC,IAAKJ,EAAIE,gBAAgBC,cACzBf,UAAWT,EAAQX,UAElBgC,EAAIE,gBAAgBnB,SAKrC,kBAACE,EAAA,EAAD,CAAMC,EAAG,GAAIC,GAAI,EAAGC,UAAWT,EAAQjB,aACnC,kBAAC2C,EAAA,EAAD,CAAYP,QAAQ,KAAKQ,UAAU,KAAKrC,MAAM,gBAAgBmB,UAAWT,EAAQf,eAC7E,kBAAC,IAAD,CACI2B,GAAG,iEACHG,eAAe,cAGvB,kBAACa,EAAA,EAAD,CAAaD,UAAU,gBACnB,kBAACE,EAAA,EAAD,CACIzB,KAAK,kBACLC,MAAOR,EACPmB,SAAUf,EACV6B,KAAG,GAEiB,OAAlBhC,IAC0C,cADfA,EAAciC,KAAMV,GAAQA,EAAIG,gBACjD5B,GAAqBoC,QAEW,wBADjClC,EAAciC,KAAMV,GAAQA,EAAIG,gBAC/B5B,GAAqBoC,SAErB,kBAACC,EAAA,EAAD,CACI5B,MAAM,aACN6B,QAAS,kBAACC,EAAA,EAAD,MACTrB,MACI,kBAAC,IAAD,CACIF,GAAG,0DACHG,eAAe,iBAKvC,kBAACkB,EAAA,EAAD,CACI5B,MAAM,UACN6B,QAAS,kBAACC,EAAA,EAAD,MACTrB,MACI,kBAAC,IAAD,CACIF,GAAG,uDACHG,eAAe,oBC3EnD,MAAMqB,EAASC,YAAYvD,IAAD,CACtBC,YAAa,CACTC,OAAQ,QAEZsD,UAAW,CACPtD,OAAQ,OACRuD,QAAS,OACT,2DAA4D,CACxDjD,MAAO,YAGfI,MAAO,CACHV,OAAQF,EAAMK,QAAQ,GACtBqD,QAAS1D,EAAMK,QAAQ,IAE3BsD,KAAM,CACFvD,UAAWJ,EAAMK,QAAQ,GACzBuD,aAAc5D,EAAMK,QAAQ,GAC5BwD,aAAc7D,EAAMK,QAAQ,GAC5ByD,eAAgB,UAEpB3D,cAAe,CACXG,WAAY,KAEhByD,aAAc,CACVC,MAAOhE,EAAMK,QAAQ,IACrB4D,OAAQjE,EAAMK,QAAQ,GACtBD,UAAWJ,EAAMK,QAAQ,KACzB6D,WAAYlE,EAAMK,QAAQ,GAC1B,aAAc,CACV8D,OAAQ,cACRxD,WAAYX,EAAMS,QAAQ2D,KAAK,MAGvCC,mBAAoB,CAChBjE,UAAWJ,EAAMK,QAAQ,IAE7BiE,gBAAiB,CACbV,aAAc5D,EAAMK,QAAQ,GAC5B6D,WAAYlE,EAAMK,SAAS,IAE/BkE,QAAS,CACLL,WAAYlE,EAAMK,QAAQ,IAE9BE,SAAU,CACNC,MAAOR,EAAMS,QAAQC,gBAAgBV,EAAMS,QAAQE,WAAWC,QAElE4D,YAAa,CACThE,MAAO,UACPiE,SAAU,GACVC,YAAa,OAUrB,SAASC,EAAiB9D,GACtB,MAAM,mBACF+D,EADE,oBACkBC,EADlB,aACuCC,EADvC,yBACqDC,EADrD,OAC+EC,EAD/E,sBAEFC,EAFE,mBAEqBC,EAFrB,gBAEyCnE,EAFzC,QAE0DoE,EAF1D,mBAEmEC,EAFnE,sBAGFC,EAHE,uBAIFC,EAJE,yBAIsBC,EAJtB,sBAIgDC,EAJhD,OAIuEC,EAJvE,kBAKFC,EALE,YAKiBC,EALjB,YAK8BC,EAL9B,SAK2CC,EAL3C,SAKqDC,EALrD,cAK+DC,EAL/D,oBAMFC,EANE,iBAMmBC,EANnB,iBAMqCC,EANrC,cAMuDC,EANvD,kBAMsEC,EANtE,QAMyFC,EANzF,IAMkGC,IACpGzF,EACJ,IAAI,mBAAE0F,IAAuB1F,EAC7B0F,GAAqBA,IAAsB,uBAE3C,MAAMrF,GAAUoC,KACTkD,GAAWC,IAAgBC,oBAAS,IACpCC,GAAYC,IAAiBF,oBAAS,IACtCG,GAAUC,IAAeJ,oBAAS,IAClC1F,GAAe+F,IAAoBL,mBAAS,KAC5C5F,GAAqBkG,IAA0BN,mBAAS,KACxDO,GAAaC,IAAkBR,mBAAS,KACxCS,GAAkBC,IAAuBV,mBAAS,OAClDW,GAAaC,IAAkBZ,oBAAS,GACzCa,GAAQjB,GAAIxE,GACZ0F,GAAU,IAAIC,IA8NpB,SAASxG,GAAcG,GACnB,MAAM,OAAEC,GAAWD,GACb,KAAEE,EAAF,MAAQC,GAAUF,EACxB,OAAQC,GACJ,IAAK,sBAKD,GAJAgE,EAAuB/D,GAAO,GACb,YAAb+E,GAAIoB,MACJ3B,EAAcxE,GAEd6E,EAAmB,CACnB,MAAMuB,EAAOvB,EAAkBnD,KAAM2E,GAAQrG,IAAUqG,EAAIC,iBAAiBC,KAC5EzB,EAAQsB,GAEZ,MACJ,IAAK,sBACDpC,EAAyB,IACzBC,EAAsB,IACtBQ,EAAoB,IACpBC,EAAiB,IACjBe,GAAuBzF,GACvB,MACJ,IAAK,qBACD8D,EAAsB9D,GAAO,EAAMT,IACnC,MACJ,IAAK,kBAIGsE,EAAmB7D,GAHlB0D,IAA0BC,EAGMpE,IAErC,MACJ,IAAK,iBACD4E,EAAkBnE,GAClB,MACJ,IAAK,WACDoE,EAAYpE,GACZ,MACJ,IAAK,WACDqE,EAAYrE,GACZ,MACJ,IAAK,cAC0B,YAAvBqD,GAAwD,eAApB7D,EACpCiF,EAAoBzE,GACU,YAAvBqD,GAAwD,YAApB7D,EAC3CkF,EAAiB1E,GACU,eAApBR,EACPwE,EAAyBhE,GAEzBiE,EAAsBjE,IA5QtCwG,oBAAU,KACN,IAAIC,EACAC,EAGAC,EADAC,EAAmB,aAEvB,GAAI7B,GAAI8B,iBAAyD,eAAtC9B,GAAI8B,gBAAgBC,cAAgC,CAC9Cb,GAAQc,iBAAiBf,IACjCgB,KAAMC,IACO,OAA1BA,IACAR,EAAoBQ,EAAsBC,IAAIC,KAAKC,OAAQC,GAAyB,cAAhBA,EAAK1F,QAClD,sBAAhB0F,EAAK1F,QAAkD,wBAAhB0F,EAAK1F,UAE1B8E,EAAkBa,OAAS,GAChDZ,EAAyBD,EAAkB,GAAGtF,cAC9CoG,IAAYC,IAAId,GACXM,KAAMS,GACIA,EAAYC,WAEtBV,KAAMW,IACCA,EAAQH,IAAIxC,KACmC,YAA5C2C,EAAQH,IAAIxC,IAAoB4C,SACnChB,EAAmB,YAChBD,eAAgBgB,EAAQH,IAAIxC,IAAoB6C,QAC5CF,EAAQH,IAAIxC,KAC4B,eAA5C2C,EAAQH,IAAIxC,IAAoB4C,UACnChB,EAAmB,eAChBD,eAAgBgB,EAAQH,IAAIxC,IAAoB6C,QAEvDpC,GAAuBiB,GACvBlB,GAAiBiB,GACjB7C,EAAQ+D,GACR5D,EAAuBT,GAAqB,GAC5CO,EAAmB+C,GAAkB,GACb,eAApBpH,EACAwE,EAAyB2C,GAEzB1C,EAAsB0C,OAgBtClB,GAAuBiB,GACvBlB,GAAiBiB,GACjB7C,OApDRkE,GAqDQ/D,EAAuBT,GAAqB,GACpB,eAApB9D,EACAwE,EAAyB2C,GAEzB1C,EAAsB0C,GAE1B9C,EAAmBrE,GAAiB,MAEzCuI,MAAOC,IAIN,MAAM,OAAErG,GAAWqG,EACJ,MAAXrG,GACA4D,IAAY,KAGQU,GAAQgC,iBAE/BjB,KAAMkB,IACH,MAAMC,EAAyB,GAC/BD,EAASE,KAAKjB,KAAKpG,IAAKsG,GAASc,EAAuBE,KAAKhB,IAC7D1B,GAAewC,GACf,MAAMG,EAAeH,EAAuBf,OAAQmB,GAAOA,EAAGxI,OAASiF,IACnEsD,GAAeA,EAAYhB,OAAS,GACpCzB,GAAoByC,EAAY,MAGvCP,MAAOC,IAIJ,MAAM,OAAErG,GAAWqG,EACJ,MAAXrG,GACA4D,IAAY,OAI7B,IAqHHiB,oBAAU,MArCV,WACI,GAAIzB,GAAI8B,iBAAyD,eAAtC9B,GAAI8B,gBAAgBC,cAAgC,CAC3E,IAAIH,EACAiB,EACkB,OAAlBnI,IAAmD,IAAzBA,GAAc6H,QAA+C,IAA/B/H,GAAoB+H,SAEpC,sBADpC7H,GAAciC,KAAMV,GAAQA,EAAIG,gBAC5B5B,IAAqBoC,QACzBkC,EAAmBrE,GAAiB,GACpCoI,EAAU,WAEVA,EAAUpI,GAGlB+H,IAAYC,IAAIjI,IACXyH,KAAMS,GACIA,EAAYC,QAAQE,GAAW,eAEzCZ,KAAMW,IACH,MAAMa,EAAeb,EAAQH,IAAIxC,IAC7BwD,GAAgBA,EAAaZ,UAAYpI,KACtCmH,eAAgB6B,EAAaX,OAEhCW,GAAyC,eAAzBA,EAAaZ,QAC7B5D,EAAyB2C,GAClB6B,GAAyC,YAAzBA,EAAaZ,SACpC3D,EAAsB0C,GAEtB6B,GAAgBA,EAAaC,aAA4C,KAA7BD,EAAaC,YACzD1C,IAAe,GAEfA,IAAe,GAEnBnC,EAAQ+D,MAMpBe,IACD,CAACnJ,GAAqBC,EAAiB8D,EAAqBD,IA8D/D,MAAMsF,GAAOC,IAAYC,UACzB,GAAW,MAAP9D,GACA,OAAO,kBAAC+D,EAAA,EAAD,MAEX,GAAIxD,GACA,MAAO,kBAEX,IAAIyD,IAAkB,EAClBC,IAAqB,EACrBC,IAAiB,EACjBC,IAAmB,EACnBC,GAAsBpE,GAAIoE,oBAAsBpE,GAAIoE,oBAAsB,gBAC1EC,GAAS,SACTrE,IAAOA,GAAIsE,iBACXN,GAAkBhE,GAAIsE,eAAeC,SAAS,WAC9CN,GAAqBjE,GAAIsE,eAAeC,SAAS,cACjDL,GAAiBlE,GAAIsE,eAAeC,SAAS,UAC7CJ,GAAmBnE,GAAIsE,eAAeC,SAAS,aAC3CP,IAA0C,YAAvB1F,IACnB8F,GAAsB,SACtBC,GAAS,IAETF,IAA2C,SAAvB7F,IACpB8F,GAAsB,UACtBC,GAAS,KAGjB,MAAMG,GAAkBxE,GAAI8B,iBAAyD,eAAtC9B,GAAI8B,gBAAgBC,cAE7D0C,GADoD,cAAtCzE,GAAI8B,gBAAgBC,eACCyC,KAAuC,IAApBxE,GAAI0E,YAEhE,IAAIC,GAAa,GAEbA,GADuB,YAAvBrG,EACiC,eAApB7D,EAAmCmF,EAAmBC,EAElC,eAApBpF,EAAmCkE,EAAwBC,EAM5E,MAAMgG,GAA2B,GAC7BnG,GACAA,EAAyB4D,OAAQwC,GAAYA,EAAQC,eAAevC,OAAS,GAAGwC,QAASF,IAErFD,GAAyBtB,KACrB,kBAACpH,EAAA,EAAD,CAAUjB,MAAM,GAAG+J,UAAQ,EAAC3J,UAAWT,GAAQX,UAC3C,4BACK4K,EAAQI,6BAKrBJ,EAAQC,eAAeC,QAASG,IAC5BN,GAAyBtB,KACrB,kBAACpH,EAAA,EAAD,CACIjB,MAAOiK,EAAQC,YACf9I,IAAK6I,EAAQC,YACb9J,UAAWT,GAAQX,UAElBiL,EAAQE,yBAO7B,MAAMC,GAAc,GAAEjB,OAAwBC,KAE9C,OACI,oCACI,kBAACnJ,EAAA,EAAD,CAAMC,EAAG,GAAIC,GAAI,EAAGC,UAAWT,GAAQjB,aACnC,kBAAC2L,EAAA,EAAD,KAC4B,SAAvBhH,GACG,oCACI,kBAAChC,EAAA,EAAD,CAAYP,QAAQ,KAAKQ,UAAU,KAAKrC,MAAM,cAAcmB,UAAWT,GAAQoD,iBAC3E,kBAAC,IAAD,CACIxC,GAAG,+BACHG,eAAe,cAGvB,kBAAC2J,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACjJ,EAAA,EAAD,CAAYP,QAAQ,SAChB,kBAACuJ,EAAA,EAAD,CAAKnI,QAAQ,OAAOqI,WAAW,UACzB3E,IAAoBA,GAAiB4E,SACnC,kBAAC,IAAD,CACIjK,GAAG,8DACHG,eAAe,8DAGrBkF,KAAqBA,GAAiB4E,SACpC,oCACI,kBAAC,IAAD,CAAapK,UAAWT,GAAQsD,cAChC,6BACI,kBAAC,IAAD,CACI1C,GAAG,8DACHG,eAAgB,2HAM9BkF,IAAgD,IAA5BA,GAAiB0B,QACnC,kBAAC,IAAD,CACI/G,GAAG,gEACHG,eAAgB,mIAOpC,kBAACW,EAAA,EAAD,CAAYP,QAAQ,KAAKQ,UAAU,KAAKrC,MAAM,gBAAgBmB,UAAWT,GAAQf,eAC7E,kBAAC,IAAD,CACI2B,GAAG,oCACHG,eAAe,qBAK5BqI,IAAmBC,IAAsBC,KAAmBO,IAC3D,kBAACjI,EAAA,EAAD,CAAaD,UAAU,YACnB,kBAACE,EAAA,EAAD,CACIzB,KAAK,iBACLC,MAAOqD,EACP1C,SAAUjB,GACV+B,KAAG,GAEH,kBAACG,EAAA,EAAD,CACI5B,MAAM,QACN+J,UAAWd,GACXpH,QAAS,kBAACC,EAAA,EAAD,MACTrB,MACI,kBAAC,IAAD,CACIF,GAAG,gDACHG,eAAe,YAI3B,kBAACkB,EAAA,EAAD,CACI5B,MAAM,UACN+J,UAAWhB,GACXlH,QAAS,kBAACC,EAAA,EAAD,MACTrB,MACI,kBAAC,IAAD,CACIF,GAAG,iDACHG,eAAe,cAI3B,kBAACkB,EAAA,EAAD,CACI5B,MAAM,QACN+J,UAAWf,GACXnH,QAAS,kBAACC,EAAA,EAAD,MACTrB,MACI,kBAAC,IAAD,CACIF,GAAG,gDACHG,eAAe,iBAS7C6I,IAEM,kBAACtJ,EAAA,EAAD,CAAMwK,GAAI,GAAItK,GAAI,GAAIkH,MAAI,GACtB,kBAACgD,EAAA,EAAD,CAAKnI,QAAQ,SACRyG,IAAQlJ,IACFA,GAAc6H,OAAS,GAA4B,UAAvBjE,GAAyD,SAAvBA,GAE7D,kBAAC,EAAD,CACI5D,cAAeA,GACfC,cAAeA,GACfH,oBAAqBA,GACrByF,mBAAoBA,GACpBxF,gBAAiBA,EACjBkG,YAAaA,KAGxBjG,IAA0C,IAAzBA,GAAc6H,QAAuC,SAAvBjE,EAC5C,kBAACpD,EAAA,EAAD,CAAMC,EAAG,EAAGC,GAAI,EAAGC,UAAWT,GAAQsC,UAAWoF,MAAI,GACjD,kBAACgD,EAAA,EAAD,CAAKC,GAAI,EAAGC,WAAW,UACnB,kBAAClJ,EAAA,EAAD,CAAYP,QAAQ,SAChB,kBAACuJ,EAAA,EAAD,CAAKnI,QAAQ,QACT,kBAAC,IAAD,CAAa9B,UAAWT,GAAQsD,cAChC,6BACI,kBAAC,IAAD,CACI1C,GAAG,8DACHG,eAAe,6CAQrCoF,IAAsC,UAAvBzC,GACb,kBAACpD,EAAA,EAAD,CAAMC,EAAG,EAAGC,GAAI,EAAGC,UAAWT,GAAQsC,UAAWoF,MAAI,GACjD,kBAACgD,EAAA,EAAD,CAAKC,GAAI,EAAGC,WAAW,UACnB,kBAAClJ,EAAA,EAAD,CAAYP,QAAQ,SAChB,kBAACuJ,EAAA,EAAD,CAAKnI,QAAQ,QACT,kBAAC,IAAD,CAAa9B,UAAWT,GAAQsD,cAChC,6BACI,kBAAC,IAAD,CACI1C,GAAG,wDACHG,eAAgB,iGAEhBgK,OAAQ,CAAEC,KAAMnL,UAShD,kBAAC6K,EAAA,EAAD,CAAKnI,QAAQ,QAAQK,eAAe,UAChC,kBAACtC,EAAA,EAAD,CAAMC,EAAG,EAAGC,GAAI,EAAGC,UAAWT,GAAQsC,UAAWoF,MAAI,GACzB,UAAvBhE,GACG,oCACI,kBAACpD,EAAA,EAAD,CAAMC,EAAG,GAAIC,GAAI,GAAIkH,MAAI,GACrB,kBAAChH,EAAA,EAAD,CACI1B,OAAO,SACPmC,QAAQ,WACRL,MACI,kBAAC,IAAD,CACIF,GAAG,WACHG,eAAe,aAGvBX,KAAK,WACLY,SAAUjB,GACVM,MAAOsE,GAAY,GACnBhE,WAAS,IAEb,kBAACD,EAAA,EAAD,CACI1B,OAAO,SACPmC,QAAQ,WACRL,MACI,kBAAC,IAAD,CACIF,GAAG,WACHG,eAAe,aAGvBX,KAAK,WACLY,SAAUjB,GACVM,MAAOuE,GAAY,GACnBjE,WAAS,EACTsK,WAAY,CACRC,aAAc,oBAOV,UAAvBxH,GAAyD,SAAvBA,GAC/B,kBAAChD,EAAA,EAAD,CACIC,WAAS,EACT3B,OAAO,SACPmC,QAAQ,WACRL,MACI,kBAAC,IAAD,CACIF,GAAG,eACHG,eAAe,iBAGvBX,KAAK,cACLY,SAAUjB,GACVyG,KAAMlB,GAAY,OAAS,WAC3BjF,MAAO0J,IAAc,GACrB7I,WACI,kBAAC,IAAD,CACIN,GAAG,qBACHG,eAAe,uBAGvBH,GAAG,mBACHqK,WAAY,CACRC,aAAc,eACdC,aACI,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACrB,kBAACC,EAAA,EAAD,CACIC,KAAK,MACLC,aAAW,0BACXC,QA7YxD,WACIlG,IAAcD,MA8YuCA,GAAY,kBAACoG,EAAA,EAAD,uBACP,kBAACA,EAAA,EAAD,qBAIlBC,eACI,kBAACP,EAAA,EAAD,CACIQ,MAAO,CACHC,SAA+B,EAApBpB,GAAW9C,QAE1B0D,SAAS,SAEP,GAAE7B,OAAwBC,SAMxB,UAAvB/F,GAAyD,SAAvBA,GAC/B,oCACI,kBAACoI,EAAA,EAAD,CACIL,QAAgC,YAAvB/H,EAncrD,WACI,GAAI0B,GAAI8B,iBAAyD,eAAtC9B,GAAI8B,gBAAgBC,cAAgC,CAC3EzB,IAAc,GACMY,GAAQyF,eAAenM,GAAqBC,GAAkB,GAE7EwH,KAAMkB,IACHyD,QAAQC,IAAI,8BAA+B1D,GAC3ChD,IAAa,GACW,eAApB1F,EACAiF,EAAoByD,EAASE,KAAKyD,QAElCnH,EAAiBwD,EAASE,KAAKyD,QAEnCxG,IAAc,KAEjB0C,MAAOC,IACJ2D,QAAQC,IAAI5D,GACZ,MAAM,OAAErG,GAAWqG,EACJ,MAAXrG,GACA4D,IAAY,GAEhBF,IAAc,OAxD9B,WACI,GAAIN,GAAI8B,iBAAyD,eAAtC9B,GAAI8B,gBAAgBC,cAAgC,CAC3EzB,IAAc,GACakC,IAAYC,IAAIjI,IAEtCyH,KAAMS,GAAgBA,EAAYqE,cAC/B9G,GACAxF,EACA,KACA0E,IAEH8C,KAAMkB,IACHyD,QAAQC,IAAI,gCAAkC1D,GAC9ChD,IAAa,GACW,eAApB1F,EACAwE,EAAyBkE,EAASvB,aAElC1C,EAAsBiE,EAASvB,aAEnCtB,IAAc,KAEjB0C,MAAOC,IACJ2D,QAAQ3D,MAAMA,GACd,MAAM,OAAErG,GAAWqG,EACJ,MAAXrG,GACA4D,IAAY,GAEhBF,IAAc,OA6ccvE,QAAQ,YACRV,UAAWT,GAAQ6C,aACnBuH,UAAWpB,IAASlJ,IAA0C,IAAzBA,GAAc6H,SAC1CxB,IAAsC,UAAvBzC,GAEvB+B,IACG,kBAAC2G,EAAA,EAAD,CAAkBC,KAAM,KAE5B,kBAAC,IAAD,CACIzL,GAAG,4CACHG,eAAe,mBAGvB,kBAACuL,EAAA,EAAD,CACIC,UAAU,QACVC,aAAW,EACXC,MACI,kBAAC,IAAD,CACI7L,GAAG,kDACHG,eACI,gFAMZ,kBAAC2J,EAAA,EAAD,CAAKgC,EAAG,EAAGC,GAAI,GACX,kBAACrB,EAAA,EAAD,CACIE,aAAW,wDAEX,kBAAC,IAAD,YAQ5B,kBAACd,EAAA,EAAD,CAAKnI,QAAQ,OAAOK,eAAe,SAASnC,UAAWT,GAAQmD,oBAC3D,kBAAC7C,EAAA,EAAD,CAAMwK,GAAI,GAAItK,GAAI,EAAGkH,MAAI,IAClB9D,GAAgBA,EAAa+D,OAAS,GAAOqC,GAAyBrC,OAAS,GAC1E7D,GAAUA,EAAO6D,OAAS,IAE1B,oCACI,kBAACjG,EAAA,EAAD,CACIP,QAAQ,KACRQ,UAAU,KACVrC,MAAM,cACNmB,UAAWT,GAAQoD,iBAEnB,kBAAC,IAAD,CACIxC,GAAG,8BACHG,eAAe,aAGvB,kBAACL,EAAA,EAAD,CACIC,WAAS,EACTE,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,cACfH,GAAG,wCAGXP,MAAOsD,GAAwBC,GAAgBA,EAAa,GAC5DxD,KAAK,sBACLY,SAAUjB,GACVmB,WACI,kBAAC,IAAD,CACIH,eAAe,+BACfH,GAAG,uDAGX5B,OAAO,SACPmC,QAAQ,YAEPyC,GAAgBA,EAAa+D,OAAS,GACnC,kBAACrG,EAAA,EAAD,CAAUjB,MAAM,GAAG+J,UAAQ,EAAC3J,UAAWT,GAAQX,UAC3C,4BACI,kBAAC,IAAD,CACIuB,GAAG,eACHG,eAAe,mBAK9B6C,GACGA,EAAaxC,IAAKwL,GACd,kBAACtL,EAAA,EAAD,CACIjB,MAAOuM,EACPnL,IAAKmL,EACLnM,UAAWT,GAAQX,UAElBuN,IAGZ5C,GACAlG,GAAUA,EAAO6D,OAAS,GACvB,kBAACrG,EAAA,EAAD,CAAUjB,MAAM,GAAG+J,UAAQ,GACvB,4BACI,kBAAC,IAAD,CACIxJ,GAAG,WACHG,eAAe,WACfN,UAAWT,GAAQX,aAKlCyE,GACGA,EAAO1C,IAAKN,GACR,kBAACQ,EAAA,EAAD,CACIjB,MAAOS,EACPW,IAAKX,EACLL,UAAWT,GAAQX,UAElByB,UAYnD8I,KAAoBxE,GAAI0E,aAEd,kBAACY,EAAA,EAAD,CAAKnI,QAAQ,OAAOK,eAAe,SAASnC,UAAWT,GAAQmD,oBAC3D,kBAAC7C,EAAA,EAAD,CAAMwK,GAAI,GAAItK,GAAI,EAAGkH,MAAI,IAClB9D,GAAgBA,EAAa+D,OAAS,GAAOqC,GAAyBrC,OAAS,GACtE7D,GAAUA,EAAO6D,OAAS,IAE1B,oCACI,kBAACjG,EAAA,EAAD,CACIP,QAAQ,KACRQ,UAAU,KACVrC,MAAM,cACNmB,UAAWT,GAAQoD,iBAEnB,kBAAC,IAAD,CACIxC,GAAG,8BACHG,eAAe,aAGvB,kBAACL,EAAA,EAAD,CACIC,WAAS,EACTE,QAAM,EACNC,MACI,kBAAC,IAAD,CACIC,eAAe,cACfH,GAAG,wCAGXP,MAAOsD,GAAwBC,GAAgBA,EAAa,GAC5DxD,KAAK,sBACLY,SAAUjB,GACVmB,WACI,kBAAC,IAAD,CACIH,eAAe,+BACfH,GAAG,uDAGX5B,OAAO,SACPmC,QAAQ,YAEPyC,GAAgBA,EAAa+D,OAAS,GACnC,kBAACrG,EAAA,EAAD,CAAUjB,MAAM,GAAG+J,UAAQ,EAAC3J,UAAWT,GAAQX,UAC3C,4BACI,kBAAC,IAAD,CACIuB,GAAG,eACHG,eAAe,mBAK9B6C,GACGA,EAAaxC,IAAKwL,GACd,kBAACtL,EAAA,EAAD,CACIjB,MAAOuM,EACPnL,IAAKmL,EACLnM,UAAWT,GAAQX,UAElBuN,IAGZ5C,GACAlG,GAAUA,EAAO6D,OAAS,GACvB,kBAACrG,EAAA,EAAD,CAAUjB,MAAM,GAAG+J,UAAQ,GACvB,4BACI,kBAAC,IAAD,CACIxJ,GAAG,WACHG,eAAe,WACfN,UAAWT,GAAQX,aAKlCyE,GACGA,EAAO1C,IAAKN,GACR,kBAACQ,EAAA,EAAD,CACIjB,MAAOS,EACPW,IAAKX,EACLL,UAAWT,GAAQX,UAElByB,SAcjE2C,EAAiBoJ,UAAY,CACzB7M,QAAS8M,IAAUC,MAAM,CACrBrN,MAAOoN,IAAUE,OAAOC,WACxBxK,KAAMqK,IAAUE,OAAOC,WACvBC,oBAAqBJ,IAAUE,OAAOC,WACtClO,YAAa+N,IAAUE,OAAOC,aAC/BA,YAGQpO,QAAWwD,IAAXxD,CAAuB4E","file":"APIConsole~GraphQLConsole.be3671bd73c917e3b427.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Grid, FormControl, FormControlLabel, RadioGroup, Radio, Typography,\n} from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = (theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tryoutHeading: {\n        marginTop: theme.spacing(1),\n        fontWeight: 400,\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nconst SelectAppPanel = (props) => {\n    let {\n        selectedApplication, selectedKeyType,\n    } = props;\n\n    const {\n        subscriptions, handleChanges, classes,\n    } = props;\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} event event fired\n     */\n    const handleSelectPanelChange = (event) => {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedApplication':\n                selectedApplication = value;\n                break;\n            case 'selectedKeyType':\n                selectedKeyType = value;\n                break;\n            default:\n                break;\n        }\n        handleChanges(event);\n    };\n    return (\n        <>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <TextField\n                    fullWidth\n                    id='selected-application'\n                    select\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                        />\n                    )}\n                    value={selectedApplication}\n                    name='selectedApplication'\n                    onChange={handleSelectPanelChange}\n                    SelectProps={subscriptions}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Subscribed applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.select.subscribed.application'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {subscriptions.map((sub) => (\n                        <MenuItem\n                            value={sub.applicationInfo.applicationId}\n                            key={sub.applicationInfo.applicationId}\n                            className={classes.menuItem}\n                        >\n                            {sub.applicationInfo.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography variant='h6' component='h4' color='textSecondary' className={classes.tryoutHeading}>\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type.heading'\n                        defaultMessage='Key Type'\n                    />\n                </Typography>\n                <FormControl component='fieldKeyType'>\n                    <RadioGroup\n                        name='selectedKeyType'\n                        value={selectedKeyType}\n                        onChange={handleSelectPanelChange}\n                        row\n                    >\n                        {(subscriptions !== null && (subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'UNBLOCKED'\n                                || subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'TIER_UPDATE_PENDING'))\n                                && (\n                                    <FormControlLabel\n                                        value='PRODUCTION'\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                                defaultMessage='Production'\n                                            />\n                                        )}\n                                    />\n                                )}\n                        <FormControlLabel\n                            value='SANDBOX'\n                            control={<Radio />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                    defaultMessage='Sandbox'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n        </>\n    );\n};\n\nexport default withStyles(styles)(SelectAppPanel);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect, useState,\n} from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl, CircularProgress, Tooltip,\n} from '@material-ui/core';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport Application from '../../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = makeStyles((theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#6d6d6d',\n        },\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    tryoutHeading: {\n        fontWeight: 400,\n    },\n    genKeyButton: {\n        width: theme.spacing(20),\n        height: theme.spacing(5),\n        marginTop: theme.spacing(2.5),\n        marginLeft: theme.spacing(2),\n        '&:disabled': {\n            cursor: 'not-allowed',\n            background: theme.palette.grey[50],\n        },\n    },\n    gatewayEnvironment: {\n        marginTop: theme.spacing(4),\n    },\n    categoryHeading: {\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(-5),\n    },\n    tooltip: {\n        marginLeft: theme.spacing(1),\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 25,\n        marginRight: 10,\n    },\n}));\n\n/**\n * TryOut component\n *\n * @class TryOutController\n * @extends {Component}\n */\nfunction TryOutController(props) {\n    const {\n        securitySchemeType, selectedEnvironment, environments, containerMngEnvironments, labels,\n        productionAccessToken, sandboxAccessToken, selectedKeyType, setKeys, setSelectedKeyType,\n        setSelectedKeyManager,\n        setSelectedEnvironment, setProductionAccessToken, setSandboxAccessToken, scopes,\n        setSecurityScheme, setUsername, setPassword, username, password, updateSwagger,\n        setProductionApiKey, setSandboxApiKey, productionApiKey, sandboxApiKey, environmentObject, setURLs, api,\n    } = props;\n    let { selectedKeyManager } = props;\n    selectedKeyManager = selectedKeyManager || 'Resident Key Manager';\n\n    const classes = styles();\n    const [showToken, setShowToken] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [selectedApplication, setSelectedApplication] = useState([]);\n    const [keyManagers, setKeyManagers] = useState([]);\n    const [selectedKMObject, setSelectedKMObject] = useState(null);\n    const [ksGenerated, setKSGenerated] = useState(false);\n    const apiID = api.id;\n    const restApi = new Api();\n\n    useEffect(() => {\n        let subscriptionsList;\n        let newSelectedApplication;\n        let keys;\n        let selectedKeyTypes = 'PRODUCTION';\n        let accessToken;\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            const promiseSubscriptions = restApi.getSubscriptions(apiID);\n            promiseSubscriptions.then((subscriptionsResponse) => {\n                if (subscriptionsResponse !== null) {\n                    subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                        || item.status === 'PROD_ONLY_BLOCKED' || item.status === 'TIER_UPDATE_PENDING');\n\n                    if (subscriptionsList && subscriptionsList.length > 0) {\n                        newSelectedApplication = subscriptionsList[0].applicationId;\n                        Application.get(newSelectedApplication)\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                    selectedKeyTypes = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                } else if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                    selectedKeyTypes = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                }\n                                setSelectedApplication(newSelectedApplication);\n                                setSubscriptions(subscriptionsList);\n                                setKeys(appKeys);\n                                setSelectedEnvironment(selectedEnvironment, false);\n                                setSelectedKeyType(selectedKeyTypes, false);\n                                if (selectedKeyType === 'PRODUCTION') {\n                                    setProductionAccessToken(accessToken);\n                                } else {\n                                    setSandboxAccessToken(accessToken);\n                                }\n                            });\n                    } else {\n                        setSelectedApplication(newSelectedApplication);\n                        setSubscriptions(subscriptionsList);\n                        setKeys(keys);\n                        setSelectedEnvironment(selectedEnvironment, false);\n                        if (selectedKeyType === 'PRODUCTION') {\n                            setProductionAccessToken(accessToken);\n                        } else {\n                            setSandboxAccessToken(accessToken);\n                        }\n                        setSelectedKeyType(selectedKeyType, false);\n                    }\n                } else {\n                    setSelectedApplication(newSelectedApplication);\n                    setSubscriptions(subscriptionsList);\n                    setKeys(keys);\n                    setSelectedEnvironment(selectedEnvironment, false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setSelectedKeyType(selectedKeyType, false);\n                }\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n            const promisedKeyManagers = restApi.getKeyManagers();\n            promisedKeyManagers\n                .then((response) => {\n                    const responseKeyManagerList = [];\n                    response.body.list.map((item) => responseKeyManagerList.push(item));\n                    setKeyManagers(responseKeyManagerList);\n                    const filteredKMs = (responseKeyManagerList.filter((km) => km.name === selectedKeyManager));\n                    if (filteredKMs && filteredKMs.length > 0) {\n                        setSelectedKMObject(filteredKMs[0]);\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n        }\n    }, []);\n\n\n    /**\n     * Generate access token\n     * */\n    function generateAccessToken() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            setIsUpdating(true);\n            const applicationPromise = Application.get(selectedApplication);\n            applicationPromise\n                .then((application) => application.generateToken(\n                    selectedKeyManager,\n                    selectedKeyType,\n                    3600,\n                    scopes,\n                ))\n                .then((response) => {\n                    console.log('token generated successfully ' + response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(response.accessToken);\n                    } else {\n                        setSandboxAccessToken(response.accessToken);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     * Generate api key\n     * */\n    function generateApiKey() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            setIsUpdating(true);\n            const promisedKey = restApi.generateApiKey(selectedApplication, selectedKeyType, -1);\n            promisedKey\n                .then((response) => {\n                    console.log('Non empty response received', response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionApiKey(response.body.apikey);\n                    } else {\n                        setSandboxApiKey(response.body.apikey);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof TryOutController\n     */\n    function handleClickShowToken() {\n        setShowToken(!showToken);\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof TryOutController\n     */\n    function updateApplication() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            let accessToken;\n            let keyType;\n            if (subscriptions !== null && subscriptions.length !== 0 && selectedApplication.length !== 0) {\n                if (subscriptions.find((sub) => sub.applicationId\n                    === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                    setSelectedKeyType(selectedKeyType, false);\n                    keyType = 'SANDBOX';\n                } else {\n                    keyType = selectedKeyType;\n                }\n            }\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(keyType || 'PRODUCTION');\n                })\n                .then((appKeys) => {\n                    const selectedKeys = appKeys.get(selectedKeyManager);\n                    if (selectedKeys && selectedKeys.keyType === selectedKeyType) {\n                        ({ accessToken } = selectedKeys.token);\n                    }\n                    if (selectedKeys && selectedKeys.keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else if (selectedKeys && selectedKeys.keyType === 'SANDBOX') {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    if (selectedKeys && selectedKeys.consumerKey && selectedKeys.consumerKey !== '') {\n                        setKSGenerated(true);\n                    } else {\n                        setKSGenerated(false);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    }\n\n    useEffect(() => {\n        updateApplication();\n    }, [selectedApplication, selectedKeyType, selectedEnvironment, securitySchemeType]);\n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof TryOutController\n     */\n    function handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                setSelectedEnvironment(value, true);\n                if (api.type !== 'GRAPHQL') {\n                    updateSwagger(value);\n                }\n                if (environmentObject) {\n                    const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n                    setURLs(urls);\n                }\n                break;\n            case 'selectedApplication':\n                setProductionAccessToken('');\n                setSandboxAccessToken('');\n                setProductionApiKey('');\n                setSandboxApiKey('');\n                setSelectedApplication(value);\n                break;\n            case 'selectedKeyManager':\n                setSelectedKeyManager(value, true, selectedApplication);\n                break;\n            case 'selectedKeyType':\n                if (!productionAccessToken || !sandboxAccessToken) {\n                    setSelectedKeyType(value, true, selectedApplication);\n                } else {\n                    setSelectedKeyType(value, false, selectedApplication);\n                }\n                break;\n            case 'securityScheme':\n                setSecurityScheme(value);\n                break;\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'accessToken':\n                if (securitySchemeType === 'API-KEY' && selectedKeyType === 'PRODUCTION') {\n                    setProductionApiKey(value);\n                } else if (securitySchemeType === 'API-KEY' && selectedKeyType === 'SANDBOX') {\n                    setSandboxApiKey(value);\n                } else if (selectedKeyType === 'PRODUCTION') {\n                    setProductionAccessToken(value);\n                } else {\n                    setSandboxAccessToken(value);\n                }\n                break;\n            default:\n        }\n    }\n\n    const user = AuthManager.getUser();\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let isTestKeyEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        isTestKeyEnabled = api.securityScheme.includes('test_auth');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n            prefix = '';\n        }\n        if (isTestKeyEnabled && securitySchemeType === 'TEST') {\n            authorizationHeader = 'testKey';\n            prefix = '';\n        }\n    }\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    const isPublished = api.lifeCycleStatus.toLowerCase() === 'published';\n    const showSecurityType = isPublished || (isPrototypedAPI && api.enableStore === true);\n\n    let tokenValue = '';\n    if (securitySchemeType === 'API-KEY') {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionApiKey : sandboxApiKey;\n    } else {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionAccessToken : sandboxAccessToken;\n    }\n\n    // The rendering logic of container management menus items are done here\n    // because when grouping container management type and clusters with <> and </>\n    // the handleChange event is not triggered. Hence handle rendering logic here.\n    const containerMngEnvMenuItems = [];\n    if (containerMngEnvironments) {\n        containerMngEnvironments.filter((envType) => envType.clusterDetails.length > 0).forEach((envType) => {\n            // container management system type\n            containerMngEnvMenuItems.push(\n                <MenuItem value='' disabled className={classes.menuItem}>\n                    <em>\n                        {envType.deploymentEnvironmentName}\n                    </em>\n                </MenuItem>,\n            );\n            // clusters of the container management system type\n            envType.clusterDetails.forEach((cluster) => {\n                containerMngEnvMenuItems.push(\n                    <MenuItem\n                        value={cluster.clusterName}\n                        key={cluster.clusterName}\n                        className={classes.menuItem}\n                    >\n                        {cluster.clusterDisplayName}\n                    </MenuItem>,\n                );\n            });\n        });\n    }\n\n    const authHeader = `${authorizationHeader}: ${prefix}`;\n\n    return (\n        <>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Box>\n                    {securitySchemeType !== 'TEST' && (\n                        <>\n                            <Typography variant='h5' component='h3' color='textPrimary' className={classes.categoryHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.heading'\n                                    defaultMessage='Security'\n                                />\n                            </Typography>\n                            <Box mb={1}>\n                                <Typography variant='body1'>\n                                    <Box display='flex' alignItems='center'>\n                                        {(selectedKMObject && selectedKMObject.enabled) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.one'\n                                                defaultMessage='The Resident Key Manager is selected for try out console.'\n                                            />\n                                        )}\n                                        {(selectedKMObject && !selectedKMObject.enabled) && (\n                                            <>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.TryOutController.default.km.msg.two'\n                                                        defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'But the default key manager is disabled at the moment.'}\n                                                    />\n                                                </div>\n                                            </>\n                                        )}\n                                        {(selectedKMObject && selectedKMObject.length === 0) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.three'\n                                                defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'Something went wrong while selecting the default Key manager.'}\n                                            />\n                                        )}\n                                    </Box>\n                                </Typography>\n                            </Box>\n                            <Typography variant='h6' component='h4' color='textSecondary' className={classes.tryoutHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.type.heading'\n                                    defaultMessage='Security Type'\n                                />\n                            </Typography>\n                        </>\n                    )}\n                    {((isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && showSecurityType) && (\n                        <FormControl component='fieldset'>\n                            <RadioGroup\n                                name='securityScheme'\n                                value={securitySchemeType}\n                                onChange={handleChanges}\n                                row\n                            >\n                                <FormControlLabel\n                                    value='OAUTH'\n                                    disabled={!isOAuthEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.oauth'\n                                            defaultMessage='OAuth'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='API-KEY'\n                                    disabled={!isApiKeyEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.apikey'\n                                            defaultMessage='API Key'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='BASIC'\n                                    disabled={!isBasicAuthEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.basic'\n                                            defaultMessage='Basic'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                </Box>\n            </Grid>\n            {!isPrototypedAPI\n                && (\n                    <Grid xs={12} md={12} item>\n                        <Box display='block'>\n                            {user && subscriptions\n                                && subscriptions.length > 0 && securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                                && (\n                                    <SelectAppPanel\n                                        subscriptions={subscriptions}\n                                        handleChanges={handleChanges}\n                                        selectedApplication={selectedApplication}\n                                        selectedKeyManager={selectedKeyManager}\n                                        selectedKeyType={selectedKeyType}\n                                        keyManagers={keyManagers}\n                                    />\n                                )}\n                            {subscriptions && subscriptions.length === 0 && securitySchemeType !== 'TEST' ? (\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    <Box mb={1} alignItems='center'>\n                                        <Typography variant='body1'>\n                                            <Box display='flex'>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                        defaultMessage='Please subscribe to an application'\n                                                    />\n                                                </div>\n                                            </Box>\n                                        </Typography>\n                                    </Box>\n                                </Grid>\n                            ) : (\n                                (!ksGenerated && securitySchemeType === 'OAUTH') && (\n                                    <Grid x={8} md={6} className={classes.tokenType} item>\n                                        <Box mb={1} alignItems='center'>\n                                            <Typography variant='body1'>\n                                                <Box display='flex'>\n                                                    <WarningIcon className={classes.warningIcon} />\n                                                    <div>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.ApiConsole.ApiConsole.keys.not.generated'\n                                                            defaultMessage={'Consumer key and secret not generated for the selected'\n                                                            + ' application on the {what} environment. '}\n                                                            values={{ what: selectedKeyType }}\n                                                        />\n                                                    </div>\n                                                </Box>\n                                            </Typography>\n                                        </Box>\n                                    </Grid>\n                                )\n                            )}\n                            <Box display='block' justifyContent='center'>\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    {securitySchemeType === 'BASIC' && (\n                                        <>\n                                            <Grid x={12} md={12} item>\n                                                <TextField\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='username'\n                                                            defaultMessage='Username'\n                                                        />\n                                                    )}\n                                                    name='username'\n                                                    onChange={handleChanges}\n                                                    value={username || ''}\n                                                    fullWidth\n                                                />\n                                                <TextField\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='password'\n                                                            defaultMessage='Password'\n                                                        />\n                                                    )}\n                                                    name='password'\n                                                    onChange={handleChanges}\n                                                    value={password || ''}\n                                                    fullWidth\n                                                    InputProps={{\n                                                        autoComplete: 'new-password',\n                                                    }}\n                                                />\n                                            </Grid>\n                                        </>\n                                    )}\n\n                                    {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                        <TextField\n                                            fullWidth\n                                            margin='normal'\n                                            variant='outlined'\n                                            label={(\n                                                <FormattedMessage\n                                                    id='access.token'\n                                                    defaultMessage='Access Token'\n                                                />\n                                            )}\n                                            name='accessToken'\n                                            onChange={handleChanges}\n                                            type={showToken ? 'text' : 'password'}\n                                            value={tokenValue || ''}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    id='enter.access.token'\n                                                    defaultMessage='Enter access Token'\n                                                />\n                                            )}\n                                            id='accessTokenInput'\n                                            InputProps={{\n                                                autoComplete: 'new-password',\n                                                endAdornment: (\n                                                    <InputAdornment position='end'>\n                                                        <IconButton\n                                                            edge='end'\n                                                            aria-label='Toggle token visibility'\n                                                            onClick={handleClickShowToken}\n                                                        >\n                                                            {showToken ? <Icon>visibility_off</Icon>\n                                                                : <Icon>visibility</Icon>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                ),\n                                                startAdornment: (\n                                                    <InputAdornment\n                                                        style={{\n                                                            minWidth: (authHeader.length * 7),\n                                                        }}\n                                                        position='start'\n                                                    >\n                                                        {`${authorizationHeader}: ${prefix}`}\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                        />\n                                    )}\n                                    {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                        <>\n                                            <Button\n                                                onClick={securitySchemeType === 'API-KEY' ? generateApiKey\n                                                    : generateAccessToken}\n                                                variant='contained'\n                                                className={classes.genKeyButton}\n                                                disabled={!user || (subscriptions && subscriptions.length === 0)\n                                                    || (!ksGenerated && securitySchemeType === 'OAUTH')}\n                                            >\n                                                {isUpdating && (\n                                                    <CircularProgress size={15} />\n                                                )}\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiCOnsole.generate.test.key'\n                                                    defaultMessage='GET TEST KEY '\n                                                />\n                                            </Button>\n                                            <Tooltip\n                                                placement='right'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.TryOutConsole.access.token.tooltip'\n                                                        defaultMessage={\n                                                            'You can use your existing Access Token or '\n                                                            + 'you can generate a new Test Key.'\n                                                        }\n                                                    />\n                                                )}\n                                            >\n                                                <Box m={1} mt={2}>\n                                                    <IconButton\n                                                        aria-label='Use existing Access Token or generate a new Test Key'\n                                                    >\n                                                        <HelpOutline />\n                                                    </IconButton>\n                                                </Box>\n                                            </Tooltip>\n                                        </>\n                                    )}\n                                </Grid>\n                            </Box>\n                            <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                                <Grid xs={12} md={6} item>\n                                    {((environments && environments.length > 0) || (containerMngEnvMenuItems.length > 0)\n                                        || (labels && labels.length > 0))\n                                        && (\n                                            <>\n                                                <Typography\n                                                    variant='h5'\n                                                    component='h3'\n                                                    color='textPrimary'\n                                                    className={classes.categoryHeading}\n                                                >\n                                                    <FormattedMessage\n                                                        id='api.console.gateway.heading'\n                                                        defaultMessage='Gateway'\n                                                    />\n                                                </Typography>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    label={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Environment'\n                                                            id='Apis.Details.ApiConsole.environment'\n                                                        />\n                                                    )}\n                                                    value={selectedEnvironment || (environments && environments[0])}\n                                                    name='selectedEnvironment'\n                                                    onChange={handleChanges}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Please select an environment'\n                                                            id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                        />\n                                                    )}\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                >\n                                                    {environments && environments.length > 0 && (\n                                                        <MenuItem value='' disabled className={classes.menuItem}>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='api.gateways'\n                                                                    defaultMessage='API Gateways'\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {environments && (\n                                                        environments.map((env) => (\n                                                            <MenuItem\n                                                                value={env}\n                                                                key={env}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {env}\n                                                            </MenuItem>\n                                                        )))}\n                                                    {containerMngEnvMenuItems}\n                                                    {labels && labels.length > 0 && (\n                                                        <MenuItem value='' disabled>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='gateways'\n                                                                    defaultMessage='Gateways'\n                                                                    className={classes.menuItem}\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {labels && (\n                                                        labels.map((label) => (\n                                                            <MenuItem\n                                                                value={label}\n                                                                key={label}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {label}\n                                                            </MenuItem>\n                                                        ))\n                                                    )}\n                                                </TextField>\n                                            </>\n                                        )}\n                                </Grid>\n                            </Box>\n                        </Box>\n                    </Grid>\n                )}\n            {(isPrototypedAPI && !api.enableStore)\n                    && (\n                        <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                            <Grid xs={12} md={6} item>\n                                {((environments && environments.length > 0) || (containerMngEnvMenuItems.length > 0)\n                                        || (labels && labels.length > 0))\n                                        && (\n                                            <>\n                                                <Typography\n                                                    variant='h5'\n                                                    component='h3'\n                                                    color='textPrimary'\n                                                    className={classes.categoryHeading}\n                                                >\n                                                    <FormattedMessage\n                                                        id='api.console.gateway.heading'\n                                                        defaultMessage='Gateway'\n                                                    />\n                                                </Typography>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    label={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Environment'\n                                                            id='Apis.Details.ApiConsole.environment'\n                                                        />\n                                                    )}\n                                                    value={selectedEnvironment || (environments && environments[0])}\n                                                    name='selectedEnvironment'\n                                                    onChange={handleChanges}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Please select an environment'\n                                                            id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                        />\n                                                    )}\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                >\n                                                    {environments && environments.length > 0 && (\n                                                        <MenuItem value='' disabled className={classes.menuItem}>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='api.gateways'\n                                                                    defaultMessage='API Gateways'\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {environments && (\n                                                        environments.map((env) => (\n                                                            <MenuItem\n                                                                value={env}\n                                                                key={env}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {env}\n                                                            </MenuItem>\n                                                        )))}\n                                                    {containerMngEnvMenuItems}\n                                                    {labels && labels.length > 0 && (\n                                                        <MenuItem value='' disabled>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='gateways'\n                                                                    defaultMessage='Gateways'\n                                                                    className={classes.menuItem}\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {labels && (\n                                                        labels.map((label) => (\n                                                            <MenuItem\n                                                                value={label}\n                                                                key={label}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {label}\n                                                            </MenuItem>\n                                                        ))\n                                                    )}\n                                                </TextField>\n                                            </>\n                                        )}\n                            </Grid>\n                        </Box>\n                    )}\n        </>\n    );\n}\n\nTryOutController.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(makeStyles)(TryOutController);\n"],"sourceRoot":""}