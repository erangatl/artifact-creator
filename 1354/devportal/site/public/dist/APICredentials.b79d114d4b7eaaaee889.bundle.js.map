{"version":3,"sources":["webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./node_modules/@material-ui/icons/PlayForWork.js","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx","webpack:///./source/src/app/components/Shared/ScopeValidation.jsx"],"names":["definition","number","Joi","integer","url","string","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","constructor","super","this","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","then","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","body","Subscriptions","put_subscriptions__subscriptionId_","useStyles","makeStyles","theme","appContent","margin","spacing","button","color","palette","getContrastText","primary","main","genericDisplayDialog","props","handleClick","heading","caption","buttonText","classes","className","type","dialogContainer","variant","component","gutterBottom","resourcePath","resourcePaths","APPLICATIONS","resourceMethod","resourceMethods","POST","onClick","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","React","useState","handleClose","handleChange","event","Button","startIcon","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","direction","item","xs","TextField","name","formatMessage","e","fullWidth","FormControl","FormHelperText","DialogActions","ScopeValidation","APPLICATION_GENERATE_KEYS","Typography","propTypes","PropTypes","shape","isRequired","func","bool","defaultProps","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","useEffect","TableRow","TableCell","scope","leftCol","Box","maxWidth","multiple","root","removeHelperPadding","select","helperText","tooltip","values","map","MenuItem","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","notFound","instanceOf","any","injectIntl","withStyles","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","marginLeft","quotaHelp","position","checkboxWrapper","display","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","field","newRequest","cloneDeep","newGrantTypes","keyManager","includes","callbackUrlLocal","callBackHasErrors","filter","clonedAdditionalProperties","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","propPrefix","keyType","toLowerCase","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","error","placeholder","length","validating","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","code","background","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","Fragment","ViewKeys","Component","accessTokenRequest","setState","that","elementName","data","state","preventDefault","showToken","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert1","Alert","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","componentDidMount","getKeys","componentDidUpdate","prevProps","render","fullScreen","tokenType","summary","Loading","csCkKeys","size","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","paper","marginTop","marginRight","keyState","states","REJECTED","noKeysRoot","backgroundImage","app","context","custom","overviewPage","keysBackground","height","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","TabPanel","children","index","other","role","hidden","p","node","StyledTabs","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","StyledTab","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","push","selectdKM","mode","selectdKMGrants","validatingState","str","replace","txt","charAt","toUpperCase","substr","hasError","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","mb","keyTitle","toTitleCase","InlineMessage","username","AuthManager","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","indicatorColor","textColor","handleTabChange","keymanager","displayName","tabPanel","subTitle","ml","m","enableTokenHashing","setValidating","generateWrapper","warningIcon","kmName","keyConfigWrapper","muiFormGroupRoot","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","SINGLE_SUBSCRIPTION","DELETE","classNames","activeLink","colSpan","selectedWrapper","textAlign","A200","withTheme","Credentials","expanded","subscriptionRequest","throttlingPolicyList","isSubscribing","api","applicationsAvailable","newSubscriptionRequest","tiers","tierName","apiType","Api","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","md","lg","handleExpandClick","titleSub","isSubscriptionAvailable","Link","Paper","elevation","descWrapper","lifeCycleStatus","GenericDisplayDialog","goToWizard","generateCredentialWrapper","SUBSCRIPTIONS","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","ApiContext","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","border","borderRadius","addLinkWrapper","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","SINGLE_APPLICATION","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","PUT","GET","hasScope","hasScopes","haveScope"],"mappings":"2FAAA,uBAoBA,MAAMA,EAAa,CACfC,OAAQC,IAAID,SAASE,UACrBC,IAAKF,IAAIG,SAASC,MAAMC,MAAM,IAC9BC,UAAWN,IAAIG,SAASI,GAAG,CACzBC,QAAS,CACP,OACA,QAEFC,KAAM,cAIGX,O,kCChCf,6DAyBe,MAAMY,UAAqBC,IAEtCC,cACIC,QACAC,KAAKC,QAAS,IAAIC,KAAmBC,aAAaC,IAAMC,iBAAiBC,OAAOL,OAUpFM,iBAAiBC,EAAOC,GAA2B,IAAZC,EAAY,uDAAJ,GAM3C,OALkBV,KAAKC,OAAOU,KAAMV,GACzBA,EAAOW,KAAP,cAA6BC,kBAChC,CAAEL,MAAOA,EAAOC,cAAeA,EAAeC,WAU1DI,gBAAgBC,GAMZ,OAL4Bf,KAAKC,OAAOU,KAAMV,GACnCA,EAAOW,KAAP,cAA6BI,mCAChC,CAAEC,eAAgBF,KAS9BG,uBAAuBH,GAQnB,OAPuBf,KAAKC,OAAOU,KAAKV,GAC7BA,EAAOW,KAAK,oBAAoBO,yCACnC,CACIF,eAAgBF,KAYhCK,mBAAmBH,GAQf,OAPqCjB,KAAKC,OAAOU,KAAMV,GAC5CA,EAAOW,KAAP,cAA6BS,sCAChC,CACIJ,eAAgBA,KAahCK,mBAAmBb,EAAeD,EAAOS,EAAgBM,EAAkBC,EAAQC,GAc/E,OAbqCzB,KAAKC,OAAOU,KAAMV,IACvD,IAAIyB,EAAmB,KAMnB,MAAMC,EAAU,CACZV,eAAgBA,EAChBW,KANJF,EAAmB,CACfjB,gBAAeD,QAAOS,iBAAgBM,iBAAkBA,EAAkBC,SAAQC,8BAOtF,OAAOxB,EAAOW,KAAKiB,cAAcC,mCAAmCH,EAAS,CAAE,eAAgB,0B,kCC7G3G,oEAyBA,MAAMI,EAAYC,YAAYC,IAAD,CACzBC,WAAY,CACRC,OAAQF,EAAMG,QAAQ,IAE1BC,OAAQ,CACJC,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQE,QAAQC,UAiCpDC,IA7BeC,IAC1B,MAAM,YACFC,EADE,QACWC,EADX,QACoBC,EADpB,WAC6BC,GAC/BJ,EACEK,EAAUlB,IAChB,OACI,yBAAKmB,UAAWD,EAAQf,YACpB,kBAAC,IAAD,CAAeiB,KAAK,OAAOD,UAAWD,EAAQG,iBAC1C,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,MAC9BR,GAEL,kBAAC,IAAD,CAAYO,QAAQ,QAAQE,cAAY,GACnCR,GAEL,kBAAC,IAAD,CAAiBS,aAAcC,IAAcC,aAAcC,eAAgBC,IAAgBC,MACvF,kBAAC,IAAD,CACIR,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQZ,OACnByB,QAASjB,GAERG,Q,kCCrDzB,IAAIe,EAAyB,EAAQ,KAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASN,EAAuB,EAAQ,IAIxCO,GAAW,EAFMP,EAAuB,EAAQ,MAElBK,SAASC,EAAOD,QAAQG,cAAc,OAAQ,CAC9EC,EAAG,kHACD,eAEJN,EAAQE,QAAUE,G,mRCgBlB,SAASG,EAAkB7B,GACvB,MAAM,YACF8B,EADE,eACWC,EADX,SAC2BC,EAD3B,YACqCC,EADrC,IACkDC,EADlD,sBACuDC,EADvD,eAC8EC,GAChFpC,EACEqC,EAAOC,eAENC,EAAMC,GAAWC,IAAMC,UAAS,GAMjCC,EAAc,KAChBH,GAAQ,IAOZ,SAASI,EAAaC,GACdb,GACAA,EAASa,GAGjB,OACI,oCACI,kBAACC,EAAA,EAAD,CACIrC,QAAQ,WACRf,MAAM,YACNqD,UAAW,kBAAC,IAAD,MACX7B,QAvBY,KACpBsB,GAAQ,IAuBAQ,SAAUZ,GAEV,kBAAC,IAAD,CACIa,eAAe,8BACfC,GAAG,wDAGX,kBAACC,EAAA,EAAD,CAAQZ,KAAMA,EAAMa,QAAST,EAAaU,kBAAgB,qBACtD,kBAACC,EAAA,EAAD,CAAaJ,GAAG,qBAAoB,kBAAC,IAAD,CAChCD,eAAe,8BACfC,GAAG,wDAEP,kBAACK,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,EAAGkE,UAAU,UAClC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CACIX,GAAG,wBACHY,KAAK,sBACLpG,MAAO2E,EAAK0B,cAAc,CACtBd,eAAgB,eAChBC,GAAI,sDAER3B,MAAOO,EACPE,SAAUgC,GAAKpB,EAAaoB,GAC5BzE,OAAO,SACP0E,WAAS,EACTjB,UAAWf,EACXxB,QAAQ,aAEZ,kBAACyD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAgBjB,GAAG,4BACf,kBAAC,IAAD,CACIA,GAAG,0DACHD,eAAe,6CAK/B,kBAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CACIX,GAAG,2BACHY,KAAK,yBACLpG,MAAO2E,EAAK0B,cAAc,CACtBd,eAAgB,kBAChBC,GAAI,yDAER3B,MAAOQ,EACPC,SAAUgC,GAAKpB,EAAaoB,GAC5BzE,OAAO,SACP0E,WAAS,EACTjB,UAAWf,EACXxB,QAAQ,aAEZ,kBAACyD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAgBjB,GAAG,+BACf,kBAAC,IAAD,CACIA,GAAG,sEACHD,eAAe,kDAQvC,kBAACmB,EAAA,EAAD,KACI,kBAACtB,EAAA,EAAD,CAAQ5B,QAASyB,EAAajD,MAAM,WAChC,kBAAC,IAAD,CACIuD,eAAe,SACfC,GAAG,iDAGX,kBAACmB,EAAA,EAAD,CACIzD,aAAcC,IAAcyD,0BAC5BvD,eAAgBC,IAAgBC,MAE9BgB,EAiCM,kBAACa,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNwB,QAAS,IAAMiB,KAGXD,EAEQ,kBAAC,IAAD,CACIe,eAAe,SACfC,GAAG,qEAIP,kBAAC,IAAD,CACID,eAAe,UACfC,GAAG,uEAhD3B,oCACI,kBAACJ,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNwB,QAAS,IAAMiB,IACfa,UAAWf,GAGPC,EAEQ,kBAAC,IAAD,CACIe,eAAe,SACfC,GAAG,sEAKP,kBAAC,IAAD,CACID,eAAe,UACfC,GAAG,uEAKvB,kBAACqB,EAAA,EAAD,CAAY9D,QAAQ,WAChB,kBAAC,IAAD,CACIwC,eAAe,8BACfC,GAAG,sEAiC3CrB,EAAkB2C,UAAY,CAC1BnC,KAAMoC,IAAUC,MAAM,IAAIC,WAC1B3C,SAAUyC,IAAUG,KAAKD,WACzB7C,YAAa2C,IAAUhI,OACvBsF,eAAgB0C,IAAUhI,OAC1BwF,YAAawC,IAAUhI,OACvByF,IAAKuC,IAAUC,MAAM,IAAIC,WACzBxC,sBAAuBsC,IAAUG,KAAKD,WACtCvC,eAAgBqC,IAAUI,MAG9BhD,EAAkBiD,aAAe,CAC7BhD,YAAa,GACbC,eAAgB,GAChBE,aAAa,EACbG,gBAAgB,GAGLP,Q,uRCxLf,MAwCMkD,GAAoB/E,IAEtB,MAAM,QACFK,EADE,OACO2E,EADP,YACe/C,EADf,cAC4BgD,EAD5B,aAC2CrC,GAC7C5C,GAEGkF,EAAeC,GAAoBzC,mBAASuC,GAQ7CG,EAA0BvC,IAC5B,MAAQwC,OAAQC,GAAkBzC,EAClCsC,EAAiBG,EAAc/D,OAC/BqB,EAAa,uBAAwBC,IAQzC,OAHA0C,oBAAU,KACNJ,EAAiBF,IAClB,CAACA,IAEA,oCACI,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACpDX,EAAOtH,OAEZ,kBAAC+H,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAKC,SAAU,KACE,WAAhBb,EAAOzE,OAAyC,IAApByE,EAAOc,SAChC,kBAACjC,EAAA,EAAD,CACIxD,QAAS,CACL0F,KAAM1F,EAAQ2F,qBAElB/B,WAAS,EACTf,GAAI8B,EAAOlB,KACXmC,QAAM,EACNvI,MAAOsH,EAAOtH,MACd6D,MAAO2D,EACPpB,KAAMkB,EAAOlB,KACb9B,SAAUgC,GAAKoB,EAAuBpB,GACtCkC,WACI,kBAAC3B,EAAA,EAAD,CAAY9D,QAAQ,WACfuE,EAAOmB,SAGhB5G,OAAO,QACPkB,QAAQ,WACRuC,UAAWf,GAEV+C,EAAOoB,OAAOC,IAAInE,GACf,kBAACoE,GAAA,EAAD,CAAUpE,IAAKA,EAAKX,MAAOW,GACtBA,KAII,WAAhB8C,EAAOzE,OAAyC,IAApByE,EAAOc,SACpC,oCACI,kBAAC5B,EAAA,EAAD,CAAazD,QAAQ,WAAWH,UAAWD,EAAQkG,YAAatC,WAAS,GACrE,kBAACuC,EAAA,EAAD,CAAYtD,GAAG,sBAAsB8B,EAAOtH,OAC5C,kBAAC+I,GAAA,EAAD,CACIC,QAAQ,qBACRxD,GAAG,wBACH3D,OAAO,QACPoH,cAAY,EACZ7C,KAAMkB,EAAOlB,KACbgC,UAAQ,EACRvE,MAAO2D,EACPlD,SAAUgC,GAAKoB,EAAuBpB,GACtC4C,MAAO,kBAACC,GAAA,EAAD,CAAO3D,GAAG,0BACjB4D,YAAaC,GACT,yBAAKzG,UAAWD,EAAQ2G,OACnBD,EAASV,IAAI9E,GACV,kBAAC0F,GAAA,EAAD,CAAM/E,IAAKX,EAAO7D,MAAO6D,EAAOjB,UAAWD,EAAQ6G,SAI/DhB,WACI,kBAAC3B,EAAA,EAAD,CAAY9D,QAAQ,WACfuE,EAAOmB,SAGhBzI,MAAOsH,EAAOtH,OAEbsH,EAAOoB,OAAOC,IAAInE,GACf,kBAACoE,GAAA,EAAD,CAAUpE,IAAKA,EAAKX,MAAOW,GACvB,kBAACiF,EAAA,EAAD,CAAUC,QAASlC,EAAcmC,QAAQnF,IAAQ,IACjD,kBAACoF,EAAA,EAAD,CAAczH,QAASqC,QAOvC,kBAACqC,EAAA,EAAD,CAAY9D,QAAQ,WACfuE,EAAOmB,WAGfnB,EAAOzE,KACR,kBAACsD,EAAA,EAAD,CACIxD,QAAS,CACL0F,KAAM1F,EAAQ2F,qBAElB/B,WAAS,EACTf,GAAI8B,EAAOlB,KACXpG,MAAOsH,EAAOtH,MACd6D,MAAO2D,EACPpB,KAAMkB,EAAOlB,KACb9B,SAAUgC,GAAKoB,EAAuBpB,GACtCkC,WACI,kBAAC3B,EAAA,EAAD,CAAY9D,QAAQ,WACfuE,EAAOmB,SAGhB5G,OAAO,QACPkB,QAAQ,WACRuC,UAAWf,UA8BvC8C,GAAiBD,aAAe,CAC5ByC,UAAU,GAGdxC,GAAiBP,UAAY,CACzBnE,QAASoE,IAAU+C,WAAWpG,QAAQuD,WACtCM,cAAeR,IAAUgD,IAAI9C,WAC7B1C,YAAawC,IAAUI,KAAKF,WAC5B/B,aAAc6B,IAAUG,KAAKD,WAC7BK,OAAQP,IAAUgD,IAAI9C,WACtB4C,SAAU9C,IAAUI,KACpBxC,KAAMoC,IAAUC,MAAM,CAAEX,cAAeU,IAAUG,OAAQD,YAG9C+C,mBAAWC,YA5MXtI,IAAS,CACpB6E,YAAa,CACT0D,WAAYvI,EAAMG,QAAQ,GAC1BqI,cAAexI,EAAMG,QAAQ,GAC7BsI,YAAa,EACbC,MAAO,QAEXC,eAAgB,CACZC,QAAS5I,EAAMG,QAAQ,GACvBuI,MAAO,QAEXtI,OAAQ,CACJyI,WAAY7I,EAAMG,QAAQ,IAE9B2I,UAAW,CACPC,SAAU,YAEdC,gBAAiB,CACbC,QAAS,QAEbC,sBAAuB,CACnBD,QAAS,OACTE,cAAe,OAEnBC,MAAO,CACHD,cAAe,OAEnBxC,oBAAqB,CACjB,MAAO,CACHzG,OAAQ,cA+KMoI,CAAmB5C,KCzM7C,MAkEM2D,GAAoB1I,IACtB,MAAO2I,EAAWC,GAAgBlG,oBAAS,IACpCmG,EAAgBC,GAAqBpG,oBAAS,GAC/CL,EAAOC,eACP,QACFjC,EADE,SACOkH,EADP,YACiBtF,EADjB,iBAC8B8G,EAD9B,iBACgDC,EADhD,WACkEC,EADlE,eAC8EC,EAD9E,cAC8FC,GAChGnJ,GACE,mBACFoJ,EADE,YACkBC,GACpBJ,EACJ,IAAI,yBACAK,EADA,oBAC0BC,EAD1B,YAC+CC,EAD/C,qBAC4DC,EAD5D,2BAEAC,EAFA,uBAE4BC,EAF5B,sBAEoDC,EAFpD,sBAE2EC,EAF3E,GAGA3G,EAHA,KAGIY,EAHJ,eAGUgG,EAHV,cAG0BC,EAH1B,KAGyCxJ,EAHzC,iBAG+CyJ,GAC/CjB,EAMJ,MA6BMnG,EAAe,CAACqH,EAAOpH,KACzB,MAAMqH,EAAaC,IAAUlB,IACrB5D,OAAQC,GAAkBzC,EAClC,IAAIuH,EAAgB,IAAIF,EAAWd,oBAGnC,OAFAc,EAAWG,WAAavG,EAEhBmG,GACJ,IAAK,eACGG,EAAcE,SAAS,aAAeF,EAAcE,SAAS,wBA1BlDC,KACE,KAArBA,GACArB,GAAe,GACfJ,EAAkBzG,EAAK0B,cAAc,CACjCd,eAAgB,0FAChBC,GAAI,8EAGR4F,GAAkB,GAClBI,GAAe,KAkBPsB,CAAkBlF,EAAc/D,OAEpC2I,EAAWb,YAAc/D,EAAc/D,MACvC,MACJ,IAAK,YACG+D,EAAc8B,QACdgD,EAAgB,IAAIA,EAAe9E,EAAcpC,KAEjDkH,EAAgBF,EAAWd,mBAAmBqB,OAAQ9G,GAASA,IAAS2B,EAAcpC,IAC7D,aAArBoC,EAAcpC,IAA0C,uBAArBoC,EAAcpC,KACjDgH,EAAWb,YAAc,GACzBP,GAAkB,GAClBI,GAAe,KAGvBgB,EAAWd,mBAAqBgB,EAChC,MACJ,IAAK,uBACD,MAAMM,EAA6BR,EAAWT,qBAC9CiB,EAA2BpF,EAAcxB,MAAQwB,EAAc/D,MAC/D2I,EAAWT,qBAAuBiB,EAK1C1B,EAAiBkB,IAGfS,EAAS,KACX/B,GAAa,GAKbgC,YAHe,WACXhC,GAAa,KAEE,MAGjBiC,EAAoB7F,IACtB,MAAM,qBAAEyE,GAAyBR,EAC3B6B,KAAwBrB,IAAwBA,EAAqBzE,EAAOlB,OAClF,IAAIiH,EAAe/F,EAAOxD,QAI1B,OAHIwD,EAAOc,UAAoC,iBAAjBiF,GAA8C,KAAjBA,IACvDA,EAAe,IAEZD,EAAqBrB,EAAqBzE,EAAOlB,MAAQiH,GASpE,GAAIxD,EACA,OAAO,kBAACyD,EAAA,EAAD,MAEX,MAAMC,EA9F0B,EAACC,EAAYC,KACzC,MAAMC,EAAqB,GAO3B,OANAF,EAAWG,QAASC,IAChBF,EAAmBE,GAAaH,EAAwBG,GACnDH,EAAwBG,KACzBF,EAAmBE,GAAaA,KAGjCF,GAsFqBG,CAC5BhC,EACAiC,IAASN,YAIPO,EAAaxC,EAAWyC,QAAQC,cAItC,OAHA5B,EAAgBN,EAAsB,GAAEgC,qBAAgC1B,EACxED,EAAiBL,EAAsB,GAAEgC,sBAAiC3B,EAGtE,oCACI,kBAAClE,EAAA,EAAD,CAAK0C,QAAQ,OAAOsD,WAAW,UAC3B,kBAACC,EAAA,EAAD,CAAOvL,UAAWD,EAAQyL,OACtB,kBAACC,EAAA,EAAD,KACMhC,GAAmC,KAAlBA,GACf,kBAACvE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACrD,kBAAC,IAAD,CACI1C,eAAe,iBACfC,GAAG,8DAGX,kBAACuC,EAAA,EAAD,KACKsE,EACD,kBAACiC,EAAA,EAAD,CACIC,MACItD,EACMtG,EAAK0B,cAAc,CACjBd,eAAgB,SAChBC,GAAI,+CAENb,EAAK0B,cAAc,CACjBd,eAAgB,oBAChBC,GAAI,0DAGhBgJ,UAAU,QACV5L,UAAWD,EAAQ8L,WAEnB,kBAAC,IAAD,CACIC,KAAMrC,EACNY,OAAQA,GAER,kBAAC0B,EAAA,EAAD,CACIC,aAAW,oBACXjM,QAAS,CAAE0F,KAAM1F,EAAQkM,aAEzB,kBAACC,EAAA,EAAD,CAAM9M,MAAM,aAAZ,kBAOtBoK,GAAqC,KAAnBA,GAChB,kBAACtE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACrD,kBAAC,IAAD,CACI1C,eAAe,kBACfC,GAAG,+DAGX,kBAACuC,EAAA,EAAD,KACKqE,EACD,kBAACkC,EAAA,EAAD,CACIC,MACItD,EACMtG,EAAK0B,cAAc,CACjBd,eAAgB,SAChBC,GAAI,+CAENb,EAAK0B,cAAc,CACjBd,eAAgB,oBAChBC,GAAI,0DAGhBgJ,UAAU,QACV5L,UAAWD,EAAQ8L,WAEnB,kBAAC,IAAD,CACIC,KAAMtC,EACNa,OAAQA,GAER,kBAAC0B,EAAA,EAAD,CACIC,aAAW,oBACXjM,QAAS,CAAE0F,KAAM1F,EAAQkM,aAEzB,kBAACC,EAAA,EAAD,CAAM9M,MAAM,aAAZ,kBAOtBsK,GAAyC,KAArBA,GAClB,kBAACxE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACrD,kBAAC,IAAD,CACI1C,eAAe,qBACfC,GAAG,iEAGX,kBAACuC,EAAA,EAAD,KACKuE,EACD,kBAACgC,EAAA,EAAD,CACIC,MACItD,EACMtG,EAAK0B,cAAc,CACjBd,eAAgB,SAChBC,GAAI,+CAENb,EAAK0B,cAAc,CACjBd,eAAgB,oBAChBC,GAAI,0DAGhBgJ,UAAU,QACV5L,UAAWD,EAAQ8L,WAEnB,kBAAC,IAAD,CACIC,KAAMpC,EACNW,OAAQA,GAER,kBAAC0B,EAAA,EAAD,CACIC,aAAW,oBACXjM,QAAS,CAAE0F,KAAM1F,EAAQkM,aAEzB,kBAACC,EAAA,EAAD,CAAM9M,MAAM,aAAZ,kBAOxB,kBAAC8F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACrD,kBAAC,IAAD,CACIzC,GAAG,kDACHD,eAAe,iBAIvB,kBAACwC,EAAA,EAAD,KACI,yBAAKnF,UAAWD,EAAQkI,uBACnBnH,OAAOqL,KAAKxB,GAAyB5E,IAAKnE,IACvC,MAAMX,EAAQ0J,EAAwB/I,GACtC,OACI,kBAACwK,EAAA,EAAD,CACIC,QACI,kBAACxF,EAAA,EAAD,CACIjE,GAAIhB,EACJkF,WAAYgC,IACDA,EAAmBkB,SAASpI,IACvCF,SAAWgC,GAAMpB,EAAa,YAAaoB,GAC3CzC,MAAOA,EACPyB,UAAWf,EACXvC,MAAM,YAGdhC,MAAO6D,EACPW,IAAKA,OAKrB,kBAACiC,EAAA,EAAD,KACI,kBAAC,IAAD,CACIlB,eAAiB,4OAGjBC,GAAG,+DAMnB,kBAACsC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAW/E,UAAU,KAAKgF,MAAM,MAAMpF,UAAWD,EAAQsF,SACrD,kBAAC,IAAD,CACI1C,eAAe,eACfC,GAAG,4DAIX,kBAACuC,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,CAAKC,SAAU,KACX,kBAAChC,EAAA,EAAD,CACItE,OAAO,QACP2D,GAAG,cACHxF,MACI,kBAAC,IAAD,CACIuF,eAAe,eACfC,GAAG,2DAGX3B,MAAO8H,EACPvF,KAAK,cACL9B,SAAWgC,GAAMpB,EAAa,cAAeoB,GAC7CkC,WAAY2C,GACR,kBAAC,IAAD,CACI5F,eAAiB,oPAGjBC,GAAG,kEAGXzC,QAAQ,WACRuC,UAAWf,GACHmH,IAAuBA,EAAmBkB,SAAS,wBAC/ClB,EAAmBkB,SAAS,YACxCsC,MAAOzD,EACP0D,YAAaxK,EAAK0B,cAAc,CAC5Bd,eAAgB,uBAChBC,GAAI,sDAERe,WAAS,OAKxBqF,EAAyBwD,OAAS,GAAKxD,EAAyBjD,IAAKrB,GAClE,kBAAC,GAAD,CACIA,OAAQA,EACRC,cAAe4F,EAAiB7F,GAChC/C,YAAaA,EACbW,aAAcA,UAS9C8F,GAAiB5D,aAAe,CAC5ByC,UAAU,EACVwF,YAAY,GAEhBrE,GAAiBlE,UAAY,CACzBnE,QAASoE,IAAU+C,WAAWpG,QAAQuD,WACtCsE,WAAYxE,IAAUC,MAAM,CACxB2E,YAAa5E,IAAUhI,OACvB2M,mBAAoB3E,IAAUuI,QAC/BrI,WACH1C,YAAawC,IAAUI,KAAKF,WAC5BsI,gBAAiBxI,IAAUI,KAAKF,WAChCoE,iBAAkBtE,IAAUgD,IAAI9C,WAChC4C,SAAU9C,IAAUI,KACpBqI,mBAAoBzI,IAAUG,KAAKD,WACnCqE,iBAAkBvE,IAAUG,KAAKD,WACjCoI,WAAYtI,IAAUI,MAIX8C,mBAnbCtI,IAAD,CACX6E,YAAa,CACT0D,WAAY,EACZC,cAAexI,EAAMG,QAAQ,GAC7BsI,YAAa,EACbC,MAAO,QAEXC,eAAgB,CACZC,QAAS5I,EAAMG,QAAQ,GACvBuI,MAAO,QAEXtI,OAAQ,CACJyI,WAAY7I,EAAMG,QAAQ,IAE9B2I,UAAW,CACPC,SAAU,YAEdC,gBAAiB,CACbC,QAAS,QAEbC,sBAAuB,CACnBD,QAAS,OACT6E,SAAU,OACV3E,cAAe,MACf4E,WAAY,UAEhB3E,MAAO,CACHD,cAAe,OAEnBxC,oBAAqB,CACjB,MAAO,CACHzG,OAAQ,YAGhB4M,UAAW,CACPkB,OAAQ,UACRpF,QAAS,cAEbsE,WAAY,CACRtE,QAAS,aACT,oBAAqB,CACjBqF,SAAU,KAGlBC,YAAa,CACTxF,MAAO,IACPyF,WAAY,KAEhBC,aAAc,CACVC,aAAc,GACdC,eAAgB,WAChB,OAAQ,CACJ9F,cAAe,EACf+F,aAAc,oBAGtBjI,QAAS,CACLoC,MAAO,OA0XAJ,CAAmBe,I,wFCjclC,MAAMvJ,GAAYC,aAAWC,IAAS,CAClCwO,KAAM,CACF5F,QAAS5I,EAAMG,QAAQ,GACvBkO,aAAcrO,EAAMG,QAAQ,GAC5BsO,WAAYzO,EAAMM,QAAQoO,KAAK,KAC/BrO,MAAO,UACPsO,KAAM,GAEVC,QAAS,CACLvO,MAAO,WAEXwO,cAAe,CACXb,OAAQ,UACRc,eAAgB,aAEpBC,eAAgB,CACZ9F,QAAS,WAQjB,SAAS+F,GAASrO,GACd,MAAMK,EAAUlB,MAGZsN,MAAM,YAAE3K,EAAF,eAAeC,GADnB,KAEFM,EAFE,QAGFqJ,EAHE,iBAIF3C,GACA/I,EACEsO,EAAeC,OAAOC,KAAK1M,EAAc,IAAMC,IAC9C0M,EAAUC,GAAehM,oBAAS,IAClCiM,EAAaC,GAAkBlM,oBAAS,GACzCiI,EAAS,KACXiE,GAAe,GAIfhE,YAHe,WACXgE,GAAe,KAEA,MAGjBC,EAAY,KACdH,GAAaD,KAKX,qBAAEhF,GAAyBV,EACjC,IAAI,cAAEgB,GAAkBhB,EAIxB,OAFAgB,EAAgBN,EAAsB,GADnBiC,EAAQC,iCAC6C5B,EAGpE,kBAAC,IAAM+E,SAAP,KACI,kBAACvK,EAAA,EAAD,KACI,kBAAC,IAAD,CACIrB,GAAG,mCACHD,eAAe,qGAKvB,yBAAK3C,UAAWD,EAAQ+N,gBACpB,yBAAK9N,UAAWD,EAAQwN,MACpB,6BACI,0BAAMvN,UAAWD,EAAQ4N,SAAzB,oBADJ,IAC+DlE,EAC3D,0BAAMzJ,UAAWD,EAAQ4N,SAAzB,QAA8C,IAC7C,6DAEL,6BACI,0BAAM3N,UAAWD,EAAQ4N,SAAzB,QACC,wBACD,uBAAG/M,QAAS2N,EAAWvO,UAAWD,EAAQ6N,eACrCO,EAAW,IAAMH,EAAe,yCAEpC,MAGT,6BACI,kBAACtC,EAAA,EAAD,CACIC,MACI0C,EACMtM,EAAK0B,cAAc,CACjBd,eAAgB,SAChBC,GAAI,uCAENb,EAAK0B,cAAc,CACjBd,eAAgB,oBAChBC,GAAI,kDAGhBgJ,UAAU,SAEV,kBAAC,IAAD,CACIE,KAAO,mBAAkBrC,QACrB,gEACC,yBAAwBuE,KAC7B3D,OAAQA,GAER,kBAAC,KAAD,CAAUjL,MAAM,kBAKhC,kBAAC6E,EAAA,EAAD,KACI,kBAAC,IAAD,CACIrB,GAAG,gDACHD,eAAiB,yJAIzB,yBAAK3C,UAAWD,EAAQ+N,gBACpB,yBAAK9N,UAAWD,EAAQwN,MACpB,6BACI,0BAAMvN,UAAWD,EAAQ4N,SAAzB,oBADJ,IAC+DlE,EAC3D,0BAAMzJ,UAAWD,EAAQ4N,SAAzB,QAA8C,IAC7C,mCAEL,6BACI,0BAAM3N,UAAWD,EAAQ4N,SAAzB,QACC,wBACD,uBAAG/M,QAAS2N,EAAWvO,UAAWD,EAAQ6N,eACrCO,EAAW,IAAMH,EAAe,yCAEpC,MAGT,6BACI,kBAACtC,EAAA,EAAD,CAASC,MAAO0C,EAAc,SAAW,oBAAqBzC,UAAU,SACpE,kBAAC,IAAD,CACIE,KAAO,mBAAkBrC,QACrB,qCACC,yBAAwBuE,KAC7B3D,OAAQA,GAER,kBAAC,KAAD,CAAUjL,MAAM,mBAS5C2O,GAAS7J,UAAY,CACjBnE,QAASoE,IAAUC,MAAM,IAAIC,WAC7B8H,KAAMhI,IAAUC,MAAM,IAAIC,WAC1B3G,KAAMyG,IAAUC,MAAM,IAAIC,YAGf+C,mBAAW2G,I,6rBClF1B,MAAMU,WAAiBtM,IAAMuM,UAIzB9R,YAAY8C,GACR7C,MAAM6C,GADS,mCAyESiP,IACxB7R,KAAK8R,SAAS,CAAED,yBA1ED,iBAiFTnL,IACN1G,KAAK8R,SAAS,CACV,CAACpL,IAAO,IAEZ,MAAMqL,EAAO/R,KACPgS,EAActL,EAMpB8G,WALe,KACXuE,EAAKD,SAAS,CACV,CAACE,IAAc,KAGJ,OA5FJ,2BAmGCC,IAChBjS,KAAK8R,SAAS,CAAE,CAACG,IAAQjS,KAAKkS,MAAMD,OApGrB,iCA2GOxM,IACtBA,EAAM0M,mBA5GS,0BAkHD,KACdnS,KAAK8R,SAAS,CAAE3M,MAAM,EAAMiN,WAAW,MAnHxB,iCAyHM,CAAC1N,EAAa4J,EAAS+D,EAAcC,KAC1DtS,KAAKuS,mBACA5R,KAAM6R,GAAgBA,EAAYC,iBAAiB/N,EAAa4J,EAAS+D,EAAcC,IACvF3R,KAAM+R,IACHC,QAAQC,IAAI,4CAA8CF,GAC1D1S,KAAK8R,SAAS,CACV3M,MAAM,EACN0N,eAAe,EACfC,kBAAmBJ,MAG1BK,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,GACAxB,KAAK8R,SAAS,CAAE3H,UAAU,QA1IvB,8BAkJG,KAClBnK,KAAK8R,SAAS,CAAE3M,MAAM,EAAM6N,UAAU,MAnJvB,sBAyJL,KACVhT,KAAK8R,SAAS,CACV3M,MAAM,EAAO6N,UAAU,EAAOC,UAAU,EAAOJ,eAAe,MA3JnD,8BAkKG,KAClB,MAAM,mBAAEhB,EAAF,WAAsBqB,GAAelT,KAAKkS,OAC1C,YAAEI,EAAF,KAAerN,GAASjF,KAAK4C,MACnC5C,KAAK8R,SAAS,CAAEoB,YAAY,IAC5BlT,KAAKuS,mBACA5R,KAAM6R,GAAgBA,EAAYW,cAC/Bb,EACAT,EAAmBvD,QACnBuD,EAAmBuB,QACnBvB,EAAmBwB,iBAEtB1S,KAAM+R,IACHC,QAAQC,IAAI,gCAAkCF,GAC9C1S,KAAK8R,SAAS,CACVM,WAAW,EACXkB,cAAeZ,EACfa,MAAOb,EAASc,YAChBC,YAAaf,EAASe,YACtBC,kBAAmBhB,EAASiB,eAEhC3T,KAAK8R,SAAS,CAAEoB,YAAY,MAE/BH,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,EACAxB,KAAK8R,SAAS,CAAE3H,UAAU,IACR,MAAX3I,GACNoS,IAAOpE,MAAMA,EAAMpD,aACfnH,EAAK0B,cAAc,CACfb,GAAI,iEACHD,eAAgB,iDAI9B7F,KAAK8R,SAAS,CAAEoB,YAAY,IAC5B,MAAM,SAAER,GAAalD,EACjBkD,GAAYA,EAAS9Q,MACrBiS,IAAMrE,MAAMkD,EAAS9Q,KAAKkS,aA1MvB,2BA+MA,CAACpP,EAAaC,EAAgB0N,EAAcC,EAAazN,KACxE,MAAM,QAAE5B,EAAF,KAAWgC,EAAM8O,aAAa,YAAEC,GAAhC,QAA+C1F,GAAYtO,KAAK4C,OAChE,UAAEqR,EAAF,aAAaC,EAAb,OAA2BC,GAAWnU,KAAKkS,MACjD,OACI,oCACI,kBAAC9L,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,yBAAKtD,UAAWD,EAAQmR,aACpB,kBAAC3N,EAAA,EAAD,CACIX,GAAG,eACH3B,MAAOO,EACPvC,OAAO,QACP7B,MACI,kBAAC,IAAD,CACIwF,GAAG,2CACHD,eAAe,iBAGvBgB,WAAS,EACTxD,QAAQ,WACRgR,WAAY,CACRC,UAAU,EACVC,aACI,kBAACC,GAAA,EAAD,CAAgBxJ,SAAS,OACrB,kBAAC4D,EAAA,EAAD,CACIC,MACIoF,EACMhP,EAAK0B,cAAc,CACjBd,eAAgB,SAChBC,GAAI,uCAENb,EAAK0B,cAAc,CACjBd,eAAgB,oBAChBC,GAAI,wCAGhBgJ,UAAU,SAEV,kBAAC,IAAD,CACIE,KAAMtK,EACN6I,OAAQ,IAAMvN,KAAKuN,OAAO,aAC1BtK,QAAS,CAAE0F,KAAM1F,EAAQkM,aAEzB,kBAACF,EAAA,EAAD,CAAYC,aAAW,oBAAoBjM,QAAS,CAAE0F,KAAM1F,EAAQkM,aAChE,kBAACC,EAAA,EAAD,CAAM9M,MAAM,aAAZ,qBAWhC,kBAACwE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAgBjB,GAAG,4BACf,kBAAC,IAAD,CACIA,GAAG,iDACHD,eAAe,uCAK/B,kBAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,yBAAKtD,UAAWD,EAAQmR,aAClBJ,EA4CM,kBAACtO,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQZ,OACnByB,QAAS,IAAM9D,KAAKyU,uBAAuB/P,EAAa4J,EAAS+D,EAAcC,GAC/E1M,UAAWf,GAEX,kBAAC,IAAD,CACIgB,eAAe,6BACfC,GAAG,mEApDf,kBAACW,EAAA,EAAD,CACIX,GAAG,kBACHxF,MACI,kBAAC,IAAD,CACIwF,GAAG,8CACHD,eAAe,oBAGvB1C,KAAMgR,IAAWxP,EAAiB,OAAS,WAC3CR,MAAOQ,EACPxC,OAAO,QACP0E,WAAS,EACTxD,QAAQ,WACRgR,WAAY,CACRC,UAAU,EACVC,aACI,kBAACC,GAAA,EAAD,CAAgBxJ,SAAS,OACrB,kBAACiE,EAAA,EAAD,CACIhM,QAAS,CAAE0F,KAAM1F,EAAQkM,YACzBrL,QAAS,IAAM9D,KAAK0U,iBAAiB,UACrCC,YAAa3U,KAAK4U,wBAEjBT,EAAS,kBAAC/E,EAAA,EAAD,uBAA8B,kBAACA,EAAA,EAAD,oBAE5C,kBAACR,EAAA,EAAD,CACIC,MAAOqF,EAAe,SAAW,oBACjCpF,UAAU,SAEV,kBAAC,IAAD,CACIE,KAAMrK,EACN4I,OAAQ,IAAMvN,KAAKuN,OAAO,gBAC1BtK,QAAS,CAAE0F,KAAM1F,EAAQkM,aAEzB,kBAACF,EAAA,EAAD,CAAYC,aAAW,oBAAoBjM,QAAS,CAAE0F,KAAM1F,EAAQkM,aAChE,kBAACC,EAAA,EAAD,CAAM9M,MAAM,aAAZ,sBAuBlC0R,GACE,kBAAClN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAgBjB,GAAG,+BACf,kBAAC,IAAD,CACIA,GAAG,6DACHD,eAAe,6CA7U3C,MAAM,YAAEkO,GAAgB/T,KAAK4C,MAC7B,IAAIiS,EACAd,IACAc,EAAQd,EAAYc,OAASd,EAAY5P,OAE7CnE,KAAKuS,mBAAqBuC,IAAYC,IAAIF,GAC1C7U,KAAKkS,MAAQ,CACTiC,QAAQ,EACRhP,MAAM,EACNiN,WAAW,EACXY,UAAU,EACVH,eAAe,EACfhB,mBAAoB,CAChBuB,QAAS,KACTC,eAAgB,GAChB/E,QAAS,IAEb0G,mBAAoB,GACpB9B,YAAY,GAOpB+B,oBACI,MAAM,mBAAEpD,GAAuB7R,KAAKkS,OAC9B,QAAE5D,GAAYtO,KAAK4C,MACzB5C,KAAKuS,mBACA5R,KAAM6R,IACHA,EAAY0C,UAAUvU,KAAK,KACvB,MAAMmM,EAAa,GAAH,GAAQ+E,EAAR,CAA4BvD,YACtC0G,EAAqBxC,EAAYwC,mBAClC/L,IAAKX,GAAmBA,EAAMxD,KACnC9E,KAAK8R,SAAS,CAAED,mBAAoB/E,EAAYkI,2BAGvDjC,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,GACAxB,KAAK8R,SAAS,CAAE3H,UAAU,MAe1CgL,mBAAmBC,GACf,MAAM,SAAEnC,GAAajT,KAAK4C,MACtBqQ,IAAamC,EAAUnC,UAEvBjT,KAAK8R,SAAS,CAAEmB,UAAU,IA4RlCoC,SACI,MAAM,SACFlL,EADE,UACQiI,EADR,SACmBY,EADnB,cAC6BH,EAD7B,YAC4CtB,EAD5C,KACyDpM,EADzD,MAEFoO,EAFE,YAEKE,EAFL,kBAEkBC,EAFlB,mBAEqC7B,EAFrC,mBAEyDmD,EAFzD,SAGF/B,EAHE,cAGQK,EAHR,kBAGuBR,EAHvB,WAG0CI,GAC5ClT,KAAKkS,OACH,KACFjN,EADE,QACIqJ,EADJ,QACarL,EADb,WACsBqS,EADtB,KACkCjG,EAAM0E,aAAa,UAAEwB,GADvD,mBACoEvJ,EADpE,YACwFnH,EADxF,QACqG2Q,EADrG,YAEFlD,EAFE,YAEW0B,EAFX,iBAEwBrI,GAC1B3L,KAAK4C,MAET,GAAIuH,EACA,OAAO,kBAACyD,EAAA,EAAD,MAEX,IAAKyB,EACD,OAAO,kBAACoG,EAAA,EAAD,MAGX,MAAMC,EAAWrG,EAAKsG,KAAO,GAAKtG,EAAK0F,IAAIzC,IAAiBjD,EAAK0F,IAAIzC,GAAahE,UAAYA,GAAYe,EAAK0F,IAAIzC,GAC7G5N,EAAcgR,GAAYA,EAAShR,YACnCC,EAAiB+Q,GAAYA,EAAS/Q,eACtC0N,EAAeqD,GAAYA,EAASrD,aAE1C,IAAImB,EACAoC,EACAC,EACAC,EAEAvC,GACAC,EAAcD,EACdqC,EAAoBnC,EACpBoC,EAAiBnC,GACVrE,EAAK0F,IAAIzC,IAAgBjD,EAAK0F,IAAIzC,GAAahE,UAAYA,GAAWe,EAAK0F,IAAIzC,GAAaiB,UAChGC,eAAgBnE,EAAK0F,IAAIzC,GAAaiB,OACzCqC,EAAoBvG,EAAK0F,IAAIzC,GAAaiB,MAAME,YAChDoC,EAAiBxG,EAAK0F,IAAIzC,GAAaiB,MAAMI,aAC7CmC,EAAezG,EAAK0F,IAAIzC,GAAaiB,OAGzC,IAAIwC,EAAa,YAQjB,GANIA,EADA/C,EACa,oCACNH,EACM,2BAEA,yBAEZnO,EACD,OACI,kBAACyC,EAAA,EAAD,CAAY9D,QAAQ,UAAUE,cAAY,GACzB,eAAZ+K,EAA2B,cAAgB,WAC5C,kBAAC,IAAD,CACIxI,GAAG,+CACHD,eAAe,0DAK/B,GAAI2P,EACA,OACI,kBAACpP,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,GACpBpC,KAAKgW,iBAAiBtR,EAAaC,EAAgB0N,EAAcC,EAAazN,IAM3F,MAAQoR,oBAAqBC,GAAiC7G,EAAK0F,IAAIzC,GAEvE,OAAO5N,GACH,yBAAKxB,UAAWD,EAAQkT,cACpB,kBAAC/P,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,GACpBpC,KAAKgW,iBAAiBtR,EAAaC,EAAgB0N,EAAcC,EAAazN,GAC/E,kBAACuB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAACT,EAAA,EAAD,CACIuP,WAAYA,EACZnQ,KAAOA,GAAS8N,GAAY6C,EAC5B9P,QAAShG,KAAKuF,YACdU,kBAAgB,0BAChB/C,UAAWD,EAAQmT,eAEnB,kBAAClQ,EAAA,EAAD,CAAaJ,GAAG,2BACXiQ,GAEL,kBAAC5P,EAAA,EAAD,MACM6M,IAAaC,IAAaJ,GACxB,kBAACwD,GAAA,EAAD,MACMjE,GACE,kBAACkE,GAAA,EAAD,CACIC,yBAA0BvW,KAAKuW,yBAC/B1E,mBAAoBA,EACpBmD,mBAAoBA,IAG3B5C,GAAa,kBAACoE,GAAA,EAAD,CAAWjD,MAAK,MAAOD,EAAP,CAAsBmD,SAAS,OAGpEzD,GACG,kBAACqD,GAAA,EAAD,KACI,kBAAC,GAAD,CACIhH,KAAM,CAAE3K,cAAaC,kBACrB2J,QAASA,EACT3C,iBAAkBA,KAI7BkH,GACG,kBAACwD,GAAA,EAAD,KACI,kBAACK,GAAA,EAAD,CAAYC,OAAM,MAAO7D,MAG/BG,GAAY6C,GAAgB9B,GAC1B,kBAACqC,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,CAAWjD,MAAK,MAAOuC,EAAP,CAAqBW,SAAS,IAAQ9R,eAAgBA,KAG5EsO,GAAY6C,IAAiB9B,GAC3B,kBAACqC,GAAA,EAAD,KACI,kBAACG,GAAA,EAAD,CAAWjD,MAAK,MAAOuC,EAAP,CAAqBW,SAAS,QAI1D,kBAACzP,EAAA,EAAD,KACKkM,GAAc,kBAAC0D,EAAA,EAAD,CAAkBjB,KAAM,MACrCvD,IAAcY,IAAaC,IAAaJ,GACtC,kBAACnN,EAAA,EAAD,CAAQ5B,QAAS9D,KAAK6W,oBAAqBvU,MAAM,UAAUsD,SAAUsN,GACjE,kBAAC,IAAD,CACIpN,GAAG,oDACHD,eAAe,cAI3B,kBAACH,EAAA,EAAD,CAAQ5B,QAAS9D,KAAKuF,YAAajD,MAAM,UAAUwU,WAAS,GACxD,kBAAC,IAAD,CACIhR,GAAG,iDACHD,eAAe,cAK7BmO,GACE,yBAAK9Q,UAAWD,EAAQ8T,cACnBpL,EAAiBc,uBACdyJ,EAA6Bc,KAAKC,GAAKA,EAAE/J,SAAS,wBACjD,kBAACxH,EAAA,EAAD,CACGrC,QAAQ,WACRsS,KAAK,QACLrT,MAAM,UACNY,UAAWD,EAAQd,OACnB2B,QAAS9D,KAAKkX,gBACdtR,UAAWsQ,EAA6BhJ,SAAS,uBAEjD,kBAAC,IAAD,CACIpH,GAAG,oDACHD,eAAe,2BAG3B,kBAACH,EAAA,EAAD,CACIrC,QAAQ,WACRsS,KAAK,QACLrT,MAAM,UACNY,UAAWD,EAAQd,OACnB2B,QAAS9D,KAAKmX,qBAEd,kBAAC,IAAD,CACIrR,GAAG,+CACHD,eAAe,qCAK7BqQ,EAA6BhJ,SAAS,wBAA0B8G,GAC9D,kBAAC7M,EAAA,EAAD,CAAY9D,QAAQ,UAAUE,cAAY,GACtC,kBAAC,IAAD,CACIuC,GAAG,+DACHD,eAAgB,6EAWpD8L,GAASjK,aAAe,CACpB4N,YAAY,EACZE,SAAS,GAEb7D,GAASvK,UAAY,CACjBnE,QAASoE,IAAUC,MAAM,IAAIC,WAC7B+N,WAAYjO,IAAUI,KACtBwL,SAAU5L,IAAUI,KAAKF,WACzB1C,YAAawC,IAAUI,KAAKF,WAC5BiO,QAASnO,IAAUI,MAGR6C,mBAAWC,YAvlBVtI,IAAD,CACXI,OAAQ,CACJF,OAAQF,EAAMG,QAAQ,GACtBE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAWtM,SAC9D8G,QAAS,OACTsD,WAAY,SACZ0B,SAAU,OACVD,OAAQ,UACR,SAAU,CACNvF,YAAa,EACbQ,QAAS,iBAGjBiL,aAAc,CACVjL,QAAS,OACTE,cAAe,MACfoD,WAAY,SACZ,oDAAqD,CACjDlM,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,SAGtEhD,YAAa,CACTlJ,QAAS,OACTE,cAAe,MACfoD,WAAY,UAEhBuI,aAAc,CACVM,UAAW,EACX/G,aAAcrO,EAAMG,QAAQ,KAEhCD,OAAQ,CACJmV,YAAarV,EAAMG,QAAQ,IAE/BgU,cAAe,CACX,sGAAuG,CACnG9T,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,SAGtEjI,WAAY,CACRtE,QAAS,aACT,oBAAqB,CACjBqF,SAAU,OA8iBI3F,CAAmBoH,KC5mB9BrH,mBAAWC,YAvBXtI,IAAS,CACpB0G,KAAM,CACFkC,QAAS5I,EAAMG,QAAQ,MAqBLmI,CAjBE3H,IACxB,MAAM,QACFK,EADE,SACOsU,EADP,OACiBC,EADjB,KACyBvS,GAC3BrC,EACJ,IAAIkR,EAAU7O,EAAK0B,cAAc,CAC7Bd,eAAgB,gFAChBC,GAAI,iDAQR,OANIyR,IAAaC,EAAOC,WACpB3D,EAAU7O,EAAK0B,cAAc,CACzBd,eAAgB,0DAChBC,GAAI,sDAGL,yBAAK5C,UAAWD,EAAQ0F,MAAOmL,MCf1C,MAAM/R,GAAYC,aAAWC,IAAS,CAClC0G,KAAM,CACFkC,QAAS5I,EAAMG,QAAQ,EAAG,IAE9BsV,WAAY,CACRC,gBAAkB,OAAMC,MAAIC,QAAU5V,EAAM6V,OAAOC,aAAaC,kBAChEC,OAAQ,OACRC,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,QAChBC,UAAW,IACXnN,QAAS,OACTsD,WAAY,aASL,SAAS8J,GAAoB1V,GACxC,MAAMK,EAAUlB,MACV,KAAEsN,EAAF,UAAQkJ,EAAR,IAAmBzT,EAAnB,YAAwBiP,EAAxB,QAAqCzF,EAArC,SAA8C2E,EAA9C,YAAwDpO,EAAxD,YAAqEyN,GAAgB1P,EAC3F,GAAIyM,EAAKsG,KAAO,GAAK7Q,GAAwB,aAAjBA,EAAIyS,WAA4BzS,EAAIJ,YAC5D,OACI,yBAAKxB,UAAWD,EAAQuV,UACpB,kBAACrR,EAAA,EAAD,CAAY9D,QAAQ,KAAKC,UAAU,MAAnC,SAGA,kBAAC6D,EAAA,EAAD,CAAY9D,QAAQ,SAChB,kBAAC,IAAD,CACIyC,GAAG,yCACHD,eAAe,qEAMnC,GAAIf,IAAQA,EAAIyS,WAAagB,EAAUE,SAAW3T,EAAIyS,WAAagB,EAAUd,UACzE,OACI,yBAAKvU,UAAWD,EAAQuV,UACpB,kBAACrR,EAAA,EAAD,CAAY9D,QAAQ,SAChB,kBAACqV,GAAD,CAAoBnB,SAAUzS,EAAIyS,SAAUC,OAAQe,MAKpE,MAAMI,EAAgB7T,EAAMA,EAAImR,oBAAsB,GAEtD,OACI,kBAAC,GAAD,CACIlC,YAAaA,EACbzB,YAAaA,EACbhE,QAASA,EACTe,KAAMA,EACN4D,SAAUA,EACVjH,mBAAoB2M,EACpB9T,YAAaA,EACb2Q,SAAO,I,ixCC2CnB,SAASoD,GAAShW,GACd,MAAM,SACFiW,EADE,MACQ1U,EADR,MACe2U,GACjBlW,EAD2BmW,EAD/B,GAEInW,EAFJ,8BAIA,OACI,4BACIoW,KAAK,WACLC,OAAQ9U,IAAU2U,EAClBhT,GAAK,gBAAegT,IACpB7S,kBAAkB,WAAU6S,KACxBC,GAEH5U,IAAU2U,GACP,kBAACtQ,EAAA,EAAD,CAAK0Q,EAAG,GACHL,IAOrBD,GAASxR,UAAY,CACjByR,SAAUxR,IAAU8R,KACpBL,MAAOzR,IAAUgD,IAAI9C,WACrBpD,MAAOkD,IAAUgD,IAAI9C,YAGzB,MAAM6R,GAAa7O,YAAW,CAC1B8O,UAAW,CACPnO,QAAS,OACToO,eAAgB,SAChBC,gBAAiB,cACjB,WAAY,CACR5O,MAAO,MACP4O,gBAAiB,WAErBC,WAAY,QAEhBC,cAAe,CACXjJ,aAAc,iBACd+I,gBAAiB,UACjB,uBAAwB,CACpBG,WAAY,UAfLnP,CAkBf3H,GAAU,kBAAC+W,EAAA,EAAD,MAAU/W,EAAV,CAAiBgX,kBAAmB,CAAEf,SAAU,oCAGxDgB,GAAYtP,YAAYtI,IAAD,CACzB0G,KAAM,CACFmR,cAAe,OACfxX,MAAO,OACP8N,WAAYnO,EAAM8X,WAAWC,kBAC7B9J,SAAUjO,EAAM8X,WAAWE,QAAQ,IACnC3C,YAAarV,EAAMG,QAAQ,GAC3B,UAAW,CACP8X,QAAS,IAGjBvQ,SAAU,CACN4P,gBAAiB,OACjBG,WAAY,iBACZS,YAAa,oBAdH5P,CAgBb3H,GAAU,kBAACwX,EAAA,EAAD,IAAKC,eAAa,GAAKzX,KAMtC,MAAM0X,WAAqBjV,IAAMuM,UAO7B9R,YAAY8C,GACR7C,MAAM6C,GADS,0BAuED,CAAC6C,EAAO8U,KACtB,MAAM,KAAElL,EAAF,YAAQmL,EAAR,WAAqB3O,GAAe7L,KAAKkS,OACzC,QAAE5D,GAAYtO,KAAK4C,MACnB6X,EAAaD,EAAYxD,KAAM0D,GAAMA,EAAEhU,OAAS6T,IAChD,oBAAEpO,GAAwBsO,EAEhC,GAAIpL,EAAKsG,KAAO,GAAKtG,EAAK0F,IAAIwF,IAAmBlL,EAAK0F,IAAIwF,GAAgBjM,UAAYA,EAAS,CAC3F,MAAM,YAAErC,EAAF,oBAAegK,EAAf,qBAAoC5J,GAAyBgD,EAAK0F,IAAIwF,GACtEzN,EAAa,MACZjB,EADS,CAEZI,cACAD,mBAAoBiK,GAAuB9J,EAAoBkB,OAAQlK,GAAmB,uBAATA,GAA0C,aAATA,GAClHkJ,qBAAsBA,GAAwBrM,KAAK2a,+BAA+BF,KAEtFza,KAAK8R,SAAS,CAAEjG,WAAYiB,EAAYwF,YAAaiI,SAGrDva,KAAK8R,SAAS,CACVjG,WAAY,MACLA,EADG,CAENG,mBAAoBG,EAAoBkB,OAAQlK,GAAmB,uBAATA,GAA0C,aAATA,GAC3FkJ,qBAAsBrM,KAAK2a,+BAA+BF,KAE9DnI,YAAaiI,MA9FN,0BAsGD,KACd,MAAM,QAAEjM,GAAYtO,KAAK4C,MACzB,GAAI5C,KAAK6U,MAAO,CACZ,MACM+F,GADM,IAAIC,KACgBC,iBAC1BC,EAAkB/a,KAAKwS,YACxB7R,KAAM6R,GAAgBA,EAAY0C,QAAQ5G,IAC/C0M,QAAQC,IAAI,CAACL,EAAqBG,IAC7Bpa,KAAM+R,IAEH,MAAMwI,EAAyB,GAK/B,GAJAxI,EAAS,GAAG9Q,KAAKuZ,KAAKlS,IAAK1C,IACnBA,EAAK6U,SAASF,EAAuBG,KAAK9U,KAGZ,IAAlC2U,EAAuBxL,OAEvB,YADA1P,KAAK8R,SAAS,CAAE0I,YAAa,KAIjC,IAAI,YAAElI,GAAgBtS,KAAKkS,OACtBI,GAAe4I,EAAuBxL,OAAS,IAChD4C,EAAc4I,EAAuBlE,KAAM0D,GAAiB,yBAAXA,EAAEhU,MAAmC,uBAChFwU,EAAuB,GAAGxU,MAEpC,MAAM4U,EAAYJ,EAAuBlE,KAAM0D,GAAMA,EAAEhU,OAAS4L,GAE1DjD,EAAOqD,EAAS,IAChB,WAAE7G,GAAe7L,KAAKkS,MAE5B,GAAI7C,EAAKsG,KAAO,GAAKtG,EAAK0F,IAAIzC,IAAgBjD,EAAK0F,IAAIzC,GAAahE,UAAYA,EAAS,CACrF,MAAM,YAAErC,EAAF,oBAAegK,EAAf,qBAAoC5J,EAApC,KAA0DkP,GAASlM,EAAK0F,IAAIzC,GAC5ExF,EAAa,MACZjB,EADS,CAEZI,YAAaA,GAAe,GAC5BD,mBAAoBiK,GAAuB,GAC3C5J,qBAAsBA,GAAwBrM,KAAK2a,+BAA+BW,KAEtFtb,KAAK8R,SAAS,CACVzC,OAAMxD,WAAYiB,EAAY0N,YAAaU,EAAwB5I,cACnEtN,eAA0B,WAATuW,GAA8B,YAATA,EACtCA,aAED,CACH,MAAMC,EAAkBF,EAAUnP,qBAAuB,GAEzDnM,KAAK8R,SAAS,CACVzC,OACAxD,WAAY,MACLA,EADG,CAENG,mBAAoBwP,EAAgBnO,OAAQlK,GAAmB,uBAATA,GAA0C,aAATA,GACvFkJ,qBAAsBrM,KAAK2a,+BAA+BW,KAE9Dd,YAAaU,EACb5I,mBAIXS,MAAOvD,IAIiB,MAAjBA,EAAMhO,QACNxB,KAAK8R,SAAS,CAAE3H,UAAU,SArK3B,wBAiZFsR,IACbzb,KAAK8R,SAAS,CAAEnC,WAAY8L,MAlZb,sBAqZJC,GACJA,EAAIC,QACP,SACCC,GACUA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGxN,gBAzZ5C,yBA8ZA2D,IACdlS,KAAK8R,SAAS,CAAEkK,SAAU9J,MA7Z3B,MAAM,YAAE6B,EAAazF,WAAYtO,KAAK4C,MACtC5C,KAAKkS,MAAQ,CACT+J,WAAW,EACX5M,KAAM,KACN4D,UAAU,EACV+I,UAAU,EACVnQ,WAAY,CACRyC,UACAtC,mBAAoB,KACpBC,YAAa,GACbI,qBAAsB,GACtBY,WAAY,GACZ0G,aAAc,KACduI,OAAQ,CAAC,YAEb1B,YAAa,KACblI,YAAa,KACb6J,oBAAqB,GACrBC,uBAAwB,GACxBzM,YAAY,EACZ3K,gBAAgB,EAChBuW,KAAM,MAEVvb,KAAKuY,UAAY,CACb8D,UAAW,YACXC,SAAU,WACV7D,QAAS,UACThB,SAAU,YAEV1D,IACA/T,KAAK6U,MAAQd,EAAYc,OAASd,EAAY5P,MAC9CnE,KAAKwS,YAAcsC,IAAYC,IAAI/U,KAAK6U,QAE5C7U,KAAK4L,iBAAmB5L,KAAK4L,iBAAiB2Q,KAAKvc,MACnDA,KAAKwc,aAAexc,KAAKwc,aAAaD,KAAKvc,MAC3CA,KAAKyc,WAAazc,KAAKyc,WAAWF,KAAKvc,MACvCA,KAAK0c,YAAc1c,KAAK0c,YAAYH,KAAKvc,MACzCA,KAAK2c,4BAA8B3c,KAAK2c,4BAA4BJ,KAAKvc,MACzEA,KAAK+E,sBAAwB/E,KAAK+E,sBAAsBwX,KAAKvc,MAQjEiV,oBACIjV,KAAK4c,kBAGTzH,mBAAmB0H,GACf,MAAQvO,QAASwO,GAAgBD,GACzBvO,QAASyO,GAAgB/c,KAAK4C,MAClCka,IAAgBC,GAChB/c,KAAK4c,kBAIbjC,+BAA+BF,GAC3B,MAAM,oBAAEtO,EAAF,yBAAuBD,GAA6BuO,EAEpDpO,EAAuB,GAK7B,OAHAH,EAAyB+B,QAAS+O,IAC9B3Q,EAAqB2Q,EAAStW,MAAQsW,EAAS5Y,SAAW,KAEvDiI,EA2GXT,iBAAiBC,GACb7L,KAAK8R,SAAS,CAAEjG,eAQpB2Q,eACI,MAAM,WAAE3Q,EAAF,KAAcwD,EAAd,YAAoBiD,GAAgBtS,KAAKkS,OACzC,QACF5D,EADE,uBACO2O,EAAwBlJ,aAAa,UAAEwB,EAAF,YAAavB,GADzD,KACwE/O,GAC1EjF,KAAK4C,OAEJiJ,EAAWG,mBAAmBkB,SAAS,cACrCrB,EAAWG,mBAAmBkB,SAAS,uBACX,KAA3BrB,EAAWI,aAQnBjM,KAAK8R,SAAS,CAAEmK,WAAW,IAE3Bjc,KAAKwS,YACA7R,KAAM6R,GACIA,EAAYgK,aACflO,EAASzC,EAAWG,mBACpBH,EAAWI,YACXJ,EAAWQ,qBAAsBrM,KAAKkd,4BAG7Cvc,KAAM+R,IACCuK,GACAA,IAEJ,MAAME,EAAU,IAAIC,IAAI,IAAI/N,IAGtB4D,EAA0B,QAAdsC,GAAwBvB,EAC1CmJ,EAAQE,IAAI/K,EAAaI,GACzB1S,KAAK8R,SAAS,CAAEzC,KAAM8N,EAASlK,aAC3BP,EAAS6E,WAAavX,KAAKuY,UAAUE,SAAW/F,EAAS6E,WAAavX,KAAKuY,UAAUd,SACrF5D,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bb,GAAI,+DACJD,eAAgB,iGAGpBgO,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bb,GAAI,uDACJD,eAAgB,6CAEpB7F,KAAK4c,qBAGZ7J,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,EACAxB,KAAK8R,SAAS,CAAE3H,UAAU,IACR,MAAX3I,GACPxB,KAAK4c,kBAET/I,IAAMrE,MAAMvK,EAAK0B,cAAc,CAC3Bb,GAAI,qDACJD,eAAgB,uDAErB0X,QAAQ,IAAMvd,KAAK8R,SAAS,CAAEmK,WAAW,MAtDxCpI,IAAMrE,MAAMvK,EAAK0B,cAAc,CAC3Bb,GAAI,mEACJD,eAAgB,8FA2DhC4W,aACI,MAAM,KAAEpN,EAAF,WAAQxD,EAAR,YAAoByG,GAAgBtS,KAAKkS,OACzC,QAAE5D,EAAF,KAAWrJ,GAASjF,KAAK4C,MACzB4a,EAAkBnO,EAAK0F,IAAIzC,GAAahE,UAAYA,GAAYe,EAAK0F,IAAIzC,IAC1EzG,EAAWG,mBAAmBkB,SAAS,cACrCrB,EAAWG,mBAAmBkB,SAAS,uBACX,KAA3BrB,EAAWI,aAQnBjM,KAAK8R,SAAS,CAAEmK,WAAW,IAC3Bjc,KAAKwS,YACA7R,KAAM6R,GACIA,EAAYiK,WACfe,EAAejI,UACfjH,EACAzC,EAAWG,mBACXH,EAAWI,YACXuR,EAAe9Y,YACf8Y,EAAe7Y,eACfkH,EAAWQ,qBACXiG,EACAkL,EAAenL,eAGtB1R,KAAM+R,IACH,MAAMyK,EAAU,IAAIC,IAAI,IAAI/N,IAC5B8N,EAAQE,IAAI/K,EAAaI,GACzB1S,KAAK8R,SAAS,CAAEzC,KAAM8N,IACtBtJ,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bb,GAAI,qDACJD,eAAgB,6CAGvBkN,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,EACAxB,KAAK8R,SAAS,CAAE3H,UAAU,IACR,MAAX3I,GACPxB,KAAK4c,kBAET,MAAM,SAAElK,GAAalD,EACjBkD,GAAYA,EAAS9Q,MACrBiS,IAAMrE,MAAMkD,EAAS9Q,KAAKkS,WAE/ByJ,QAAQ,IAAMvd,KAAK8R,SAAS,CAAEmK,WAAW,MA7CxCpI,IAAMrE,MAAMvK,EAAK0B,cAAc,CAC3Bb,GAAI,mEACJD,eAAgB,8FAiDhC6W,YAAYpK,EAAaD,GACrB,MAAM,QAAE/D,EAAF,KAAWrJ,GAASjF,KAAK4C,MAC/B5C,KAAKwS,YACA7R,KAAM6R,GACIA,EAAYkK,YAAYpO,EAASgE,EAAaD,IAExD1R,KAAK,KACFX,KAAK4c,kBACL/I,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bb,GAAI,sDACJD,eAAgB,6CAGvBkN,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,GACAxB,KAAK8R,SAAS,CAAE3H,UAAU,IAE9B0J,IAAMrE,MAAMvK,EAAK0B,cAAc,CAC3Bb,GAAI,oDACJD,eAAgB,yDAUhC8W,4BAA4BlX,GACxBzF,KAAK8R,SAAS,CAAE,CAACrM,EAAMwC,OAAOvB,MAAOjB,EAAMwC,OAAO9D,QAMtDY,wBACI,MAAM,QAAEuJ,EAAF,KAAWrJ,GAASjF,KAAK4C,OACzB,oBAAEuZ,EAAF,uBAAuBC,EAAvB,YAA+C9J,GAAgBtS,KAAKkS,MAE1ElS,KAAKwS,YACA7R,KAAM6R,GACIA,EAAYiL,YAAYnP,EAAS6N,EAAqBC,EAAwB9J,IAExF3R,KAAK,KACFX,KAAK8R,SAAS,CAAEqK,oBAAqB,GAAIC,uBAAwB,KACjEpc,KAAK4c,kBACL/I,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bb,GAAI,sDACJD,eAAgB,8CAGvBkN,MAAOvD,IAIJ,MAAM,OAAEhO,GAAWgO,EACJ,MAAXhO,GACAxB,KAAK8R,SAAS,CAAE3H,UAAU,IAE9B0J,IAAMrE,MAAMvK,EAAK0B,cAAc,CAC3Bb,GAAI,oDACJD,eAAgB,sDAKhC6X,2BACI,MAAM,YAAElD,EAAF,YAAelI,GAAgBtS,KAAKkS,MACpCyL,EAAmBnD,EAAYnN,OAAQ9G,GAASA,EAAKG,OAAS4L,GACpE,OAAIqL,GAAgD,IAA5BA,EAAiBjO,OAC9BiO,EAAiB,GAAGvR,YAExB,GAGX8Q,0BACI,MAAM,YAAE1C,EAAF,YAAelI,GAAgBtS,KAAKkS,MACpCyL,EAAmBnD,EAAYnN,OAAQ9G,GAASA,EAAKG,OAAS4L,GACpE,OAAIqL,GAAgD,IAA5BA,EAAiBjO,OAC9BiO,EAAiB,GAAG7X,GAExBwM,EAwBV+C,SACI,MAAM,QACFpS,EADE,YACO8Q,EADP,QACoBzF,EADpB,QAC6BkH,EAASzB,aAAa,YAAEC,IACvDhU,KAAK4C,OACH,KACFyM,EADE,WACIxD,EADJ,UACgBoQ,EADhB,SAC2BhJ,EAD3B,oBACqCkJ,EADrC,uBAEFC,EAFE,YAEsB9J,EAFtB,YAEmCkI,EAFnC,WAEgD7K,EAFhD,SAE4DqM,EAF5D,eAGFhX,EAHE,KAGcuW,GAChBvb,KAAKkS,MACT,GAAIsI,GAAsC,IAAvBA,EAAY9K,OAC3B,OACI,yBAAKxM,UAAWD,EAAQ0F,MACpB,kBAACH,EAAA,EAAD,CAAKoV,GAAI,GACL,kBAACzW,EAAA,EAAD,CAAY9D,QAAQ,KAAKH,UAAWD,EAAQ4a,UACvC7d,KAAK8d,YAAYxP,GAClB,kBAAC,IAAD,CACIxI,GAAG,yDACHD,eAAe,mBAI3B,kBAACkY,EAAA,EAAD,CAAe5a,KAAK,OAAOD,UAAWD,EAAQG,iBAC1C,kBAAC+D,EAAA,EAAD,CAAY9D,QAAQ,KAAKC,UAAU,MAC/B,kBAAC,IAAD,CAAkBwC,GAAG,wCAAwCD,eAAe,qBAEhF,kBAACsB,EAAA,EAAD,CAAY7D,UAAU,KAClB,kBAAC,IAAD,CACIwC,GAAG,gDACHD,eAAe,gDAOvC,IAAKwJ,IAASiD,IAAgBzG,EAAWG,mBACrC,OAAO,kBAACyJ,EAAA,EAAD,MAEX,MAAMuI,EAAWC,IAAYC,UAAUxX,KACvC,IAAI7B,GAAc,EAEdkP,EAAYoK,OAASH,EAASzP,gBAAkBwF,EAAYoK,MAAM5P,gBAClE1J,GAAc,GAElB,MAAMC,EAAMuK,EAAKsG,KAAO,GAAKtG,EAAK0F,IAAIzC,IAAiBjD,EAAK0F,IAAIzC,GAAahE,UAAYA,EAAWe,EAAK0F,IAAIzC,GAAe,KAE5H,OAAIkD,EACInG,EAEI,kBAAC,GAAD,CACIA,KAAMA,EACNvK,IAAKA,EACLyT,UAAWvY,KAAKuY,UAChBxE,YAAaA,EACbzB,YAAaA,EACbhE,QAASA,EACT2E,SAAUA,EACVpO,YAAaA,IAIb,kBAACuZ,GAAA,EAAD,MAGZtZ,GAAwB,aAAjBA,EAAIyS,WAA4BzS,EAAIJ,YAEvC,oCACI,kBAACyC,EAAA,EAAD,CAAYjE,UAAWD,EAAQob,gBAAiBhb,QAAQ,aACpD,kBAAC,IAAD,CACIyC,GAAG,+CACHD,eAAe,2FAIvB,kBAACH,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQqb,cACnBxa,QAAS9D,KAAK0c,YAAYpK,EAAajD,EAAK0F,IAAIzC,GAAaD,eAE7D,kBAAC,IAAD,CACIxM,eAAe,WACfC,GAAG,+CAMnBhB,GAAQA,EAAIyS,WAAavX,KAAKuY,UAAUE,SAAW3T,EAAIyS,WAAavX,KAAKuY,UAAUd,SAInF,oCACM+C,GAAeA,EAAY9K,OAAS,GAClC,kBAAC0J,GAAD,CACIjV,MAAOmO,EACPiM,eAAe,UACfC,UAAU,UACV5Z,SAAU5E,KAAKye,gBACfvP,aAAW,oBAEVsL,EAAYvR,IAAKyV,GACd,kBAAC7E,GAAD,CACIvZ,MAAOoe,EAAWC,aAAeD,EAAWhY,KAC5CvC,MAAOua,EAAWhY,KAClBd,UAAW8Y,EAAWtD,YAKtC,yBAAKlY,UAAWD,EAAQ0F,MACpB,kBAACH,EAAA,EAAD,CAAKoV,GAAI,GACL,kBAACzW,EAAA,EAAD,CAAY9D,QAAQ,KAAKH,UAAWD,EAAQ4a,UACvC7d,KAAK8d,YAAYxP,GAClB,kBAAC,IAAD,CACIxI,GAAG,yDACHD,eAAe,mBAIzB2U,GAAeA,EAAY9K,OAAS,GAAM8K,EAAYvR,IAAKyV,GACzD,kBAAC9F,GAAD,CAAUzU,MAAOmO,EAAawG,MAAO4F,EAAWhY,KAAMxD,UAAWD,EAAQ2b,UACrE,kBAACpW,EAAA,EAAD,CAAK0C,QAAQ,OAAOE,cAAc,OAC9B,kBAACjE,EAAA,EAAD,CAAYjE,UAAWD,EAAQH,QAASO,QAAQ,KAAKC,UAAU,KAAKJ,UAAWD,EAAQ4b,UACnF,kBAAC,IAAD,CACIhZ,eAAe,iBACfC,GAAG,oDAIP4Y,EAAWpS,4BACP,kBAAC9D,EAAA,EAAD,CAAKsW,GAAI,GACL,kBAAC,EAAD,CACIla,SAAU5E,KAAK2c,4BACfjY,YAAayX,EACbxX,eAAgByX,EAChBvX,YAAaA,EACbC,IAAKA,EACLC,sBAAuB/E,KAAK+E,sBAC5BC,eAAgBA,MAMpC,kBAACwD,EAAA,EAAD,CAAKuW,EAAG,GACJ,kBAAC,GAAD,CACIhL,YAAaA,EACbzB,YAAaA,EACbhE,QAASA,EACTe,KAAMA,EACNrD,mBAAoBH,EAAWG,mBAC/BnH,YAAaA,EACbmP,YAAa0K,EAAWM,oBAAsBhL,EAC9CrI,iBAAkB+S,KAG1B,kBAACvX,EAAA,EAAD,CAAYjE,UAAWD,EAAQH,QAASO,QAAQ,KAAKC,UAAU,KAAKJ,UAAWD,EAAQ4b,UAE/E/Z,EAEQ,kBAAC,IAAD,CACIe,eAAe,qBACfC,GAAG,yDAIP,kBAAC,IAAD,CACID,eAAe,oBACfC,GAAG,uDAKvB,kBAAC0C,EAAA,EAAD,CAAKuW,EAAG,GACJ,kBAAC,GAAD,CACI1P,KAAMA,EACNvK,IAAKA,EACLiP,YAAaA,EACbzB,YAAaA,EACbhE,QAASA,EACT1C,iBAAkB5L,KAAK4L,iBACvBC,WAAYA,EACZhH,YAAaA,EACbgL,gBAAiB/K,EACjB6G,iBAAkB+S,EAClB/O,WAAYA,EACZ7D,eAAgB9L,KAAK8L,eACrBC,cAAeiQ,EACfiD,cAAejf,KAAKif,gBAExB,yBAAK/b,UAAWD,EAAQic,iBACpB,kBAACjY,EAAA,EAAD,CACIzD,aAAcC,IAAcyD,0BAC5BvD,eAAgBC,IAAgBC,MAE9BgB,EAsBE,kBAAC2D,EAAA,EAAD,CAAK0C,QAAQ,QACT,kBAACxF,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQZ,OACnByB,QAASgB,EAAM9E,KAAKyc,WAAazc,KAAKwc,aACtC5W,SAAUoW,GAAaC,IAAcyC,EAAWnS,wBAA4BgP,GAAiB,WAATA,GAEnFzW,EAAM,SAAW,gBACjBmX,GAAa,kBAACrF,EAAA,EAAD,CAAkBjB,KAAM,OAExC+I,EAAWnS,wBACT,kBAAC/D,EAAA,EAAD,CAAKuW,EAAG,EAAG7T,QAAQ,QACf,kBAAC,IAAD,CAAahI,UAAWD,EAAQkc,cAChC,kBAAChY,EAAA,EAAD,CAAY9D,QAAQ,SAChB,kBAAC,IAAD,CACIwC,eAAe,uDACfC,GAAG,4DACHkD,OAAQ,CAAEoW,OAAQV,EAAWC,aAAeD,EAAWhY,WAvC3E,oCACI,kBAAChB,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQZ,OACnByB,QACIgB,EAAM9E,KAAKyc,WAAazc,KAAKwc,aAEjC5W,UAAWf,GAAeoX,IAAcyC,EAAWnS,wBAElDzH,EAAM,cAAgB,gBACtBmX,GAAa,kBAACrF,EAAA,EAAD,CAAkBjB,KAAM,MAE1C,kBAACxO,EAAA,EAAD,CAAY9D,QAAQ,WAChB,kBAAC,IAAD,CACIwC,eAAe,yCACfC,GAAG,gEA5HxC,kBAAC4S,GAAD,CAAoBnB,SAAUzS,EAAIyS,SAAUC,OAAQxX,KAAKuY,a,GAtgBvE+B,G,cACmBlM,UA0qBzBkM,GAAa5S,aAAe,CACxBuV,uBAAwB,OACxBzH,SAAS,GAEb8E,GAAalT,UAAY,CACrBnE,QAASoE,IAAU+C,WAAWpG,QAAQuD,WACtCwM,YAAa1M,IAAUC,MAAM,CACzBiO,UAAWlO,IAAUhI,OAAOkI,WAC5BsN,MAAOxN,IAAUhI,OACjB8E,MAAOkD,IAAUhI,OACjB8e,MAAO9W,IAAUhI,OACjB2U,YAAa3M,IAAUI,OACxBF,WACH+G,QAASjH,IAAUhI,OAAOkI,WAC1B0V,uBAAwB5V,IAAUG,KAClCvC,KAAMoC,IAAUC,MAAM,CAAEX,cAAeU,IAAUG,OAAQD,WACzDiO,QAASnO,IAAUI,MAGR6C,gBAAWC,YAz0BVtI,IAAD,CACX0G,KAAM,CACFkC,QAAS5I,EAAMG,QAAQ,GACvB,iCAAkC,CAC9BE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,QAElE,uBAAwB,CACpB9U,MAAOL,EAAMM,QAAQoO,KAAK,MAE9B,mBAAoB,CAChB4I,gBAAiBtX,EAAMM,QAAQoO,KAAK,KACpCrO,MAAOL,EAAMM,QAAQoO,KAAK,MAE9B3F,SAAU,YAEd3I,OAAQ,CACJyI,WAAY,EACZ,SAAU,CACNxI,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQE,QAAQC,QAGnE4b,cAAe,CACXxT,WAAY,IAEhBuT,gBAAiB,CACbxT,QAAS,sBAEbkM,aAAc,CACVM,UAAWpV,EAAMG,QAAQ,GACzBkO,aAAcrO,EAAMG,QAAQ,IAEhCD,OAAQ,CACJmV,YAAarV,EAAMG,QAAQ,IAE/Bid,iBAAkB,CACdjU,cAAe,SACfkF,aAAc,GAElB4O,gBAAiB,CACbrU,QAAS,WACTC,WAAY7I,EAAMG,QAAQ,OAE9BgV,MAAO,CACH1G,WAAY,OACZJ,aAAcrO,EAAMG,QAAQ,GAC5BiV,UAAWpV,EAAMG,QAAQ,IAE7Bkd,iBAAkB,CACdlU,cAAe,OAEnBjC,YAAa,GAEb0V,SAAU,CACNzO,WAAY,KAEhBwO,SAAU,CACNlU,YAAazI,EAAMG,QAAQ,GAC3B,iBAAkB,CACdyI,QAAS,IAGjBsU,YAAa,CACT7c,MAAO,UACP4N,SAAU,GACVoH,YAAa,MAywBK/M,CAAmB+P,M,sSCp1B7C,MA8BMiF,EAAwB3c,IAC1B,MAAM,QACFK,EADE,SACOuc,EADP,yBACiBC,EADjB,MAEFxd,EAFE,cAEKyd,EAFL,uBAEoBzC,EAFpB,gBAE4C0C,EAF5C,IAE6D/H,EAF7D,MAEkEkB,EAFlE,iBAEyE8G,EAFzE,YAE2F5L,GAC7FpR,EACJ,OACI,oCACI,4BACI,wBAAIM,UAAWD,EAAQ4c,GAAI/Z,GAAI8R,EAAItX,OAAQsX,EAAItX,OAC/C,wBAAI4C,UAAWD,EAAQ4c,IAAKjI,EAAIkI,QAChC,wBAAI5c,UAAWD,EAAQ4c,IAAKjI,EAAIpW,QAChC,wBAAI0B,UAAWD,EAAQ4c,IACnB,yBAAK3c,UAAWD,EAAQ8c,cACpB,kBAAC,IAAD,CACI7c,UAAWD,EAAQZ,OACnB2d,GAAI,iBAAmBpI,EAAIzT,MAC3B2B,GAAI8R,EAAItX,MAAQ,MAChB2F,kBAAiB2R,EAAItX,MAAQ,OAASsX,EAAItX,OAE1C,8BACI,kBAAC,IAAD,CACIwF,GAAG,2DACHD,eAAe,gBAGvB,kBAACoa,EAAA,EAAD,CACItV,MAAO,GACPsN,OAAQ,GACRiI,YAAaje,EAAMM,QAAQE,QAAQC,KACnCyd,KAAK,kBAGb,kBAAClZ,EAAA,EAAD,CACIzD,aAAcC,IAAc2c,oBAC5Bzc,eAAgBC,IAAgByc,QAEhC,kBAAC,IAAD,CACInd,UAAWD,EAAQZ,OACnByB,QAAS,IAAM2b,EACX7H,EAAI3W,eACJgc,GAEJnX,GAAI8R,EAAItX,MAAQ,MAChB2F,kBAAiB2R,EAAItX,MAAQ,OAASsX,EAAItX,OAE1C,8BACI,kBAAC,IAAD,CACIwF,GAAG,4DACHD,eAAe,iBAGvB,kBAACoa,EAAA,EAAD,CACItV,MAAO,GACPsN,OAAQ,GACRiI,YAAaje,EAAMM,QAAQE,QAAQC,KACnCyd,KAAK,oBAIjB,kBAAC,IAAD,CACIjd,UAAWod,IAAWrd,EAAQZ,OAAQ,CAClC,CAACY,EAAQsd,YAAab,GACa,eAApBC,GACA/H,EAAIzT,QAAUub,IAEjC5b,QAAS,IAAM0b,EAAS,aAAc5H,EAAIzT,OAC1C2B,GAAI8R,EAAItX,MAAQ,MAChB2F,kBAAiB2R,EAAItX,MAAQ,OAASsX,EAAItX,OAE1C,8BACI,kBAAC,IAAD,CACIwF,GAAG,0DACHD,eAAe,eAGvB,kBAACoa,EAAA,EAAD,CACItV,MAAO,GACPsN,OAAQ,GACRiI,YAAaje,EAAMM,QAAQE,QAAQC,KACnCyd,KAAK,oBAGb,kBAAC,IAAD,CACIjd,UAAWod,IAAWrd,EAAQZ,OAAQ,CAClC,CAACY,EAAQsd,YAAab,GACa,YAApBC,GACA/H,EAAIzT,QAAUub,IAEjC5b,QAAS,IAAM0b,EAAS,UAAW5H,EAAIzT,OACvC2B,GAAI8R,EAAItX,MAAQ,MAChB2F,kBAAiB2R,EAAItX,MAAQ,OAASsX,EAAItX,OAE1C,8BACI,kBAAC,IAAD,CACIwF,GAAG,6DACHD,eAAe,kBAGvB,kBAACoa,EAAA,EAAD,CACItV,MAAO,GACPsN,OAAQ,GACRiI,YAAaje,EAAMM,QAAQE,QAAQC,KACnCyd,KAAK,uBAMxBvI,EAAIzT,QAAUub,IAAsC,eAApBC,GAAwD,YAApBA,IACjE,4BACI,wBAAIa,QAAQ,KACR,yBAAKtd,UAAWD,EAAQwd,iBACpB,kBAACnG,EAAA,EAAD,CACIhM,QAASqR,EACT5L,YAAa,CACTc,MAAO+C,EAAIzT,MACX7D,MAAOsX,EAAItX,MACX6d,MAAOyB,EACP5L,eAEJiJ,uBAAwBA,SASxDsC,EAAqBnY,UAAY,CAC7BnE,QAASoE,IAAUC,MAAM,CACrBuY,GAAIxY,IAAUC,MAAM,IACpByY,aAAc1Y,IAAUC,MAAM,IAC9BjF,OAAQgF,IAAUC,MAAM,IACxBiZ,WAAYlZ,IAAUC,MAAM,IAC5BmZ,gBAAiBpZ,IAAUC,MAAM,MAClCC,WACHtF,MAAOoF,IAAUC,MAAM,IAEpBC,WACHkY,yBAA0BpY,IAAUG,KAAKD,WACzCiY,SAAUnY,IAAUG,KAAKD,WACzBmY,cAAerY,IAAUhI,OAAOkI,WAChC0V,uBAAwB5V,IAAUG,KAAKD,WACvCoY,gBAAiBtY,IAAUhI,OAAOkI,WAClCqY,iBAAkBvY,IAAUhI,OAAOkI,WACnCqQ,IAAKvQ,IAAUC,MAAM,CACjBhH,MAAO+G,IAAUhI,OACjBygB,OAAQzY,IAAUhI,OAClBmC,OAAQ6F,IAAUhI,OAClB8E,MAAOkD,IAAUhI,OACjB4B,eAAgBoG,IAAUhI,SAC3BkI,WACHuR,MAAOzR,IAAUpI,OAAOsI,YAEbgD,kBAzLCtI,IAAD,CACXI,OAAQ,CACJwI,QAAS5I,EAAMG,QAAQ,GACvBE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAWtM,SAC9D8G,QAAS,OACTsD,WAAY,SACZ0B,SAAU,OACVD,OAAQ,UACR,SAAU,CACNvF,YAAa,EACbQ,QAAS,iBAGjB6U,aAAc,CACV7U,QAAS,OACTwV,UAAW,QACXpa,UAAW,OAEfuZ,GAAI,CACAvd,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAWtM,SAC9DoM,aAAc,aAAevO,EAAMM,QAAQoO,KAAKgQ,KAChDzQ,SAAU,OACVxF,YAAazI,EAAMG,QAAQ,GAC3B6V,OAAQ,IAEZwI,gBAAiB,CACb/G,WAAY,aAAezX,EAAMM,QAAQE,QAAQC,QA+JvB,CAAEke,WAAW,GAAhCrW,CAAwCgV,G,sVCxDvD,MAAMsB,UAAoBxb,IAAMuM,UAAU,iDAG9B,CACJkP,UAAU,EACVpB,eAAe,EACfC,iBAAiB,EACjBoB,oBAAqB,CACjBtgB,cAAe,GACfD,MAAO,GACPe,iBAAkB,IAEtByf,qBAAsB,GACtBpB,iBAAkB,GAClB5L,aAAa,EACbiN,eAAe,IAfmB,oBA8BzB,KACT,MAAM,IAAEC,EAAF,sBAAOC,GAA0BnhB,KAAK6X,SACtC,oBAAEkJ,GAAwB/gB,KAAKkS,MAC/BkP,E,+VAAyB,CAAH,GAAQL,EAAR,CAA6BvgB,MAAO0gB,EAAIpb,KAC9Dkb,EAAuBE,EAAIG,MAC7BL,GAAwBA,EAAqB,KAC7CI,EAAuB7f,iBAAmByf,EAAqB,GAAGM,UAElEH,GAAyBA,EAAsB,KAC/CC,EAAuB3gB,cAAgB0gB,EAAsB,GAAGhd,OAEpEnE,KAAK8R,SAAS,CAAEiP,oBAAqBK,EAAwBJ,2BAzC3B,2BA+ClB,KAChBhhB,KAAK8R,SAAUI,IAAD,CAAc4O,UAAW5O,EAAM4O,cAhDX,yBAuDpB,KACd,MAAM,uBAAE7D,EAAF,QAA0BsE,GAAYvhB,KAAK6X,SAC3C,oBAAEkJ,GAAwB/gB,KAAKkS,OAC/B,KAAEjN,GAASjF,KAAK4C,MAChBse,EAAM,IAAIM,IAChBxhB,KAAK8R,SAAS,CAAEmP,eAAe,IAC/BC,EAAIO,UACAV,EAAoBvgB,MACpBugB,EAAoBtgB,cACpBsgB,EAAoBxf,iBACpBggB,GAEC5gB,KAAM+R,IAC0B,YAAzBA,EAAS9Q,KAAKJ,OACdqS,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bd,eAAgB,6EAChBC,GAAI,2BAGR6M,QAAQC,IAAI,+CAAiDF,EAAS9Q,KAAKX,gBAC3E4S,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bd,eAAgB,0BAChBC,GAAI,mEAGRmX,GAAwBA,EAAuBjd,KAAK0hB,YACxD1hB,KAAK8R,SAAS,CAAEmP,eAAe,MAElClO,MAAOvD,IACJmD,QAAQC,IAAI,0CACZD,QAAQnD,MAAMA,GACdxP,KAAK8R,SAAS,CAAEmP,eAAe,QAtFL,oBA8FzB,KACT,MAAM,QAAEU,GAAY3hB,KAAK4C,MACzB+e,EAAQtG,KAAK,wBAhGqB,kBA0G3B,CAACsE,EAAiBD,KACzB1f,KAAK8R,SAAS,CAAE6N,kBAAiBD,kBAEjC5K,IAAYC,IAAI2K,GACX/e,KAAMihB,IACH5hB,KAAK8R,SAAS,CAAE8N,iBAAkBgC,EAAOzD,MAAOnK,YAAa4N,EAAO5N,kBA/G1C,mCAuHT+M,IACzB/gB,KAAK8R,SAAS,CAAEiP,0BAxHkB,kCAiIX,CAAC9f,EAAgBgc,KACxC,MAAM,KAAEhY,GAASjF,KAAK4C,OACP,IAAIhD,KACWwB,mBAAmBH,GAClCN,KAAM+R,IACjB,GAAwB,MAApBA,EAASlR,OAMT,OALAmR,QAAQC,IAAIF,QACZmB,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bd,eAAgB,wDAChBC,GAAI,iFAIZ+N,IAAMyJ,KAAKrY,EAAK0B,cAAc,CAC1Bd,eAAgB,qCAChBC,GAAI,4EAEJmX,GAAwBA,EAAuBjd,KAAK0hB,gBA7HhEzM,oBACI,MAAM,IAAEiM,EAAF,uBAAOjE,GAA2Bjd,KAAK6X,QACzCqJ,EACAlhB,KAAK0hB,aAELzE,EAAuBjd,KAAK0hB,YA+HpCrM,SACI,MAAM,QAAEpS,EAAF,KAAWgC,GAASjF,KAAK4C,OACzB,IACFse,EADE,uBACGjE,EADH,sBAC2BkE,EAD3B,uBACkDU,GACpD7hB,KAAK6X,SACH,gBACF8H,EADE,cAEFD,EAFE,oBAGFqB,EAHE,qBAIFC,EAJE,iBAKFpB,EALE,YAMF5L,EANE,cAOFiN,GACAjhB,KAAKkS,MACH4P,EAAO7D,IAAYC,UACnB6D,EAAkBb,EAAIc,eAAe9U,SAAS,eAAiBgU,EAAIc,eAAe9U,SAAS,YAChGgU,EAAIc,eAAe9U,SAAS,aAAegU,EAAIc,eAAe9U,SAAS,cAClE+U,EAAkBf,EAAIc,eAAe9U,SAAS,gBAAkBgU,EAAIc,eAAe9U,SAAS,YAChGgU,EAAIc,eAAe9U,SAAS,WAoN9B,OACI,kBAAC9G,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAAC2b,GAAI,GAAIC,GAAI,IACnB,kBAAC/b,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,GACrB,kBAACgE,EAAA,EAAD,CAAMG,MAAI,EAAC2b,GAAI,IACX,kBAAC/a,EAAA,EAAD,CAAYrD,QAAS9D,KAAKoiB,kBAAmB/e,QAAQ,KAAKC,UAAU,KAAKJ,UAAWD,EAAQof,UACxF,kBAAC,IAAD,CACIvc,GAAG,uDACHD,eAAe,kBAElBsb,EAAsBzR,OAAS,GAC5B,kBAAChK,EAAA,EAAD,CACIpD,MAAM,YACNsD,UAAWsb,EAAIoB,yBAA2BP,GAC/BE,EACXtM,KAAK,QACLrS,UAAWif,IACXvC,GAAK+B,GAAmBE,EAAmB,KACtC,SAAQf,EAAIpb,yBAEjB,kBAACsJ,EAAA,EAAD,2BACA,kBAAC,IAAD,CACItJ,GAAI,6EAEJD,eAAe,2CAK/B,kBAAC2c,EAAA,EAAD,CAAOC,UAAW,EAAGvf,UAAWD,EAAQmU,OACpC,kBAACjQ,EAAA,EAAD,CAAY9D,QAAQ,QAAQH,UAAWD,EAAQyf,aAC3C,kBAAC,IAAD,CACI5c,GAAG,wCACHD,eAAiB,qVApPpB,MAEzB,OADwBqb,EAAIyB,iBAAyD,eAAtCzB,EAAIyB,gBAAgBpU,cAG3D,oCACI,kBAACwP,EAAA,EAAD,CAAe5a,KAAK,OAAOD,UAAWD,EAAQG,iBAC1C,kBAAC+D,EAAA,EAAD,CAAY7D,UAAU,KAClB,kBAAC,IAAD,CACIwC,GAAI,4FAEJD,eAAe,6DAM5Bkc,GAAmBE,EAElB,kBAAClE,EAAA,EAAD,CAAe5a,KAAK,OAAOD,UAAWD,EAAQG,iBAC1C,kBAAC+D,EAAA,EAAD,CAAY7D,UAAU,KACtB,kBAAC,IAAD,CACYwC,GAAG,iDACHD,eAAgB,+FAMA,IAAjCsb,EAAsBzR,QAAkD,IAAlCmS,EAAuBnS,OAEhE,kBAACkT,EAAA,EAAD,CACI3f,QAASA,EACTJ,YAAa7C,KAAK6iB,WAClB/f,QAASgf,EAAO7c,EAAK0B,cAAc,CAC/Bd,eAAgB,YAChBC,GAAI,kEAEFb,EAAK0B,cAAc,CACjBd,eAAgB,uBAChBC,GAAI,0EAEZ/C,QAASkC,EAAK0B,cAAc,CACxBd,eAAgB,6DAChBC,GACA,sEAEJ9C,WAAYiC,EAAK0B,cAAc,CAC3Bd,eAAgB,YAChBC,GAAI,oDAMZ,oCACI,yBAAK5C,UAAWD,EAAQ6f,2BACpB,kBAAC7b,EAAA,EAAD,CACIzD,aAAcC,IAAcsf,cAC5Bpf,eAAgBC,IAAgBC,MAEhC,kBAACsD,EAAA,EAAD,CAAY9D,QAAQ,KAAKC,UAAU,MAC/B,kBAAC,IAAD,CACIwC,GAAI,gEAEJD,eAAe,eAGvB,yBAAK3C,UAAWD,EAAQ+f,sBACc,IAAjC7B,EAAsBzR,QACnB,yBAAKxM,UAAWD,EAAQggB,eACpB,kBAAC9b,EAAA,EAAD,CAAY9D,QAAQ,SAChB,kBAAC,IAAD,CACIyC,GAAI,2EAEJD,eACI,iJAOZ,kBAACH,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQigB,UACnBtd,UAAWsb,EAAIoB,yBAA2BP,GACtCE,EACJ3e,UAAWif,IACXvC,GAAK+B,GAAmBE,EAAmB,KACtC,SAAQf,EAAIpb,yBAEjB,kBAAC,IAAD,CACIA,GAAI,6EAEJD,eAAe,2CAK9Bsb,EAAsBzR,OAAS,GAC5B,yBAAKxM,UAAWD,EAAQggB,eACpB,kBAAC9b,EAAA,EAAD,CAAY9D,QAAQ,SAChB,kBAAC,IAAD,CACIyC,GAAI,8EAEJD,eAAgB,0DAIxB,kBAACsd,EAAA,EAAD,CACIhC,sBAAuBA,EACvBJ,oBAAqBA,EACrBC,qBAAsBA,EACtBoC,0BACIpjB,KAAKojB,0BAETC,aAAW,IAEf,kBAAC3d,EAAA,EAAD,CACIrC,QAAQ,YACRf,MAAM,UACNY,UAAWD,EAAQigB,UACnBpf,QAAS,IAAM9D,KAAKsjB,kBACpB1d,UAAWsb,EAAIoB,yBAA2BrB,GAE1C,kBAAC,IAAD,CACInb,GAAI,6DAEJD,eAAe,cAElBob,GAAiB,kBAACrK,EAAA,EAAD,CAAkBjB,KAAM,UAYjEkM,GAA0BA,EAAuBnS,OAAS,GACvD,oCACI,kBAACvI,EAAA,EAAD,CAAY9D,QAAQ,KAAKC,UAAU,KAAKJ,UAAWD,EAAQsgB,eACvD,kBAAC,IAAD,CACIzd,GAAI,6EAEJD,eAAe,mBAGvB,kBAACsB,EAAA,EAAD,CAAY9D,QAAQ,QAAQH,UAAWD,EAAQugB,cAC3C,kBAAC,IAAD,CACI1d,GAAI,mFAEJD,eAAe,6CAGvB,yBAAK3C,UAAWD,EAAQwgB,WACpB,+BACI,4BACI,wBAAIvgB,UAAWD,EAAQygB,IACnB,kBAAC,IAAD,CACI5d,GAAI,4EAEJD,eAAe,sBAGvB,wBAAI3C,UAAWD,EAAQygB,IACnB,kBAAC,IAAD,CACI5d,GAAI,4EAEJD,eAAe,qBAGvB,wBAAI3C,UAAWD,EAAQygB,IACnB,kBAAC,IAAD,CACI5d,GAAI,8EAEJD,eAAe,wBAGvB,wBAAI3C,UAAWD,EAAQygB,IACnB,kBAACvc,EAAA,EAAD,CAAY9D,QAAQ,UAApB,aAKPwe,EAAuB5Y,IAAI,CAAC2O,EAAKkB,IAC9B,kBAAC6K,EAAD,CACI7e,IAAKgU,EACL0G,SAAUxf,KAAKwf,SACfC,yBAA0Bzf,KAAKyf,yBAC/BC,cAAeA,EACfzC,uBAAwBA,EACxB0C,gBAAiBA,EACjB/H,IAAKA,EACLkB,MAAOA,EACP8G,iBAAkBA,EAClB5L,YAAaA,UAkD5B4P,S,EAta3B/C,E,cACmBgD,KA+azBhD,EAAYzZ,UAAY,CACpBnE,QAASoE,IAAUC,MAAM,CACrB0J,eAAgB3J,IAAUhI,OAC1BgjB,SAAUhb,IAAUhI,OACpBokB,UAAWpc,IAAUhI,OACrBqkB,GAAIrc,IAAUhI,OACd+X,MAAO/P,IAAUhI,OACjBqjB,YAAarb,IAAUhI,OACvByjB,0BAA2Bzb,IAAUhI,OACrC2jB,qBAAsB3b,IAAUhI,OAChC4jB,cAAe5b,IAAUhI,OACzB6jB,UAAW7b,IAAUhI,OACrB+D,gBAAiBiE,IAAUhI,SAC5BkI,WACHoa,QAASta,IAAUC,MAAM,IAAIC,WAC7BtC,KAAMoC,IAAUC,MAAM,IAAIC,YAGf+C,sBAAWC,YAvjBVtI,IAAD,CACX+O,eAAgB,CACZvI,SAAUxG,EAAM6V,OAAOgM,iBACvBpZ,YAAazI,EAAMG,QAAQ,GAC3BoI,WAAYvI,EAAMG,QAAQ,IAE9BigB,SAAU,CACNvX,WAAY7I,EAAMG,QAAQ,GAC1BoI,WAAYvI,EAAMG,QAAQ,GAC1BqI,cAAexI,EAAMG,QAAQ,GAC7BE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAWtM,UAElE0e,0BAA2B,CACvBhY,WAAY,EACZN,WAAYvI,EAAMG,QAAQ,GAC1BqI,cAAexI,EAAMG,QAAQ,GAC7B,2CAA4C,CACxCE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,SAGtEqM,UAAW,CACP,YAAa,CACT9Y,MAAO,OACP4F,eAAgB,WAChB8G,UAAWpV,EAAMG,QAAQ,GACzB0I,WAAY7I,EAAMG,QAAQ,GAC1BkV,YAAarV,EAAMG,QAAQ,IAE/B,kBAAkB,CACdsI,YAAazI,EAAMG,QAAQ,IAE/B,gCAAiC,CAC7BmX,gBAAiBtX,EAAM6V,OAAOiM,SAASC,uBACvC,+BAAgC,CAC5B1hB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAM6V,OAAOiM,SAASC,0BAGnE,+BAAgC,CAC5BzK,gBAAiBtX,EAAM6V,OAAOiM,SAASE,sBACvC,+BAAgC,CAC5B3hB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAM6V,OAAOiM,SAASE,yBAGnE,qBAAsB,CAClB1K,gBAAiBtX,EAAM6V,OAAOiM,SAASG,oBACvC5hB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAM6V,OAAOiM,SAASG,qBAC3DxZ,YAAazI,EAAMG,QAAQ,GAC3BoO,aAAc,aAAevO,EAAMM,QAAQoO,KAAKgQ,KAChDwD,UAAW,aAAeliB,EAAMM,QAAQoO,KAAKgQ,KAC7CD,UAAW,OACXxQ,SAAU,OACV1F,WAAYvI,EAAMG,QAAQ,GAC1BqI,cAAexI,EAAMG,QAAQ,KAIrCgiB,UAAW,CACP1T,WAAY,cACZ2T,UAAW,QAEf7O,QAAS,CACLhH,WAAY,UAEhB8V,cAAe,CACX5Z,YAAazI,EAAMG,QAAQ,IAE/Bme,WAAY,CACR7P,WAAYzO,EAAMM,QAAQoO,KAAK4T,MAEnCC,OAAQ,CACJ9T,WAAYzO,EAAMM,QAAQmO,WAAW0G,MACrC9U,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,QAElEqN,QAAS,CACL3Z,WAAY7I,EAAMG,QAAQ,IAE9BsiB,eAAgB,CACZ9T,KAAM,GAEVwG,MAAO,CACHtM,WAAY7I,EAAMG,QAAQ,GAC1ByI,QAAS5I,EAAMG,QAAQ,IAE3BsgB,YAAa,CACTpS,aAAcrO,EAAMG,QAAQ,GAC5BE,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,QAElE4L,qBAAsB,CAClBtY,YAAazI,EAAMG,QAAQ,IAE/B6gB,cAAe,CACXpY,QAAS5I,EAAMG,QAAQ,GACvBuiB,OAAQ,iBACRC,aAAc,EACdtU,aAAcrO,EAAMG,QAAQ,GAC5BiV,UAAWpV,EAAMG,QAAQ,IAE7ByiB,eAAgB,CACZ/Z,WAAY7I,EAAMG,QAAQ,IAE9BmhB,cAAe,CACXjhB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,QAElEoM,aAAc,CACVlhB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQmO,WAAW0G,QAElE8L,UAAW,CACP,SAAU,CACN5gB,MAAOL,EAAMM,QAAQC,gBAAgBP,EAAMM,QAAQE,QAAQC,UA2c1B,CAAEke,WAAW,GAAhCrW,CAAwCsW,K,iCCnmBlE,mJAuBA,MAAMpd,EAAgB,CAClBqhB,KAAM,QACNC,WAAY,gBACZC,YAAa,wBACbC,SAAU,qBACVC,cAAe,+BACfC,cAAe,0BACfC,SAAU,iBACVC,eAAgB,kCAChBC,cAAe,yBACfC,OAAQ,0BACRC,oBAAqB,iDACrBC,QAAS,0BACTC,iBAAkB,4BAClBC,SAAU,0BACVC,QAAS,yCACTC,gBAAiB,iDACjBniB,aAAc,gBACdoiB,mBAAoB,gCACpB5e,0BAA2B,8CAC3B6e,8BAA+B,+CAC/BC,YAAa,eACbC,YAAa,eACbC,aAAc,iBACd9F,oBAAqB,kCACrB2C,cAAe,iBACfoD,mBAAoB,qCACpBC,qBAAsB,sCACtBC,SAAU,0BACVC,OAAQ,qCACRC,UAAW,aACXC,SAAU,0BACVC,OAAQ,UACRC,SAAU,mCACVC,kBAAmB,gCAGjB/iB,EAAkB,CACpBC,KAAM,OACN+iB,IAAK,MACLC,IAAK,MACLxG,OAAQ,UAQZ,MAAMpZ,UAAwB5B,IAAMuM,UAMhC9R,YAAY8C,GACR7C,MAAM6C,GACN5C,KAAKkS,MAAQ,GAOjB+C,oBACI,MAAM,aAAEzR,EAAF,eAAgBG,GAAmB3D,KAAK4C,MACxCkkB,EAAW7I,IAAY8I,UAAUvjB,EAAcG,GACjDmjB,GACAA,EAASnmB,KAAMqmB,IACXhnB,KAAK8R,SAAS,CAAEkV,gBAU5B3R,SACI,MAAM,SAAEwD,GAAa7Y,KAAK4C,MAC1B,OAAI5C,KAAKkS,MAAM8U,WACJnO,GAEJ,MAIf5R,EAAgBG,UAAY,CACxByR,SAAUxR,IAAU8R,KAAK5R,WACzB/D,aAAc6D,IAAUhI,OAAOkI,WAC/B5D,eAAgB0D,IAAUhI,OAAOkI","file":"APICredentials.b79d114d4b7eaaaee889.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n                body: subscriptionData \n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(payload, { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {config.label}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n                    {config.type === 'select' && config.multiple === false ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            select\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        >\n                            {config.values.map(key => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    ) : (config.type === 'select' && config.multiple === true) ? (\n                        <>\n                            <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                <Select\n                                    labelId=\"multi-select-label\"\n                                    id=\"multi-select-outlined\"\n                                    margin='dense'\n                                    displayEmpty\n                                    name={config.name}\n                                    multiple\n                                    value={selectedValue}\n                                    onChange={e => handleAppRequestChange(e)}\n                                    input={<Input id='multi-select-outlined' />}\n                                    renderValue={selected => (\n                                        <div className={classes.chips}>\n                                            {selected.map(value => (\n                                                <Chip key={value} label={value} className={classes.chip} />\n                                            ))}\n                                        </div>\n                                    )}\n                                    helperText={\n                                        <Typography variant='caption'>\n                                            {config.tooltip}\n                                        </Typography>\n                                    }\n                                    label={config.label}\n                                >\n                                    {config.values.map(key => (\n                                        <MenuItem key={key} value={key}>\n                                            <Checkbox checked={selectedValue.indexOf(key) > -1} />\n                                            <ListItemText primary={key} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n\n                            <Typography variant='caption'>\n                                {config.tooltip}\n                            </Typography>\n                        </>\n                    ) : (config.type === 'input') ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        />\n                    ) : (\n                                    <TextField\n                                        classes={{\n                                            root: classes.removeHelperPadding,\n                                        }}\n                                        fullWidth\n                                        id={config.name}\n                                        label={config.label}\n                                        value={selectedValue}\n                                        name={config.name}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {config.tooltip}\n                                            </Typography>\n                                        }\n                                        margin='dense'\n                                        variant='outlined'\n                                        disabled={!isUserOwner}\n                                    />\n                                )}\n                            </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    let {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        const isPreviousValueSet = !!(additionalProperties && additionalProperties[config.name]);\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    const propPrefix = keyRequest.keyType.toLowerCase();\n    tokenEndpoint = additionalProperties[`${propPrefix}_token_endpoint`] || tokenEndpoint;\n    revokeEndpoint = additionalProperties[`${propPrefix}_revoke_endpoint`] || revokeEndpoint;\n\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn}>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyType,\n        keyManagerConfig,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    const { additionalProperties } = keyManagerConfig;\n    let { tokenEndpoint } = keyManagerConfig;\n    const propPrefix = keyType.toLowerCase();\n    tokenEndpoint = additionalProperties[`${propPrefix}_token_endpoint`] || tokenEndpoint;\n\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip title={tokenCopied ? 'Copied' : 'Copy to clipboard'} placement='right'>\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Alert1 from 'AppComponents/Shared/Alert';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                     Alert1.error(error.description ||\n                         intl.formatMessage({\n                             id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                              defaultMessage: 'Error occurred when generating Access Token',\n                         })\n                     );\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const { classes, intl, selectedApp: { hashEnabled }, keyType } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={secretCopied ? 'Copied' : 'Copy to clipboard'}\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={classes.button}\n                                    onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                    disabled={!isUserOwner}\n                                >\n                                    <FormattedMessage\n                                        defaultMessage='Regenerate Consumer Secret'\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                    />\n                                </Button>\n                            )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl \n                                            keys={{ consumerKey, consumerSecret }} \n                                            keyType={keyType} \n                                            keyManagerConfig={keyManagerConfig} \n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button onClick={this.generateAccessToken} color='primary' disabled={isUpdating}>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button onClick={this.handleClose} color='primary' autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {keyManagerConfig.enableTokenGeneration &&\n                                    supportedGrantTypesUnchanged.find(a => a.includes('client_credentials')) &&\n                                    (<Button\n                                        variant='outlined'\n                                        size='small'\n                                        color='primary'\n                                        className={classes.margin}\n                                        onClick={this.handleClickOpen}\n                                        disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                            defaultMessage='Generate Access Token'\n                                        />\n                                    </Button>)}\n                                <Button\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {!supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport Validation from 'AppData/Validation';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes || availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ keyRequest: newRequest, selectedTab: newSelectedTab });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectdKMGrants = selectdKM.availableGrantTypes || [];\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes: selectdKMGrants.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys, isKeyJWT });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n     updateHasError = (state) => {\n         this.setState({ hasError: state });\n     }\n\n     /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n     render() {\n         const {\n             classes, selectedApp, keyType, summary, selectedApp: { hashEnabled },\n         } = this.props;\n         const {\n             keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n             providedConsumerSecret, selectedTab, keyManagers, validating, hasError,\n             importDisabled, mode,\n         } = this.state;\n         if (keyManagers && keyManagers.length === 0) {\n             return (\n                 <div className={classes.root}>\n                     <Box mb={1}>\n                         <Typography variant='h5' className={classes.keyTitle}>\n                             {this.toTitleCase(keyType)}\n                             <FormattedMessage\n                                 id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                 defaultMessage=' OAuth2 Keys'\n                             />\n                         </Typography>\n                     </Box>\n                     <InlineMessage type='info' className={classes.dialogContainer}>\n                         <Typography variant='h5' component='h3'>\n                             <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km' defaultMessage='No Key Managers' />\n                         </Typography>\n                         <Typography component='p'>\n                             <FormattedMessage\n                                 id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                 defaultMessage='No Key Managers active to generate keys.'\n                             />\n                         </Typography>\n                     </InlineMessage>\n                 </div>\n             );\n         }\n         if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n             return <Loading />;\n         }\n         const username = AuthManager.getUser().name;\n         let isUserOwner = false;\n\n         if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n             isUserOwner = true;\n         }\n         const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n         if (summary) {\n             if (keys) {\n                 return (\n                     <TokenMangerSummary\n                         keys={keys}\n                         key={key}\n                         keyStates={this.keyStates}\n                         selectedApp={selectedApp}\n                         selectedTab={selectedTab}\n                         keyType={keyType}\n                         isKeyJWT={isKeyJWT}\n                         isUserOwner={isUserOwner}\n                     />\n                 );\n             } else {\n                 return (<Progress />);\n             }\n         }\n         if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n             return (\n                 <>\n                     <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                         <FormattedMessage\n                             id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                             defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                         />\n                     </Typography>\n                     <Button\n                         variant='contained'\n                         color='primary'\n                         className={classes.cleanUpButton}\n                         onClick={this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                     >\n                         <FormattedMessage\n                             defaultMessage='Clean up'\n                             id='Shared.AppsAndKeys.TokenManager.cleanup'\n                         />\n                     </Button>\n                 </>\n             );\n         }\n         if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n             return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n         }\n         return (\n             <>\n                 {(keyManagers && keyManagers.length > 1) && (\n                     <StyledTabs\n                         value={selectedTab}\n                         indicatorColor='primary'\n                         textColor='primary'\n                         onChange={this.handleTabChange}\n                         aria-label='key manager tabs'\n                     >\n                         {keyManagers.map((keymanager) => (\n                             <StyledTab\n                                 label={keymanager.displayName || keymanager.name}\n                                 value={keymanager.name}\n                                 disabled={!keymanager.enabled}\n                             />\n                         ))}\n                     </StyledTabs>\n                 )}\n                 <div className={classes.root}>\n                     <Box mb={1}>\n                         <Typography variant='h5' className={classes.keyTitle}>\n                             {this.toTitleCase(keyType)}\n                             <FormattedMessage\n                                 id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                 defaultMessage=' OAuth2 Keys'\n                             />\n                         </Typography>\n                     </Box>\n                     {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                         <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                             <Box display='flex' flexDirection='row'>\n                                 <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                     <FormattedMessage\n                                         defaultMessage='Key and Secret'\n                                         id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                     />\n                                 </Typography>\n                                 {\n                                     keymanager.enableMapOAuthConsumerApps && (\n                                         <Box ml={2}>\n                                             <ImportExternalApp\n                                                 onChange={this.handleOnChangeProvidedOAuth}\n                                                 consumerKey={providedConsumerKey}\n                                                 consumerSecret={providedConsumerSecret}\n                                                 isUserOwner={isUserOwner}\n                                                 key={key}\n                                                 provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                 importDisabled={importDisabled}\n                                             />\n                                         </Box>\n                                     )\n                                 }\n                             </Box>\n                             <Box m={2}>\n                                 <ViewKeys\n                                     selectedApp={selectedApp}\n                                     selectedTab={selectedTab}\n                                     keyType={keyType}\n                                     keys={keys}\n                                     selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                     isUserOwner={isUserOwner}\n                                     hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                     keyManagerConfig={keymanager}\n                                 />\n                             </Box>\n                             <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                 {\n                                     key\n                                         ? (\n                                             <FormattedMessage\n                                                 defaultMessage='Key Configurations'\n                                                 id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                             />\n                                         )\n                                         : (\n                                             <FormattedMessage\n                                                 defaultMessage='Key Configuration'\n                                                 id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                             />\n                                         )\n                                 }\n                             </Typography>\n                             <Box m={2}>\n                                 <KeyConfiguration\n                                     keys={keys}\n                                     key={key}\n                                     selectedApp={selectedApp}\n                                     selectedTab={selectedTab}\n                                     keyType={keyType}\n                                     updateKeyRequest={this.updateKeyRequest}\n                                     keyRequest={keyRequest}\n                                     isUserOwner={isUserOwner}\n                                     isKeysAvailable={key}\n                                     keyManagerConfig={keymanager}\n                                     validating={validating}\n                                     updateHasError={this.updateHasError}\n                                     callbackError={hasError}\n                                     setValidating={this.setValidating}\n                                 />\n                                 <div className={classes.generateWrapper}>\n                                     <ScopeValidation\n                                         resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                         resourceMethod={resourceMethods.POST}\n                                     >\n                                         {!isUserOwner ? (\n                                             <>\n                                                 <Button\n                                                     variant='contained'\n                                                     color='primary'\n                                                     className={classes.button}\n                                                     onClick={\n                                                         key ? this.updateKeys : this.generateKeys\n                                                     }\n                                                     disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation}\n                                                 >\n                                                     {key ? 'Update keys' : 'Generate Keys'}\n                                                     {isLoading && <CircularProgress size={20} />}\n                                                 </Button>\n                                                 <Typography variant='caption'>\n                                                     <FormattedMessage\n                                                         defaultMessage='Only owner can generate or update keys'\n                                                         id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                     />\n                                                 </Typography>\n                                             </>\n                                         ) : (\n                                             <Box display='flex'>\n                                                 <Button\n                                                     variant='contained'\n                                                     color='primary'\n                                                     className={classes.button}\n                                                     onClick={key ? this.updateKeys : this.generateKeys}\n                                                     disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')}\n                                                 >\n                                                     {key ? 'Update' : 'Generate Keys'}\n                                                     {isLoading && <CircularProgress size={20} />}\n                                                 </Button>\n                                                 {!keymanager.enableOAuthAppCreation && (\n                                                     <Box m={2} display='flex'>\n                                                         <WarningIcon className={classes.warningIcon} />\n                                                         <Typography variant='body1'>\n                                                             <FormattedMessage\n                                                                 defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                 id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                 values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                             />\n                                                         </Typography>\n                                                     </Box>\n                                                 )}\n                                             </Box>\n                                         )}\n                                     </ScopeValidation>\n                                 </div>\n\n                             </Box>\n                         </TabPanel>\n                     ))}\n                 </div>\n             </>\n         );\n     }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, index, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td} id={app.label}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                            id={app.label + '-MA'}\n                            aria-labelledby={app.label + '-MA ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Link\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                                id={app.label + '-UN'}\n                                aria-labelledby={app.label + '-UN ' + app.label}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </Link>\n                        </ScopeValidation>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            id={app.label + '-PK'}\n                            aria-labelledby={app.label + '-PK ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            id={app.label + '-SB'}\n                            aria-labelledby={app.label + '-SB ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        }\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td':{\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        expanded: true,\n        selectedAppId: false,\n        selectedKeyType: false,\n        subscriptionRequest: {\n            applicationId: '',\n            apiId: '',\n            throttlingPolicy: '',\n        },\n        throttlingPolicyList: [],\n        applicationOwner: '',\n        hashEnabled: false,\n        isSubscribing: false,\n    };\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2') &&\n        !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2') &&\n         !api.securityScheme.includes('api_key');\n        const renderCredentialInfo = () => {\n            const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                        + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                            <FormattedMessage\n                                        id='Apis.Details.Creadentials.credetials.mutualssl'\n                                        defaultMessage={'Subscription is not required for Mutual SSL APIs' + \n                                        ' or APIs with only Basic Authentication.'}\n                                    />\n                            </Typography>\n                        </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h3'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.' +\n                                        'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL || \n                                                    isOnlyBasicAuth}\n                                                component={Link}\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                                    `/apis/${api.id}/credentials/wizard`}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                    defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                />\n                                            </Button>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h3' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <Typography variant='srOnly'>\n                                                    Actions\n                                                </Typography>\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={index}\n                                                loadInfo={this.loadInfo}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' component='h2' className={classes.titleSub}>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.Credentials.api.credentials'\n                                    defaultMessage='Subscriptions'\n                                />\n                                {applicationsAvailable.length > 0 && (\n                                    <Button\n                                        color='secondary'\n                                        disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                || isOnlyBasicAuth}\n                                        size='small'\n                                        component={Link}\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                            `/apis/${api.id}/credentials/wizard`}\n                                    >\n                                        <Icon>add_circle_outline</Icon>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Credentials.'\n                                            + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                            defaultMessage='Subscription &amp; Key Generation Wizard'\n                                        />\n                                    </Button>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n"],"sourceRoot":""}